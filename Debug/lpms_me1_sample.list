
lpms_me1_sample.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008564  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000458  080086f8  080086f8  000186f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b50  08008b50  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08008b50  08008b50  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008b50  08008b50  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b50  08008b50  00018b50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008b54  08008b54  00018b54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008b58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000164  200001dc  08008d34  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000340  08008d34  00020340  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e40d  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000022f4  00000000  00000000  0002e619  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b78  00000000  00000000  00030910  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a40  00000000  00000000  00031488  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000198ad  00000000  00000000  00031ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000aff1  00000000  00000000  0004b775  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008569c  00000000  00000000  00056766  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dbe02  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000404c  00000000  00000000  000dbe80  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080086dc 	.word	0x080086dc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	080086dc 	.word	0x080086dc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b088      	sub	sp, #32
 8000c8c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8e:	f107 030c 	add.w	r3, r7, #12
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	605a      	str	r2, [r3, #4]
 8000c98:	609a      	str	r2, [r3, #8]
 8000c9a:	60da      	str	r2, [r3, #12]
 8000c9c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c9e:	4b23      	ldr	r3, [pc, #140]	; (8000d2c <MX_GPIO_Init+0xa4>)
 8000ca0:	695b      	ldr	r3, [r3, #20]
 8000ca2:	4a22      	ldr	r2, [pc, #136]	; (8000d2c <MX_GPIO_Init+0xa4>)
 8000ca4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ca8:	6153      	str	r3, [r2, #20]
 8000caa:	4b20      	ldr	r3, [pc, #128]	; (8000d2c <MX_GPIO_Init+0xa4>)
 8000cac:	695b      	ldr	r3, [r3, #20]
 8000cae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cb2:	60bb      	str	r3, [r7, #8]
 8000cb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb6:	4b1d      	ldr	r3, [pc, #116]	; (8000d2c <MX_GPIO_Init+0xa4>)
 8000cb8:	695b      	ldr	r3, [r3, #20]
 8000cba:	4a1c      	ldr	r2, [pc, #112]	; (8000d2c <MX_GPIO_Init+0xa4>)
 8000cbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cc0:	6153      	str	r3, [r2, #20]
 8000cc2:	4b1a      	ldr	r3, [pc, #104]	; (8000d2c <MX_GPIO_Init+0xa4>)
 8000cc4:	695b      	ldr	r3, [r3, #20]
 8000cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cca:	607b      	str	r3, [r7, #4]
 8000ccc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cce:	4b17      	ldr	r3, [pc, #92]	; (8000d2c <MX_GPIO_Init+0xa4>)
 8000cd0:	695b      	ldr	r3, [r3, #20]
 8000cd2:	4a16      	ldr	r2, [pc, #88]	; (8000d2c <MX_GPIO_Init+0xa4>)
 8000cd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cd8:	6153      	str	r3, [r2, #20]
 8000cda:	4b14      	ldr	r3, [pc, #80]	; (8000d2c <MX_GPIO_Init+0xa4>)
 8000cdc:	695b      	ldr	r3, [r3, #20]
 8000cde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ce2:	603b      	str	r3, [r7, #0]
 8000ce4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	2108      	movs	r1, #8
 8000cea:	4811      	ldr	r0, [pc, #68]	; (8000d30 <MX_GPIO_Init+0xa8>)
 8000cec:	f001 f820 	bl	8001d30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000cf0:	2308      	movs	r3, #8
 8000cf2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d00:	f107 030c 	add.w	r3, r7, #12
 8000d04:	4619      	mov	r1, r3
 8000d06:	480a      	ldr	r0, [pc, #40]	; (8000d30 <MX_GPIO_Init+0xa8>)
 8000d08:	f000 fea0 	bl	8001a4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000d0c:	2310      	movs	r3, #16
 8000d0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d10:	2300      	movs	r3, #0
 8000d12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d18:	f107 030c 	add.w	r3, r7, #12
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4804      	ldr	r0, [pc, #16]	; (8000d30 <MX_GPIO_Init+0xa8>)
 8000d20:	f000 fe94 	bl	8001a4c <HAL_GPIO_Init>

}
 8000d24:	bf00      	nop
 8000d26:	3720      	adds	r7, #32
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	40021000 	.word	0x40021000
 8000d30:	48000400 	.word	0x48000400

08000d34 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000d38:	4b1b      	ldr	r3, [pc, #108]	; (8000da8 <MX_I2C1_Init+0x74>)
 8000d3a:	4a1c      	ldr	r2, [pc, #112]	; (8000dac <MX_I2C1_Init+0x78>)
 8000d3c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000d3e:	4b1a      	ldr	r3, [pc, #104]	; (8000da8 <MX_I2C1_Init+0x74>)
 8000d40:	4a1b      	ldr	r2, [pc, #108]	; (8000db0 <MX_I2C1_Init+0x7c>)
 8000d42:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000d44:	4b18      	ldr	r3, [pc, #96]	; (8000da8 <MX_I2C1_Init+0x74>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d4a:	4b17      	ldr	r3, [pc, #92]	; (8000da8 <MX_I2C1_Init+0x74>)
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d50:	4b15      	ldr	r3, [pc, #84]	; (8000da8 <MX_I2C1_Init+0x74>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d56:	4b14      	ldr	r3, [pc, #80]	; (8000da8 <MX_I2C1_Init+0x74>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d5c:	4b12      	ldr	r3, [pc, #72]	; (8000da8 <MX_I2C1_Init+0x74>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d62:	4b11      	ldr	r3, [pc, #68]	; (8000da8 <MX_I2C1_Init+0x74>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d68:	4b0f      	ldr	r3, [pc, #60]	; (8000da8 <MX_I2C1_Init+0x74>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d6e:	480e      	ldr	r0, [pc, #56]	; (8000da8 <MX_I2C1_Init+0x74>)
 8000d70:	f001 f810 	bl	8001d94 <HAL_I2C_Init>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d7a:	f000 fb51 	bl	8001420 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d7e:	2100      	movs	r1, #0
 8000d80:	4809      	ldr	r0, [pc, #36]	; (8000da8 <MX_I2C1_Init+0x74>)
 8000d82:	f001 fb79 	bl	8002478 <HAL_I2CEx_ConfigAnalogFilter>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d8c:	f000 fb48 	bl	8001420 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d90:	2100      	movs	r1, #0
 8000d92:	4805      	ldr	r0, [pc, #20]	; (8000da8 <MX_I2C1_Init+0x74>)
 8000d94:	f001 fbbb 	bl	800250e <HAL_I2CEx_ConfigDigitalFilter>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d9e:	f000 fb3f 	bl	8001420 <Error_Handler>
  }

}
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	20000204 	.word	0x20000204
 8000dac:	40005400 	.word	0x40005400
 8000db0:	2000090e 	.word	0x2000090e

08000db4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b08a      	sub	sp, #40	; 0x28
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dbc:	f107 0314 	add.w	r3, r7, #20
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	605a      	str	r2, [r3, #4]
 8000dc6:	609a      	str	r2, [r3, #8]
 8000dc8:	60da      	str	r2, [r3, #12]
 8000dca:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a17      	ldr	r2, [pc, #92]	; (8000e30 <HAL_I2C_MspInit+0x7c>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d127      	bne.n	8000e26 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd6:	4b17      	ldr	r3, [pc, #92]	; (8000e34 <HAL_I2C_MspInit+0x80>)
 8000dd8:	695b      	ldr	r3, [r3, #20]
 8000dda:	4a16      	ldr	r2, [pc, #88]	; (8000e34 <HAL_I2C_MspInit+0x80>)
 8000ddc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000de0:	6153      	str	r3, [r2, #20]
 8000de2:	4b14      	ldr	r3, [pc, #80]	; (8000e34 <HAL_I2C_MspInit+0x80>)
 8000de4:	695b      	ldr	r3, [r3, #20]
 8000de6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000dea:	613b      	str	r3, [r7, #16]
 8000dec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000dee:	23c0      	movs	r3, #192	; 0xc0
 8000df0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000df2:	2312      	movs	r3, #18
 8000df4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000df6:	2301      	movs	r3, #1
 8000df8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dfa:	2303      	movs	r3, #3
 8000dfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000dfe:	2304      	movs	r3, #4
 8000e00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e02:	f107 0314 	add.w	r3, r7, #20
 8000e06:	4619      	mov	r1, r3
 8000e08:	480b      	ldr	r0, [pc, #44]	; (8000e38 <HAL_I2C_MspInit+0x84>)
 8000e0a:	f000 fe1f 	bl	8001a4c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e0e:	4b09      	ldr	r3, [pc, #36]	; (8000e34 <HAL_I2C_MspInit+0x80>)
 8000e10:	69db      	ldr	r3, [r3, #28]
 8000e12:	4a08      	ldr	r2, [pc, #32]	; (8000e34 <HAL_I2C_MspInit+0x80>)
 8000e14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e18:	61d3      	str	r3, [r2, #28]
 8000e1a:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <HAL_I2C_MspInit+0x80>)
 8000e1c:	69db      	ldr	r3, [r3, #28]
 8000e1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000e26:	bf00      	nop
 8000e28:	3728      	adds	r7, #40	; 0x28
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40005400 	.word	0x40005400
 8000e34:	40021000 	.word	0x40021000
 8000e38:	48000400 	.word	0x48000400

08000e3c <lpme1_get_timestamp>:
  *@brief: Get system time stamp
  *@para: Pointer to float variable use to save read value
  *@ret: Status, return LPME1_OK if read success otherwise return LPME1_ERROR
  */
lpme1_status_t lpme1_get_timestamp(float *time)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
    uint8_t buffer[4];
    if(lpme1_read_buffer(TIMESTAMP_0, buffer, 4) == LPME1_OK)
 8000e44:	f107 030c 	add.w	r3, r7, #12
 8000e48:	2204      	movs	r2, #4
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	2020      	movs	r0, #32
 8000e4e:	f000 f951 	bl	80010f4 <lpme1_read_buffer>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d10b      	bne.n	8000e70 <lpme1_get_timestamp+0x34>
    {
        *time = uint8_to_float(buffer);
 8000e58:	f107 030c 	add.w	r3, r7, #12
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f000 f927 	bl	80010b0 <uint8_to_float>
 8000e62:	eef0 7a40 	vmov.f32	s15, s0
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	edc3 7a00 	vstr	s15, [r3]
        return LPME1_OK;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	e000      	b.n	8000e72 <lpme1_get_timestamp+0x36>
    }
    else
        return LPME1_ERROR;
 8000e70:	2300      	movs	r3, #0
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3710      	adds	r7, #16
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <lpme1_get_acc>:
  *@brief: Get accelerometer data
  *@para: Pointer to float array that have 3 elements at least
  *@ret: Status, return LPME1_OK if read success otherwise return LPME1_ERROR
  */
lpme1_status_t lpme1_get_acc(float *acc)
{
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b086      	sub	sp, #24
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	6078      	str	r0, [r7, #4]
    DataDecoder data[3];
    if(lpme1_read_buffer(ACC_X_0, (uint8_t *)data[0].u8vals, 12) == LPME1_OK)
 8000e82:	f107 0308 	add.w	r3, r7, #8
 8000e86:	220c      	movs	r2, #12
 8000e88:	4619      	mov	r1, r3
 8000e8a:	2024      	movs	r0, #36	; 0x24
 8000e8c:	f000 f932 	bl	80010f4 <lpme1_read_buffer>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	d116      	bne.n	8000ec4 <lpme1_get_acc+0x4a>
    {
        for(uint8_t i = 0; i<3; i++)
 8000e96:	2300      	movs	r3, #0
 8000e98:	75fb      	strb	r3, [r7, #23]
 8000e9a:	e00e      	b.n	8000eba <lpme1_get_acc+0x40>
        {
            *(acc+i) = data[i].fval;
 8000e9c:	7dfa      	ldrb	r2, [r7, #23]
 8000e9e:	7dfb      	ldrb	r3, [r7, #23]
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	6879      	ldr	r1, [r7, #4]
 8000ea4:	440b      	add	r3, r1
 8000ea6:	0092      	lsls	r2, r2, #2
 8000ea8:	f107 0118 	add.w	r1, r7, #24
 8000eac:	440a      	add	r2, r1
 8000eae:	3a10      	subs	r2, #16
 8000eb0:	6812      	ldr	r2, [r2, #0]
 8000eb2:	601a      	str	r2, [r3, #0]
        for(uint8_t i = 0; i<3; i++)
 8000eb4:	7dfb      	ldrb	r3, [r7, #23]
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	75fb      	strb	r3, [r7, #23]
 8000eba:	7dfb      	ldrb	r3, [r7, #23]
 8000ebc:	2b02      	cmp	r3, #2
 8000ebe:	d9ed      	bls.n	8000e9c <lpme1_get_acc+0x22>
        }
        return LPME1_OK;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	e000      	b.n	8000ec6 <lpme1_get_acc+0x4c>
    }
    else
        return LPME1_ERROR;
 8000ec4:	2300      	movs	r3, #0

}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3718      	adds	r7, #24
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}

08000ece <lpme1_get_gyr>:
  *@brief: Get gyroscope data
  *@para: Pointer to float array that have 3 elements at least
  *@ret: Status, return LPME1_OK if read success otherwise return LPME1_ERROR
  */
lpme1_status_t lpme1_get_gyr(float *gyr)
{
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	b086      	sub	sp, #24
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	6078      	str	r0, [r7, #4]
    DataDecoder data[3];
    if(lpme1_read_buffer(GYR_X_0, (uint8_t *)data[0].u8vals, 12) == LPME1_OK)
 8000ed6:	f107 0308 	add.w	r3, r7, #8
 8000eda:	220c      	movs	r2, #12
 8000edc:	4619      	mov	r1, r3
 8000ede:	2030      	movs	r0, #48	; 0x30
 8000ee0:	f000 f908 	bl	80010f4 <lpme1_read_buffer>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b01      	cmp	r3, #1
 8000ee8:	d116      	bne.n	8000f18 <lpme1_get_gyr+0x4a>
    {
        for(uint8_t i = 0; i<3; i++)
 8000eea:	2300      	movs	r3, #0
 8000eec:	75fb      	strb	r3, [r7, #23]
 8000eee:	e00e      	b.n	8000f0e <lpme1_get_gyr+0x40>
        {
            *(gyr+i) = data[i].fval;
 8000ef0:	7dfa      	ldrb	r2, [r7, #23]
 8000ef2:	7dfb      	ldrb	r3, [r7, #23]
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	6879      	ldr	r1, [r7, #4]
 8000ef8:	440b      	add	r3, r1
 8000efa:	0092      	lsls	r2, r2, #2
 8000efc:	f107 0118 	add.w	r1, r7, #24
 8000f00:	440a      	add	r2, r1
 8000f02:	3a10      	subs	r2, #16
 8000f04:	6812      	ldr	r2, [r2, #0]
 8000f06:	601a      	str	r2, [r3, #0]
        for(uint8_t i = 0; i<3; i++)
 8000f08:	7dfb      	ldrb	r3, [r7, #23]
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	75fb      	strb	r3, [r7, #23]
 8000f0e:	7dfb      	ldrb	r3, [r7, #23]
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d9ed      	bls.n	8000ef0 <lpme1_get_gyr+0x22>
        }
        return LPME1_OK;
 8000f14:	2301      	movs	r3, #1
 8000f16:	e000      	b.n	8000f1a <lpme1_get_gyr+0x4c>
    }
    else
        return LPME1_ERROR;
 8000f18:	2300      	movs	r3, #0
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3718      	adds	r7, #24
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <lpme1_get_mag>:
  *@brief: Get magnetometer data
  *@para: Pointer to float array that have 3 elements at least
  *@ret: Status, return LPME1_OK if read success otherwise return LPME1_ERROR
  */
lpme1_status_t lpme1_get_mag(float *mag)
{
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b086      	sub	sp, #24
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
    DataDecoder data[3];
    if(lpme1_read_buffer(MAG_X_0, (uint8_t *)data[0].u8vals, 12) == LPME1_OK)
 8000f2a:	f107 0308 	add.w	r3, r7, #8
 8000f2e:	220c      	movs	r2, #12
 8000f30:	4619      	mov	r1, r3
 8000f32:	203c      	movs	r0, #60	; 0x3c
 8000f34:	f000 f8de 	bl	80010f4 <lpme1_read_buffer>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d116      	bne.n	8000f6c <lpme1_get_mag+0x4a>
    {
        for(uint8_t i = 0; i<3; i++)
 8000f3e:	2300      	movs	r3, #0
 8000f40:	75fb      	strb	r3, [r7, #23]
 8000f42:	e00e      	b.n	8000f62 <lpme1_get_mag+0x40>
        {
            *(mag+i) = data[i].fval;
 8000f44:	7dfa      	ldrb	r2, [r7, #23]
 8000f46:	7dfb      	ldrb	r3, [r7, #23]
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	6879      	ldr	r1, [r7, #4]
 8000f4c:	440b      	add	r3, r1
 8000f4e:	0092      	lsls	r2, r2, #2
 8000f50:	f107 0118 	add.w	r1, r7, #24
 8000f54:	440a      	add	r2, r1
 8000f56:	3a10      	subs	r2, #16
 8000f58:	6812      	ldr	r2, [r2, #0]
 8000f5a:	601a      	str	r2, [r3, #0]
        for(uint8_t i = 0; i<3; i++)
 8000f5c:	7dfb      	ldrb	r3, [r7, #23]
 8000f5e:	3301      	adds	r3, #1
 8000f60:	75fb      	strb	r3, [r7, #23]
 8000f62:	7dfb      	ldrb	r3, [r7, #23]
 8000f64:	2b02      	cmp	r3, #2
 8000f66:	d9ed      	bls.n	8000f44 <lpme1_get_mag+0x22>
        }
        return LPME1_OK;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	e000      	b.n	8000f6e <lpme1_get_mag+0x4c>
    }
    else
        return LPME1_ERROR;
 8000f6c:	2300      	movs	r3, #0
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3718      	adds	r7, #24
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <lpme1_get_euler>:
  *@brief: Get euler angle
  *@para: Pointer to float array that have 3 elements at least
  *@ret: Status, return LPME1_OK if read success otherwise return LPME1_ERROR
  */
lpme1_status_t lpme1_get_euler(float *euler)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b086      	sub	sp, #24
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
    DataDecoder data[3];
    if(lpme1_read_buffer(EULER_X_0, (uint8_t *)data[0].u8vals, 12) == LPME1_OK)
 8000f7e:	f107 0308 	add.w	r3, r7, #8
 8000f82:	220c      	movs	r2, #12
 8000f84:	4619      	mov	r1, r3
 8000f86:	2048      	movs	r0, #72	; 0x48
 8000f88:	f000 f8b4 	bl	80010f4 <lpme1_read_buffer>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d116      	bne.n	8000fc0 <lpme1_get_euler+0x4a>
    {
        for(uint8_t i = 0; i<3; i++)
 8000f92:	2300      	movs	r3, #0
 8000f94:	75fb      	strb	r3, [r7, #23]
 8000f96:	e00e      	b.n	8000fb6 <lpme1_get_euler+0x40>
        {
            *(euler+i) = data[i].fval;
 8000f98:	7dfa      	ldrb	r2, [r7, #23]
 8000f9a:	7dfb      	ldrb	r3, [r7, #23]
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	6879      	ldr	r1, [r7, #4]
 8000fa0:	440b      	add	r3, r1
 8000fa2:	0092      	lsls	r2, r2, #2
 8000fa4:	f107 0118 	add.w	r1, r7, #24
 8000fa8:	440a      	add	r2, r1
 8000faa:	3a10      	subs	r2, #16
 8000fac:	6812      	ldr	r2, [r2, #0]
 8000fae:	601a      	str	r2, [r3, #0]
        for(uint8_t i = 0; i<3; i++)
 8000fb0:	7dfb      	ldrb	r3, [r7, #23]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	75fb      	strb	r3, [r7, #23]
 8000fb6:	7dfb      	ldrb	r3, [r7, #23]
 8000fb8:	2b02      	cmp	r3, #2
 8000fba:	d9ed      	bls.n	8000f98 <lpme1_get_euler+0x22>
        }
        return LPME1_OK;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	e000      	b.n	8000fc2 <lpme1_get_euler+0x4c>
    }
    else
        return LPME1_ERROR;
 8000fc0:	2300      	movs	r3, #0
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3718      	adds	r7, #24
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <lpme1_get_quat>:
  *@brief: Get quateration
  *@para: Pointer to float array that have 4 elements at least
  *@ret: Status, return LPME1_OK if read success otherwise return LPME1_ERROR
  */
lpme1_status_t lpme1_get_quat(float *quat)
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b088      	sub	sp, #32
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	6078      	str	r0, [r7, #4]
    DataDecoder data[4];
    if(lpme1_read_buffer(QUAT_W_0, (uint8_t *)data[0].u8vals, 16) == LPME1_OK)
 8000fd2:	f107 030c 	add.w	r3, r7, #12
 8000fd6:	2210      	movs	r2, #16
 8000fd8:	4619      	mov	r1, r3
 8000fda:	2054      	movs	r0, #84	; 0x54
 8000fdc:	f000 f88a 	bl	80010f4 <lpme1_read_buffer>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d116      	bne.n	8001014 <lpme1_get_quat+0x4a>
    {
        for(uint8_t i = 0; i<4; i++)
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	77fb      	strb	r3, [r7, #31]
 8000fea:	e00e      	b.n	800100a <lpme1_get_quat+0x40>
        {
            *(quat+i) = data[i].fval;
 8000fec:	7ffa      	ldrb	r2, [r7, #31]
 8000fee:	7ffb      	ldrb	r3, [r7, #31]
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	6879      	ldr	r1, [r7, #4]
 8000ff4:	440b      	add	r3, r1
 8000ff6:	0092      	lsls	r2, r2, #2
 8000ff8:	f107 0120 	add.w	r1, r7, #32
 8000ffc:	440a      	add	r2, r1
 8000ffe:	3a14      	subs	r2, #20
 8001000:	6812      	ldr	r2, [r2, #0]
 8001002:	601a      	str	r2, [r3, #0]
        for(uint8_t i = 0; i<4; i++)
 8001004:	7ffb      	ldrb	r3, [r7, #31]
 8001006:	3301      	adds	r3, #1
 8001008:	77fb      	strb	r3, [r7, #31]
 800100a:	7ffb      	ldrb	r3, [r7, #31]
 800100c:	2b03      	cmp	r3, #3
 800100e:	d9ed      	bls.n	8000fec <lpme1_get_quat+0x22>
        }
        return LPME1_OK;
 8001010:	2301      	movs	r3, #1
 8001012:	e000      	b.n	8001016 <lpme1_get_quat+0x4c>
    }
    else
        return LPME1_ERROR;
 8001014:	2300      	movs	r3, #0
}
 8001016:	4618      	mov	r0, r3
 8001018:	3720      	adds	r7, #32
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <lpme1_get_linacc>:
  *@brief: Get liner  acceleration
  *@para: Pointer to float array that have 3 elements at least
  *@ret: Status, return LPME1_OK if read success otherwise return LPME1_ERROR
  */
lpme1_status_t lpme1_get_linacc(float *linacc)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b086      	sub	sp, #24
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
    DataDecoder data[3];
    if(lpme1_read_buffer(LIN_ACC_X_0, (uint8_t *)data[0].u8vals, 12) == LPME1_OK)
 8001026:	f107 0308 	add.w	r3, r7, #8
 800102a:	220c      	movs	r2, #12
 800102c:	4619      	mov	r1, r3
 800102e:	2064      	movs	r0, #100	; 0x64
 8001030:	f000 f860 	bl	80010f4 <lpme1_read_buffer>
 8001034:	4603      	mov	r3, r0
 8001036:	2b01      	cmp	r3, #1
 8001038:	d116      	bne.n	8001068 <lpme1_get_linacc+0x4a>
    {
        for(uint8_t i = 0; i<3; i++)
 800103a:	2300      	movs	r3, #0
 800103c:	75fb      	strb	r3, [r7, #23]
 800103e:	e00e      	b.n	800105e <lpme1_get_linacc+0x40>
        {
            *(linacc+i) = data[i].fval;
 8001040:	7dfa      	ldrb	r2, [r7, #23]
 8001042:	7dfb      	ldrb	r3, [r7, #23]
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	6879      	ldr	r1, [r7, #4]
 8001048:	440b      	add	r3, r1
 800104a:	0092      	lsls	r2, r2, #2
 800104c:	f107 0118 	add.w	r1, r7, #24
 8001050:	440a      	add	r2, r1
 8001052:	3a10      	subs	r2, #16
 8001054:	6812      	ldr	r2, [r2, #0]
 8001056:	601a      	str	r2, [r3, #0]
        for(uint8_t i = 0; i<3; i++)
 8001058:	7dfb      	ldrb	r3, [r7, #23]
 800105a:	3301      	adds	r3, #1
 800105c:	75fb      	strb	r3, [r7, #23]
 800105e:	7dfb      	ldrb	r3, [r7, #23]
 8001060:	2b02      	cmp	r3, #2
 8001062:	d9ed      	bls.n	8001040 <lpme1_get_linacc+0x22>
        }
        return LPME1_OK;
 8001064:	2301      	movs	r3, #1
 8001066:	e000      	b.n	800106a <lpme1_get_linacc+0x4c>
    }
    else
        return LPME1_ERROR;
 8001068:	2300      	movs	r3, #0
}
 800106a:	4618      	mov	r0, r3
 800106c:	3718      	adds	r7, #24
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <lpme1_get_temp>:
  *@brief: Get hardware system temperature
  *@para: Pointer to float array that have 3 elements at least
  *@ret: Status, return LPME1_OK if read success otherwise return LPME1_ERROR
  */
lpme1_status_t lpme1_get_temp(float *temp)
{
 8001072:	b580      	push	{r7, lr}
 8001074:	b084      	sub	sp, #16
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
    uint8_t buffer[4];
    if(lpme1_read_buffer(TEMP_0, buffer, 4) == LPME1_OK)
 800107a:	f107 030c 	add.w	r3, r7, #12
 800107e:	2204      	movs	r2, #4
 8001080:	4619      	mov	r1, r3
 8001082:	2070      	movs	r0, #112	; 0x70
 8001084:	f000 f836 	bl	80010f4 <lpme1_read_buffer>
 8001088:	4603      	mov	r3, r0
 800108a:	2b01      	cmp	r3, #1
 800108c:	d10b      	bne.n	80010a6 <lpme1_get_temp+0x34>
    {
        *temp = uint8_to_float(buffer);
 800108e:	f107 030c 	add.w	r3, r7, #12
 8001092:	4618      	mov	r0, r3
 8001094:	f000 f80c 	bl	80010b0 <uint8_to_float>
 8001098:	eef0 7a40 	vmov.f32	s15, s0
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	edc3 7a00 	vstr	s15, [r3]
        return LPME1_OK;
 80010a2:	2301      	movs	r3, #1
 80010a4:	e000      	b.n	80010a8 <lpme1_get_temp+0x36>
    }
    else
        return LPME1_ERROR;
 80010a6:	2300      	movs	r3, #0
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3710      	adds	r7, #16
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <uint8_to_float>:
  *@brief: Convert 4 uint8_t values to float value
  *@para: Pointer to uint8_t array[4];
  *@ret: float value
  */
float uint8_to_float(uint8_t *pu8vals)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b085      	sub	sp, #20
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
    DataDecoder decoder;
    for(uint8_t i = 0; i < 4; i++)
 80010b8:	2300      	movs	r3, #0
 80010ba:	73fb      	strb	r3, [r7, #15]
 80010bc:	e00c      	b.n	80010d8 <uint8_to_float+0x28>
    {
        decoder.u8vals[i] = *(pu8vals +i);
 80010be:	7bfb      	ldrb	r3, [r7, #15]
 80010c0:	687a      	ldr	r2, [r7, #4]
 80010c2:	441a      	add	r2, r3
 80010c4:	7bfb      	ldrb	r3, [r7, #15]
 80010c6:	7812      	ldrb	r2, [r2, #0]
 80010c8:	f107 0110 	add.w	r1, r7, #16
 80010cc:	440b      	add	r3, r1
 80010ce:	f803 2c08 	strb.w	r2, [r3, #-8]
    for(uint8_t i = 0; i < 4; i++)
 80010d2:	7bfb      	ldrb	r3, [r7, #15]
 80010d4:	3301      	adds	r3, #1
 80010d6:	73fb      	strb	r3, [r7, #15]
 80010d8:	7bfb      	ldrb	r3, [r7, #15]
 80010da:	2b03      	cmp	r3, #3
 80010dc:	d9ef      	bls.n	80010be <uint8_to_float+0xe>
    }
    return decoder.fval;
 80010de:	68bb      	ldr	r3, [r7, #8]
 80010e0:	ee07 3a90 	vmov	s15, r3
}
 80010e4:	eeb0 0a67 	vmov.f32	s0, s15
 80010e8:	3714      	adds	r7, #20
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
	...

080010f4 <lpme1_read_buffer>:
  *@para: buf, Pointer to uint8_t array use to save read datas
  *@para: len, data length to be read
  *@ret: Status, return LPME1_OK if read success otherwise return LPME1_ERROR
  */
lpme1_status_t lpme1_read_buffer(uint8_t regaddr,uint8_t *buf,uint8_t len)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b086      	sub	sp, #24
 80010f8:	af04      	add	r7, sp, #16
 80010fa:	4603      	mov	r3, r0
 80010fc:	6039      	str	r1, [r7, #0]
 80010fe:	71fb      	strb	r3, [r7, #7]
 8001100:	4613      	mov	r3, r2
 8001102:	71bb      	strb	r3, [r7, #6]
#ifdef USE_IIC
    if(HAL_I2C_Mem_Read(&LPME1_HI2C, LPME1_I2C_ADRRESS, regaddr,
 8001104:	79fb      	ldrb	r3, [r7, #7]
 8001106:	b299      	uxth	r1, r3
 8001108:	79bb      	ldrb	r3, [r7, #6]
 800110a:	b29b      	uxth	r3, r3
 800110c:	2264      	movs	r2, #100	; 0x64
 800110e:	9202      	str	r2, [sp, #8]
 8001110:	9301      	str	r3, [sp, #4]
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	9300      	str	r3, [sp, #0]
 8001116:	2301      	movs	r3, #1
 8001118:	460a      	mov	r2, r1
 800111a:	2164      	movs	r1, #100	; 0x64
 800111c:	4806      	ldr	r0, [pc, #24]	; (8001138 <lpme1_read_buffer+0x44>)
 800111e:	f000 fec9 	bl	8001eb4 <HAL_I2C_Mem_Read>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d101      	bne.n	800112c <lpme1_read_buffer+0x38>
                        I2C_MEMADD_SIZE_8BIT, buf, len, LPME1_MAX_TIMEOUT)==HAL_OK)
        return LPME1_OK;
 8001128:	2301      	movs	r3, #1
 800112a:	e000      	b.n	800112e <lpme1_read_buffer+0x3a>
    else
        return LPME1_ERROR;
 800112c:	2300      	movs	r3, #0
  	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
	while(i--);
	
    return LPME1_OK;
#endif
}
 800112e:	4618      	mov	r0, r3
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20000204 	.word	0x20000204

0800113c <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PUTCHAR_PROTOTYPE
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001144:	1d39      	adds	r1, r7, #4
 8001146:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800114a:	2201      	movs	r2, #1
 800114c:	4803      	ldr	r0, [pc, #12]	; (800115c <__io_putchar+0x20>)
 800114e:	f002 fcdd 	bl	8003b0c <HAL_UART_Transmit>
 return ch;
 8001152:	687b      	ldr	r3, [r7, #4]
}
 8001154:	4618      	mov	r0, r3
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	200002b8 	.word	0x200002b8

08001160 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001160:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001164:	b086      	sub	sp, #24
 8001166:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001168:	f000 fb02 	bl	8001770 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800116c:	f000 f906 	bl	800137c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001170:	f7ff fd8a 	bl	8000c88 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001174:	f000 fa5e 	bl	8001634 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001178:	f7ff fddc 	bl	8000d34 <MX_I2C1_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	if(lpme1_get_timestamp(&lpme1Data.time)==LPME1_OK) HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);	//For instant visual debug
 800117c:	486e      	ldr	r0, [pc, #440]	; (8001338 <main+0x1d8>)
 800117e:	f7ff fe5d 	bl	8000e3c <lpme1_get_timestamp>
 8001182:	4603      	mov	r3, r0
 8001184:	2b01      	cmp	r3, #1
 8001186:	d103      	bne.n	8001190 <main+0x30>
 8001188:	2108      	movs	r1, #8
 800118a:	486c      	ldr	r0, [pc, #432]	; (800133c <main+0x1dc>)
 800118c:	f000 fde8 	bl	8001d60 <HAL_GPIO_TogglePin>
	lpme1_get_acc(lpme1Data.acc);
 8001190:	486b      	ldr	r0, [pc, #428]	; (8001340 <main+0x1e0>)
 8001192:	f7ff fe72 	bl	8000e7a <lpme1_get_acc>
	lpme1_get_gyr(lpme1Data.gyr);
 8001196:	486b      	ldr	r0, [pc, #428]	; (8001344 <main+0x1e4>)
 8001198:	f7ff fe99 	bl	8000ece <lpme1_get_gyr>
	lpme1_get_mag(lpme1Data.mag);
 800119c:	486a      	ldr	r0, [pc, #424]	; (8001348 <main+0x1e8>)
 800119e:	f7ff fec0 	bl	8000f22 <lpme1_get_mag>
	lpme1_get_euler(lpme1Data.euler);
 80011a2:	486a      	ldr	r0, [pc, #424]	; (800134c <main+0x1ec>)
 80011a4:	f7ff fee7 	bl	8000f76 <lpme1_get_euler>
	lpme1_get_quat(lpme1Data.quat);
 80011a8:	4869      	ldr	r0, [pc, #420]	; (8001350 <main+0x1f0>)
 80011aa:	f7ff ff0e 	bl	8000fca <lpme1_get_quat>
	lpme1_get_linacc(lpme1Data.linAcc);
 80011ae:	4869      	ldr	r0, [pc, #420]	; (8001354 <main+0x1f4>)
 80011b0:	f7ff ff35 	bl	800101e <lpme1_get_linacc>
	lpme1_get_temp(&lpme1Data.temp);
 80011b4:	4868      	ldr	r0, [pc, #416]	; (8001358 <main+0x1f8>)
 80011b6:	f7ff ff5c 	bl	8001072 <lpme1_get_temp>

	printf("Timestamp: %.3f \r\n",lpme1Data.time);
 80011ba:	4b5f      	ldr	r3, [pc, #380]	; (8001338 <main+0x1d8>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff f9c2 	bl	8000548 <__aeabi_f2d>
 80011c4:	4603      	mov	r3, r0
 80011c6:	460c      	mov	r4, r1
 80011c8:	461a      	mov	r2, r3
 80011ca:	4623      	mov	r3, r4
 80011cc:	4863      	ldr	r0, [pc, #396]	; (800135c <main+0x1fc>)
 80011ce:	f003 fe91 	bl	8004ef4 <iprintf>
	printf("AccX: %.3f\tAccY: %.3f\tAccZ: %.3f\t \r\n",lpme1Data.acc[0],lpme1Data.acc[1],lpme1Data.acc[2]);
 80011d2:	4b59      	ldr	r3, [pc, #356]	; (8001338 <main+0x1d8>)
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff f9b6 	bl	8000548 <__aeabi_f2d>
 80011dc:	4680      	mov	r8, r0
 80011de:	4689      	mov	r9, r1
 80011e0:	4b55      	ldr	r3, [pc, #340]	; (8001338 <main+0x1d8>)
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff f9af 	bl	8000548 <__aeabi_f2d>
 80011ea:	4604      	mov	r4, r0
 80011ec:	460d      	mov	r5, r1
 80011ee:	4b52      	ldr	r3, [pc, #328]	; (8001338 <main+0x1d8>)
 80011f0:	68db      	ldr	r3, [r3, #12]
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff f9a8 	bl	8000548 <__aeabi_f2d>
 80011f8:	4602      	mov	r2, r0
 80011fa:	460b      	mov	r3, r1
 80011fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001200:	e9cd 4500 	strd	r4, r5, [sp]
 8001204:	4642      	mov	r2, r8
 8001206:	464b      	mov	r3, r9
 8001208:	4855      	ldr	r0, [pc, #340]	; (8001360 <main+0x200>)
 800120a:	f003 fe73 	bl	8004ef4 <iprintf>
	printf("GyrX: %.3f\tGyrY: %.3f\tGyrZ: %.3f\t \r\n",lpme1Data.gyr[0],lpme1Data.gyr[1],lpme1Data.gyr[2]);
 800120e:	4b4a      	ldr	r3, [pc, #296]	; (8001338 <main+0x1d8>)
 8001210:	691b      	ldr	r3, [r3, #16]
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff f998 	bl	8000548 <__aeabi_f2d>
 8001218:	4680      	mov	r8, r0
 800121a:	4689      	mov	r9, r1
 800121c:	4b46      	ldr	r3, [pc, #280]	; (8001338 <main+0x1d8>)
 800121e:	695b      	ldr	r3, [r3, #20]
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff f991 	bl	8000548 <__aeabi_f2d>
 8001226:	4604      	mov	r4, r0
 8001228:	460d      	mov	r5, r1
 800122a:	4b43      	ldr	r3, [pc, #268]	; (8001338 <main+0x1d8>)
 800122c:	699b      	ldr	r3, [r3, #24]
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff f98a 	bl	8000548 <__aeabi_f2d>
 8001234:	4602      	mov	r2, r0
 8001236:	460b      	mov	r3, r1
 8001238:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800123c:	e9cd 4500 	strd	r4, r5, [sp]
 8001240:	4642      	mov	r2, r8
 8001242:	464b      	mov	r3, r9
 8001244:	4847      	ldr	r0, [pc, #284]	; (8001364 <main+0x204>)
 8001246:	f003 fe55 	bl	8004ef4 <iprintf>
	printf("MagX: %.3f\tMagY: %.3f\tMagZ: %.3f\t \r\n",lpme1Data.mag[0],lpme1Data.mag[1],lpme1Data.mag[2]);
 800124a:	4b3b      	ldr	r3, [pc, #236]	; (8001338 <main+0x1d8>)
 800124c:	69db      	ldr	r3, [r3, #28]
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff f97a 	bl	8000548 <__aeabi_f2d>
 8001254:	4680      	mov	r8, r0
 8001256:	4689      	mov	r9, r1
 8001258:	4b37      	ldr	r3, [pc, #220]	; (8001338 <main+0x1d8>)
 800125a:	6a1b      	ldr	r3, [r3, #32]
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff f973 	bl	8000548 <__aeabi_f2d>
 8001262:	4604      	mov	r4, r0
 8001264:	460d      	mov	r5, r1
 8001266:	4b34      	ldr	r3, [pc, #208]	; (8001338 <main+0x1d8>)
 8001268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff f96c 	bl	8000548 <__aeabi_f2d>
 8001270:	4602      	mov	r2, r0
 8001272:	460b      	mov	r3, r1
 8001274:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001278:	e9cd 4500 	strd	r4, r5, [sp]
 800127c:	4642      	mov	r2, r8
 800127e:	464b      	mov	r3, r9
 8001280:	4839      	ldr	r0, [pc, #228]	; (8001368 <main+0x208>)
 8001282:	f003 fe37 	bl	8004ef4 <iprintf>
	printf("EulerX: %f\tEulerY: %f\tEulerZ: %f\t \r\n",lpme1Data.euler[0],lpme1Data.euler[1],lpme1Data.euler[2]);
 8001286:	4b2c      	ldr	r3, [pc, #176]	; (8001338 <main+0x1d8>)
 8001288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff f95c 	bl	8000548 <__aeabi_f2d>
 8001290:	4680      	mov	r8, r0
 8001292:	4689      	mov	r9, r1
 8001294:	4b28      	ldr	r3, [pc, #160]	; (8001338 <main+0x1d8>)
 8001296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff f955 	bl	8000548 <__aeabi_f2d>
 800129e:	4604      	mov	r4, r0
 80012a0:	460d      	mov	r5, r1
 80012a2:	4b25      	ldr	r3, [pc, #148]	; (8001338 <main+0x1d8>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff f94e 	bl	8000548 <__aeabi_f2d>
 80012ac:	4602      	mov	r2, r0
 80012ae:	460b      	mov	r3, r1
 80012b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80012b4:	e9cd 4500 	strd	r4, r5, [sp]
 80012b8:	4642      	mov	r2, r8
 80012ba:	464b      	mov	r3, r9
 80012bc:	482b      	ldr	r0, [pc, #172]	; (800136c <main+0x20c>)
 80012be:	f003 fe19 	bl	8004ef4 <iprintf>
	printf("QuatW: %f\tQuatX: %f\tQuatY: %f\tQuatZ: %f\t  \r\n",lpme1Data.quat[0],lpme1Data.quat[1],lpme1Data.quat[2],lpme1Data.quat[3]);
 80012c2:	4b1d      	ldr	r3, [pc, #116]	; (8001338 <main+0x1d8>)
 80012c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff f93e 	bl	8000548 <__aeabi_f2d>
 80012cc:	4682      	mov	sl, r0
 80012ce:	468b      	mov	fp, r1
 80012d0:	4b19      	ldr	r3, [pc, #100]	; (8001338 <main+0x1d8>)
 80012d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff f937 	bl	8000548 <__aeabi_f2d>
 80012da:	4604      	mov	r4, r0
 80012dc:	460d      	mov	r5, r1
 80012de:	4b16      	ldr	r3, [pc, #88]	; (8001338 <main+0x1d8>)
 80012e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff f930 	bl	8000548 <__aeabi_f2d>
 80012e8:	4680      	mov	r8, r0
 80012ea:	4689      	mov	r9, r1
 80012ec:	4b12      	ldr	r3, [pc, #72]	; (8001338 <main+0x1d8>)
 80012ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff f929 	bl	8000548 <__aeabi_f2d>
 80012f6:	4602      	mov	r2, r0
 80012f8:	460b      	mov	r3, r1
 80012fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80012fe:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001302:	e9cd 4500 	strd	r4, r5, [sp]
 8001306:	4652      	mov	r2, sl
 8001308:	465b      	mov	r3, fp
 800130a:	4819      	ldr	r0, [pc, #100]	; (8001370 <main+0x210>)
 800130c:	f003 fdf2 	bl	8004ef4 <iprintf>
	printf("Temperature: %.1f \r\n",lpme1Data.temp);
 8001310:	4b09      	ldr	r3, [pc, #36]	; (8001338 <main+0x1d8>)
 8001312:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff f917 	bl	8000548 <__aeabi_f2d>
 800131a:	4603      	mov	r3, r0
 800131c:	460c      	mov	r4, r1
 800131e:	461a      	mov	r2, r3
 8001320:	4623      	mov	r3, r4
 8001322:	4814      	ldr	r0, [pc, #80]	; (8001374 <main+0x214>)
 8001324:	f003 fde6 	bl	8004ef4 <iprintf>
	printf("\r\n");
 8001328:	4813      	ldr	r0, [pc, #76]	; (8001378 <main+0x218>)
 800132a:	f003 fe57 	bl	8004fdc <puts>
	HAL_Delay(1000);
 800132e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001332:	f000 fa83 	bl	800183c <HAL_Delay>
	if(lpme1_get_timestamp(&lpme1Data.time)==LPME1_OK) HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);	//For instant visual debug
 8001336:	e721      	b.n	800117c <main+0x1c>
 8001338:	20000250 	.word	0x20000250
 800133c:	48000400 	.word	0x48000400
 8001340:	20000254 	.word	0x20000254
 8001344:	20000260 	.word	0x20000260
 8001348:	2000026c 	.word	0x2000026c
 800134c:	20000278 	.word	0x20000278
 8001350:	20000284 	.word	0x20000284
 8001354:	20000294 	.word	0x20000294
 8001358:	200002a0 	.word	0x200002a0
 800135c:	080086f8 	.word	0x080086f8
 8001360:	0800870c 	.word	0x0800870c
 8001364:	08008734 	.word	0x08008734
 8001368:	0800875c 	.word	0x0800875c
 800136c:	08008784 	.word	0x08008784
 8001370:	080087ac 	.word	0x080087ac
 8001374:	080087dc 	.word	0x080087dc
 8001378:	080087f4 	.word	0x080087f4

0800137c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b096      	sub	sp, #88	; 0x58
 8001380:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001382:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001386:	2228      	movs	r2, #40	; 0x28
 8001388:	2100      	movs	r1, #0
 800138a:	4618      	mov	r0, r3
 800138c:	f002 ff6b 	bl	8004266 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001390:	f107 031c 	add.w	r3, r7, #28
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	605a      	str	r2, [r3, #4]
 800139a:	609a      	str	r2, [r3, #8]
 800139c:	60da      	str	r2, [r3, #12]
 800139e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013a0:	1d3b      	adds	r3, r7, #4
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	605a      	str	r2, [r3, #4]
 80013a8:	609a      	str	r2, [r3, #8]
 80013aa:	60da      	str	r2, [r3, #12]
 80013ac:	611a      	str	r2, [r3, #16]
 80013ae:	615a      	str	r2, [r3, #20]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013b0:	2302      	movs	r3, #2
 80013b2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013b4:	2301      	movs	r3, #1
 80013b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013b8:	2310      	movs	r3, #16
 80013ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80013bc:	2300      	movs	r3, #0
 80013be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013c4:	4618      	mov	r0, r3
 80013c6:	f001 f8ef 	bl	80025a8 <HAL_RCC_OscConfig>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80013d0:	f000 f826 	bl	8001420 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013d4:	230f      	movs	r3, #15
 80013d6:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80013d8:	2300      	movs	r3, #0
 80013da:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013dc:	2300      	movs	r3, #0
 80013de:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013e0:	2300      	movs	r3, #0
 80013e2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013e4:	2300      	movs	r3, #0
 80013e6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80013e8:	f107 031c 	add.w	r3, r7, #28
 80013ec:	2100      	movs	r1, #0
 80013ee:	4618      	mov	r0, r3
 80013f0:	f001 ffe2 	bl	80033b8 <HAL_RCC_ClockConfig>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <SystemClock_Config+0x82>
  {
    Error_Handler();
 80013fa:	f000 f811 	bl	8001420 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80013fe:	2320      	movs	r3, #32
 8001400:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001402:	2300      	movs	r3, #0
 8001404:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001406:	1d3b      	adds	r3, r7, #4
 8001408:	4618      	mov	r0, r3
 800140a:	f002 fa0b 	bl	8003824 <HAL_RCCEx_PeriphCLKConfig>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001414:	f000 f804 	bl	8001420 <Error_Handler>
  }
}
 8001418:	bf00      	nop
 800141a:	3758      	adds	r7, #88	; 0x58
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}

08001420 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001424:	bf00      	nop
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
	...

08001430 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001436:	4b0f      	ldr	r3, [pc, #60]	; (8001474 <HAL_MspInit+0x44>)
 8001438:	699b      	ldr	r3, [r3, #24]
 800143a:	4a0e      	ldr	r2, [pc, #56]	; (8001474 <HAL_MspInit+0x44>)
 800143c:	f043 0301 	orr.w	r3, r3, #1
 8001440:	6193      	str	r3, [r2, #24]
 8001442:	4b0c      	ldr	r3, [pc, #48]	; (8001474 <HAL_MspInit+0x44>)
 8001444:	699b      	ldr	r3, [r3, #24]
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	607b      	str	r3, [r7, #4]
 800144c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800144e:	4b09      	ldr	r3, [pc, #36]	; (8001474 <HAL_MspInit+0x44>)
 8001450:	69db      	ldr	r3, [r3, #28]
 8001452:	4a08      	ldr	r2, [pc, #32]	; (8001474 <HAL_MspInit+0x44>)
 8001454:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001458:	61d3      	str	r3, [r2, #28]
 800145a:	4b06      	ldr	r3, [pc, #24]	; (8001474 <HAL_MspInit+0x44>)
 800145c:	69db      	ldr	r3, [r3, #28]
 800145e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001462:	603b      	str	r3, [r7, #0]
 8001464:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001466:	bf00      	nop
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	40021000 	.word	0x40021000

08001478 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800147c:	bf00      	nop
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr

08001486 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001486:	b480      	push	{r7}
 8001488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800148a:	e7fe      	b.n	800148a <HardFault_Handler+0x4>

0800148c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001490:	e7fe      	b.n	8001490 <MemManage_Handler+0x4>

08001492 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001492:	b480      	push	{r7}
 8001494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001496:	e7fe      	b.n	8001496 <BusFault_Handler+0x4>

08001498 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800149c:	e7fe      	b.n	800149c <UsageFault_Handler+0x4>

0800149e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800149e:	b480      	push	{r7}
 80014a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014a2:	bf00      	nop
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014b0:	bf00      	nop
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr

080014ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014ba:	b480      	push	{r7}
 80014bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014be:	bf00      	nop
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr

080014c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014cc:	f000 f996 	bl	80017fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014d0:	bf00      	nop
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b086      	sub	sp, #24
 80014d8:	af00      	add	r7, sp, #0
 80014da:	60f8      	str	r0, [r7, #12]
 80014dc:	60b9      	str	r1, [r7, #8]
 80014de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014e0:	2300      	movs	r3, #0
 80014e2:	617b      	str	r3, [r7, #20]
 80014e4:	e00a      	b.n	80014fc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80014e6:	f3af 8000 	nop.w
 80014ea:	4601      	mov	r1, r0
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	1c5a      	adds	r2, r3, #1
 80014f0:	60ba      	str	r2, [r7, #8]
 80014f2:	b2ca      	uxtb	r2, r1
 80014f4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	3301      	adds	r3, #1
 80014fa:	617b      	str	r3, [r7, #20]
 80014fc:	697a      	ldr	r2, [r7, #20]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	429a      	cmp	r2, r3
 8001502:	dbf0      	blt.n	80014e6 <_read+0x12>
	}

return len;
 8001504:	687b      	ldr	r3, [r7, #4]
}
 8001506:	4618      	mov	r0, r3
 8001508:	3718      	adds	r7, #24
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800150e:	b580      	push	{r7, lr}
 8001510:	b086      	sub	sp, #24
 8001512:	af00      	add	r7, sp, #0
 8001514:	60f8      	str	r0, [r7, #12]
 8001516:	60b9      	str	r1, [r7, #8]
 8001518:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800151a:	2300      	movs	r3, #0
 800151c:	617b      	str	r3, [r7, #20]
 800151e:	e009      	b.n	8001534 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	1c5a      	adds	r2, r3, #1
 8001524:	60ba      	str	r2, [r7, #8]
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff fe07 	bl	800113c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	3301      	adds	r3, #1
 8001532:	617b      	str	r3, [r7, #20]
 8001534:	697a      	ldr	r2, [r7, #20]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	429a      	cmp	r2, r3
 800153a:	dbf1      	blt.n	8001520 <_write+0x12>
	}
	return len;
 800153c:	687b      	ldr	r3, [r7, #4]
}
 800153e:	4618      	mov	r0, r3
 8001540:	3718      	adds	r7, #24
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <_close>:

int _close(int file)
{
 8001546:	b480      	push	{r7}
 8001548:	b083      	sub	sp, #12
 800154a:	af00      	add	r7, sp, #0
 800154c:	6078      	str	r0, [r7, #4]
	return -1;
 800154e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001552:	4618      	mov	r0, r3
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr

0800155e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800155e:	b480      	push	{r7}
 8001560:	b083      	sub	sp, #12
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
 8001566:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800156e:	605a      	str	r2, [r3, #4]
	return 0;
 8001570:	2300      	movs	r3, #0
}
 8001572:	4618      	mov	r0, r3
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr

0800157e <_isatty>:

int _isatty(int file)
{
 800157e:	b480      	push	{r7}
 8001580:	b083      	sub	sp, #12
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
	return 1;
 8001586:	2301      	movs	r3, #1
}
 8001588:	4618      	mov	r0, r3
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr

08001594 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001594:	b480      	push	{r7}
 8001596:	b085      	sub	sp, #20
 8001598:	af00      	add	r7, sp, #0
 800159a:	60f8      	str	r0, [r7, #12]
 800159c:	60b9      	str	r1, [r7, #8]
 800159e:	607a      	str	r2, [r7, #4]
	return 0;
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3714      	adds	r7, #20
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
	...

080015b0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80015b8:	4b11      	ldr	r3, [pc, #68]	; (8001600 <_sbrk+0x50>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d102      	bne.n	80015c6 <_sbrk+0x16>
		heap_end = &end;
 80015c0:	4b0f      	ldr	r3, [pc, #60]	; (8001600 <_sbrk+0x50>)
 80015c2:	4a10      	ldr	r2, [pc, #64]	; (8001604 <_sbrk+0x54>)
 80015c4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80015c6:	4b0e      	ldr	r3, [pc, #56]	; (8001600 <_sbrk+0x50>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80015cc:	4b0c      	ldr	r3, [pc, #48]	; (8001600 <_sbrk+0x50>)
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	4413      	add	r3, r2
 80015d4:	466a      	mov	r2, sp
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d907      	bls.n	80015ea <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80015da:	f002 fe0f 	bl	80041fc <__errno>
 80015de:	4602      	mov	r2, r0
 80015e0:	230c      	movs	r3, #12
 80015e2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80015e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015e8:	e006      	b.n	80015f8 <_sbrk+0x48>
	}

	heap_end += incr;
 80015ea:	4b05      	ldr	r3, [pc, #20]	; (8001600 <_sbrk+0x50>)
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4413      	add	r3, r2
 80015f2:	4a03      	ldr	r2, [pc, #12]	; (8001600 <_sbrk+0x50>)
 80015f4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80015f6:	68fb      	ldr	r3, [r7, #12]
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3710      	adds	r7, #16
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	200001f8 	.word	0x200001f8
 8001604:	20000340 	.word	0x20000340

08001608 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800160c:	4b08      	ldr	r3, [pc, #32]	; (8001630 <SystemInit+0x28>)
 800160e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001612:	4a07      	ldr	r2, [pc, #28]	; (8001630 <SystemInit+0x28>)
 8001614:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001618:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800161c:	4b04      	ldr	r3, [pc, #16]	; (8001630 <SystemInit+0x28>)
 800161e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001622:	609a      	str	r2, [r3, #8]
#endif
}
 8001624:	bf00      	nop
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	e000ed00 	.word	0xe000ed00

08001634 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001638:	4b14      	ldr	r3, [pc, #80]	; (800168c <MX_USART2_UART_Init+0x58>)
 800163a:	4a15      	ldr	r2, [pc, #84]	; (8001690 <MX_USART2_UART_Init+0x5c>)
 800163c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800163e:	4b13      	ldr	r3, [pc, #76]	; (800168c <MX_USART2_UART_Init+0x58>)
 8001640:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001644:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001646:	4b11      	ldr	r3, [pc, #68]	; (800168c <MX_USART2_UART_Init+0x58>)
 8001648:	2200      	movs	r2, #0
 800164a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800164c:	4b0f      	ldr	r3, [pc, #60]	; (800168c <MX_USART2_UART_Init+0x58>)
 800164e:	2200      	movs	r2, #0
 8001650:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001652:	4b0e      	ldr	r3, [pc, #56]	; (800168c <MX_USART2_UART_Init+0x58>)
 8001654:	2200      	movs	r2, #0
 8001656:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001658:	4b0c      	ldr	r3, [pc, #48]	; (800168c <MX_USART2_UART_Init+0x58>)
 800165a:	220c      	movs	r2, #12
 800165c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800165e:	4b0b      	ldr	r3, [pc, #44]	; (800168c <MX_USART2_UART_Init+0x58>)
 8001660:	2200      	movs	r2, #0
 8001662:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001664:	4b09      	ldr	r3, [pc, #36]	; (800168c <MX_USART2_UART_Init+0x58>)
 8001666:	2200      	movs	r2, #0
 8001668:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800166a:	4b08      	ldr	r3, [pc, #32]	; (800168c <MX_USART2_UART_Init+0x58>)
 800166c:	2200      	movs	r2, #0
 800166e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001670:	4b06      	ldr	r3, [pc, #24]	; (800168c <MX_USART2_UART_Init+0x58>)
 8001672:	2200      	movs	r2, #0
 8001674:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001676:	4805      	ldr	r0, [pc, #20]	; (800168c <MX_USART2_UART_Init+0x58>)
 8001678:	f002 f9fa 	bl	8003a70 <HAL_UART_Init>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001682:	f7ff fecd 	bl	8001420 <Error_Handler>
  }

}
 8001686:	bf00      	nop
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	200002b8 	.word	0x200002b8
 8001690:	40004400 	.word	0x40004400

08001694 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b08a      	sub	sp, #40	; 0x28
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800169c:	f107 0314 	add.w	r3, r7, #20
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	605a      	str	r2, [r3, #4]
 80016a6:	609a      	str	r2, [r3, #8]
 80016a8:	60da      	str	r2, [r3, #12]
 80016aa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a18      	ldr	r2, [pc, #96]	; (8001714 <HAL_UART_MspInit+0x80>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d129      	bne.n	800170a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016b6:	4b18      	ldr	r3, [pc, #96]	; (8001718 <HAL_UART_MspInit+0x84>)
 80016b8:	69db      	ldr	r3, [r3, #28]
 80016ba:	4a17      	ldr	r2, [pc, #92]	; (8001718 <HAL_UART_MspInit+0x84>)
 80016bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016c0:	61d3      	str	r3, [r2, #28]
 80016c2:	4b15      	ldr	r3, [pc, #84]	; (8001718 <HAL_UART_MspInit+0x84>)
 80016c4:	69db      	ldr	r3, [r3, #28]
 80016c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ca:	613b      	str	r3, [r7, #16]
 80016cc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ce:	4b12      	ldr	r3, [pc, #72]	; (8001718 <HAL_UART_MspInit+0x84>)
 80016d0:	695b      	ldr	r3, [r3, #20]
 80016d2:	4a11      	ldr	r2, [pc, #68]	; (8001718 <HAL_UART_MspInit+0x84>)
 80016d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016d8:	6153      	str	r3, [r2, #20]
 80016da:	4b0f      	ldr	r3, [pc, #60]	; (8001718 <HAL_UART_MspInit+0x84>)
 80016dc:	695b      	ldr	r3, [r3, #20]
 80016de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e2:	60fb      	str	r3, [r7, #12]
 80016e4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80016e6:	f248 0304 	movw	r3, #32772	; 0x8004
 80016ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ec:	2302      	movs	r3, #2
 80016ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f0:	2300      	movs	r3, #0
 80016f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016f4:	2303      	movs	r3, #3
 80016f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016f8:	2307      	movs	r3, #7
 80016fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016fc:	f107 0314 	add.w	r3, r7, #20
 8001700:	4619      	mov	r1, r3
 8001702:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001706:	f000 f9a1 	bl	8001a4c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800170a:	bf00      	nop
 800170c:	3728      	adds	r7, #40	; 0x28
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	40004400 	.word	0x40004400
 8001718:	40021000 	.word	0x40021000

0800171c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800171c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001754 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001720:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001722:	e003      	b.n	800172c <LoopCopyDataInit>

08001724 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001724:	4b0c      	ldr	r3, [pc, #48]	; (8001758 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001726:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001728:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800172a:	3104      	adds	r1, #4

0800172c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800172c:	480b      	ldr	r0, [pc, #44]	; (800175c <LoopForever+0xa>)
	ldr	r3, =_edata
 800172e:	4b0c      	ldr	r3, [pc, #48]	; (8001760 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001730:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001732:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001734:	d3f6      	bcc.n	8001724 <CopyDataInit>
	ldr	r2, =_sbss
 8001736:	4a0b      	ldr	r2, [pc, #44]	; (8001764 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001738:	e002      	b.n	8001740 <LoopFillZerobss>

0800173a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800173a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800173c:	f842 3b04 	str.w	r3, [r2], #4

08001740 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001740:	4b09      	ldr	r3, [pc, #36]	; (8001768 <LoopForever+0x16>)
	cmp	r2, r3
 8001742:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001744:	d3f9      	bcc.n	800173a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001746:	f7ff ff5f 	bl	8001608 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800174a:	f002 fd5d 	bl	8004208 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800174e:	f7ff fd07 	bl	8001160 <main>

08001752 <LoopForever>:

LoopForever:
    b LoopForever
 8001752:	e7fe      	b.n	8001752 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001754:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8001758:	08008b58 	.word	0x08008b58
	ldr	r0, =_sdata
 800175c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001760:	200001dc 	.word	0x200001dc
	ldr	r2, =_sbss
 8001764:	200001dc 	.word	0x200001dc
	ldr	r3, = _ebss
 8001768:	20000340 	.word	0x20000340

0800176c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800176c:	e7fe      	b.n	800176c <ADC1_2_IRQHandler>
	...

08001770 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001774:	4b08      	ldr	r3, [pc, #32]	; (8001798 <HAL_Init+0x28>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a07      	ldr	r2, [pc, #28]	; (8001798 <HAL_Init+0x28>)
 800177a:	f043 0310 	orr.w	r3, r3, #16
 800177e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001780:	2003      	movs	r0, #3
 8001782:	f000 f92f 	bl	80019e4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001786:	2000      	movs	r0, #0
 8001788:	f000 f808 	bl	800179c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800178c:	f7ff fe50 	bl	8001430 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001790:	2300      	movs	r3, #0
}
 8001792:	4618      	mov	r0, r3
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	40022000 	.word	0x40022000

0800179c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017a4:	4b12      	ldr	r3, [pc, #72]	; (80017f0 <HAL_InitTick+0x54>)
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	4b12      	ldr	r3, [pc, #72]	; (80017f4 <HAL_InitTick+0x58>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	4619      	mov	r1, r3
 80017ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80017b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ba:	4618      	mov	r0, r3
 80017bc:	f000 f939 	bl	8001a32 <HAL_SYSTICK_Config>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e00e      	b.n	80017e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2b0f      	cmp	r3, #15
 80017ce:	d80a      	bhi.n	80017e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017d0:	2200      	movs	r2, #0
 80017d2:	6879      	ldr	r1, [r7, #4]
 80017d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017d8:	f000 f90f 	bl	80019fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017dc:	4a06      	ldr	r2, [pc, #24]	; (80017f8 <HAL_InitTick+0x5c>)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80017e2:	2300      	movs	r3, #0
 80017e4:	e000      	b.n	80017e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3708      	adds	r7, #8
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	20000000 	.word	0x20000000
 80017f4:	20000008 	.word	0x20000008
 80017f8:	20000004 	.word	0x20000004

080017fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001800:	4b06      	ldr	r3, [pc, #24]	; (800181c <HAL_IncTick+0x20>)
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	461a      	mov	r2, r3
 8001806:	4b06      	ldr	r3, [pc, #24]	; (8001820 <HAL_IncTick+0x24>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4413      	add	r3, r2
 800180c:	4a04      	ldr	r2, [pc, #16]	; (8001820 <HAL_IncTick+0x24>)
 800180e:	6013      	str	r3, [r2, #0]
}
 8001810:	bf00      	nop
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	20000008 	.word	0x20000008
 8001820:	20000338 	.word	0x20000338

08001824 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  return uwTick;  
 8001828:	4b03      	ldr	r3, [pc, #12]	; (8001838 <HAL_GetTick+0x14>)
 800182a:	681b      	ldr	r3, [r3, #0]
}
 800182c:	4618      	mov	r0, r3
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	20000338 	.word	0x20000338

0800183c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001844:	f7ff ffee 	bl	8001824 <HAL_GetTick>
 8001848:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001854:	d005      	beq.n	8001862 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001856:	4b09      	ldr	r3, [pc, #36]	; (800187c <HAL_Delay+0x40>)
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	461a      	mov	r2, r3
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	4413      	add	r3, r2
 8001860:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001862:	bf00      	nop
 8001864:	f7ff ffde 	bl	8001824 <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	68fa      	ldr	r2, [r7, #12]
 8001870:	429a      	cmp	r2, r3
 8001872:	d8f7      	bhi.n	8001864 <HAL_Delay+0x28>
  {
  }
}
 8001874:	bf00      	nop
 8001876:	3710      	adds	r7, #16
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	20000008 	.word	0x20000008

08001880 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001880:	b480      	push	{r7}
 8001882:	b085      	sub	sp, #20
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001890:	4b0c      	ldr	r3, [pc, #48]	; (80018c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001896:	68ba      	ldr	r2, [r7, #8]
 8001898:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800189c:	4013      	ands	r3, r2
 800189e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018b2:	4a04      	ldr	r2, [pc, #16]	; (80018c4 <__NVIC_SetPriorityGrouping+0x44>)
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	60d3      	str	r3, [r2, #12]
}
 80018b8:	bf00      	nop
 80018ba:	3714      	adds	r7, #20
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr
 80018c4:	e000ed00 	.word	0xe000ed00

080018c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018cc:	4b04      	ldr	r3, [pc, #16]	; (80018e0 <__NVIC_GetPriorityGrouping+0x18>)
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	0a1b      	lsrs	r3, r3, #8
 80018d2:	f003 0307 	and.w	r3, r3, #7
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr
 80018e0:	e000ed00 	.word	0xe000ed00

080018e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	4603      	mov	r3, r0
 80018ec:	6039      	str	r1, [r7, #0]
 80018ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	db0a      	blt.n	800190e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	b2da      	uxtb	r2, r3
 80018fc:	490c      	ldr	r1, [pc, #48]	; (8001930 <__NVIC_SetPriority+0x4c>)
 80018fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001902:	0112      	lsls	r2, r2, #4
 8001904:	b2d2      	uxtb	r2, r2
 8001906:	440b      	add	r3, r1
 8001908:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800190c:	e00a      	b.n	8001924 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	b2da      	uxtb	r2, r3
 8001912:	4908      	ldr	r1, [pc, #32]	; (8001934 <__NVIC_SetPriority+0x50>)
 8001914:	79fb      	ldrb	r3, [r7, #7]
 8001916:	f003 030f 	and.w	r3, r3, #15
 800191a:	3b04      	subs	r3, #4
 800191c:	0112      	lsls	r2, r2, #4
 800191e:	b2d2      	uxtb	r2, r2
 8001920:	440b      	add	r3, r1
 8001922:	761a      	strb	r2, [r3, #24]
}
 8001924:	bf00      	nop
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr
 8001930:	e000e100 	.word	0xe000e100
 8001934:	e000ed00 	.word	0xe000ed00

08001938 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001938:	b480      	push	{r7}
 800193a:	b089      	sub	sp, #36	; 0x24
 800193c:	af00      	add	r7, sp, #0
 800193e:	60f8      	str	r0, [r7, #12]
 8001940:	60b9      	str	r1, [r7, #8]
 8001942:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	f003 0307 	and.w	r3, r3, #7
 800194a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	f1c3 0307 	rsb	r3, r3, #7
 8001952:	2b04      	cmp	r3, #4
 8001954:	bf28      	it	cs
 8001956:	2304      	movcs	r3, #4
 8001958:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	3304      	adds	r3, #4
 800195e:	2b06      	cmp	r3, #6
 8001960:	d902      	bls.n	8001968 <NVIC_EncodePriority+0x30>
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	3b03      	subs	r3, #3
 8001966:	e000      	b.n	800196a <NVIC_EncodePriority+0x32>
 8001968:	2300      	movs	r3, #0
 800196a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800196c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001970:	69bb      	ldr	r3, [r7, #24]
 8001972:	fa02 f303 	lsl.w	r3, r2, r3
 8001976:	43da      	mvns	r2, r3
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	401a      	ands	r2, r3
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001980:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	fa01 f303 	lsl.w	r3, r1, r3
 800198a:	43d9      	mvns	r1, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001990:	4313      	orrs	r3, r2
         );
}
 8001992:	4618      	mov	r0, r3
 8001994:	3724      	adds	r7, #36	; 0x24
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
	...

080019a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	3b01      	subs	r3, #1
 80019ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019b0:	d301      	bcc.n	80019b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019b2:	2301      	movs	r3, #1
 80019b4:	e00f      	b.n	80019d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019b6:	4a0a      	ldr	r2, [pc, #40]	; (80019e0 <SysTick_Config+0x40>)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	3b01      	subs	r3, #1
 80019bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019be:	210f      	movs	r1, #15
 80019c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019c4:	f7ff ff8e 	bl	80018e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019c8:	4b05      	ldr	r3, [pc, #20]	; (80019e0 <SysTick_Config+0x40>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ce:	4b04      	ldr	r3, [pc, #16]	; (80019e0 <SysTick_Config+0x40>)
 80019d0:	2207      	movs	r2, #7
 80019d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	e000e010 	.word	0xe000e010

080019e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f7ff ff47 	bl	8001880 <__NVIC_SetPriorityGrouping>
}
 80019f2:	bf00      	nop
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b086      	sub	sp, #24
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	4603      	mov	r3, r0
 8001a02:	60b9      	str	r1, [r7, #8]
 8001a04:	607a      	str	r2, [r7, #4]
 8001a06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a0c:	f7ff ff5c 	bl	80018c8 <__NVIC_GetPriorityGrouping>
 8001a10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	68b9      	ldr	r1, [r7, #8]
 8001a16:	6978      	ldr	r0, [r7, #20]
 8001a18:	f7ff ff8e 	bl	8001938 <NVIC_EncodePriority>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a22:	4611      	mov	r1, r2
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff ff5d 	bl	80018e4 <__NVIC_SetPriority>
}
 8001a2a:	bf00      	nop
 8001a2c:	3718      	adds	r7, #24
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b082      	sub	sp, #8
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f7ff ffb0 	bl	80019a0 <SysTick_Config>
 8001a40:	4603      	mov	r3, r0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
	...

08001a4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b087      	sub	sp, #28
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a56:	2300      	movs	r3, #0
 8001a58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a5a:	e14e      	b.n	8001cfa <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	2101      	movs	r1, #1
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	fa01 f303 	lsl.w	r3, r1, r3
 8001a68:	4013      	ands	r3, r2
 8001a6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	f000 8140 	beq.w	8001cf4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d003      	beq.n	8001a84 <HAL_GPIO_Init+0x38>
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	2b12      	cmp	r3, #18
 8001a82:	d123      	bne.n	8001acc <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	08da      	lsrs	r2, r3, #3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	3208      	adds	r2, #8
 8001a8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a90:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	f003 0307 	and.w	r3, r3, #7
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	220f      	movs	r2, #15
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	43db      	mvns	r3, r3
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	691a      	ldr	r2, [r3, #16]
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	f003 0307 	and.w	r3, r3, #7
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	693a      	ldr	r2, [r7, #16]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	08da      	lsrs	r2, r3, #3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	3208      	adds	r2, #8
 8001ac6:	6939      	ldr	r1, [r7, #16]
 8001ac8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	2203      	movs	r2, #3
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	43db      	mvns	r3, r3
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f003 0203 	and.w	r2, r3, #3
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	693a      	ldr	r2, [r7, #16]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	693a      	ldr	r2, [r7, #16]
 8001afe:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d00b      	beq.n	8001b20 <HAL_GPIO_Init+0xd4>
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d007      	beq.n	8001b20 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b14:	2b11      	cmp	r3, #17
 8001b16:	d003      	beq.n	8001b20 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	2b12      	cmp	r3, #18
 8001b1e:	d130      	bne.n	8001b82 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	2203      	movs	r2, #3
 8001b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b30:	43db      	mvns	r3, r3
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	4013      	ands	r3, r2
 8001b36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	68da      	ldr	r2, [r3, #12]
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	005b      	lsls	r3, r3, #1
 8001b40:	fa02 f303 	lsl.w	r3, r2, r3
 8001b44:	693a      	ldr	r2, [r7, #16]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	693a      	ldr	r2, [r7, #16]
 8001b4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b56:	2201      	movs	r2, #1
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5e:	43db      	mvns	r3, r3
 8001b60:	693a      	ldr	r2, [r7, #16]
 8001b62:	4013      	ands	r3, r2
 8001b64:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	091b      	lsrs	r3, r3, #4
 8001b6c:	f003 0201 	and.w	r2, r3, #1
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	fa02 f303 	lsl.w	r3, r2, r3
 8001b76:	693a      	ldr	r2, [r7, #16]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	68db      	ldr	r3, [r3, #12]
 8001b86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	005b      	lsls	r3, r3, #1
 8001b8c:	2203      	movs	r2, #3
 8001b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b92:	43db      	mvns	r3, r3
 8001b94:	693a      	ldr	r2, [r7, #16]
 8001b96:	4013      	ands	r3, r2
 8001b98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	689a      	ldr	r2, [r3, #8]
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba6:	693a      	ldr	r2, [r7, #16]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	f000 809a 	beq.w	8001cf4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bc0:	4b55      	ldr	r3, [pc, #340]	; (8001d18 <HAL_GPIO_Init+0x2cc>)
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	4a54      	ldr	r2, [pc, #336]	; (8001d18 <HAL_GPIO_Init+0x2cc>)
 8001bc6:	f043 0301 	orr.w	r3, r3, #1
 8001bca:	6193      	str	r3, [r2, #24]
 8001bcc:	4b52      	ldr	r3, [pc, #328]	; (8001d18 <HAL_GPIO_Init+0x2cc>)
 8001bce:	699b      	ldr	r3, [r3, #24]
 8001bd0:	f003 0301 	and.w	r3, r3, #1
 8001bd4:	60bb      	str	r3, [r7, #8]
 8001bd6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001bd8:	4a50      	ldr	r2, [pc, #320]	; (8001d1c <HAL_GPIO_Init+0x2d0>)
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	089b      	lsrs	r3, r3, #2
 8001bde:	3302      	adds	r3, #2
 8001be0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001be4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	f003 0303 	and.w	r3, r3, #3
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	220f      	movs	r2, #15
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	693a      	ldr	r2, [r7, #16]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c02:	d013      	beq.n	8001c2c <HAL_GPIO_Init+0x1e0>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	4a46      	ldr	r2, [pc, #280]	; (8001d20 <HAL_GPIO_Init+0x2d4>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d00d      	beq.n	8001c28 <HAL_GPIO_Init+0x1dc>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	4a45      	ldr	r2, [pc, #276]	; (8001d24 <HAL_GPIO_Init+0x2d8>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d007      	beq.n	8001c24 <HAL_GPIO_Init+0x1d8>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	4a44      	ldr	r2, [pc, #272]	; (8001d28 <HAL_GPIO_Init+0x2dc>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d101      	bne.n	8001c20 <HAL_GPIO_Init+0x1d4>
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e006      	b.n	8001c2e <HAL_GPIO_Init+0x1e2>
 8001c20:	2305      	movs	r3, #5
 8001c22:	e004      	b.n	8001c2e <HAL_GPIO_Init+0x1e2>
 8001c24:	2302      	movs	r3, #2
 8001c26:	e002      	b.n	8001c2e <HAL_GPIO_Init+0x1e2>
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e000      	b.n	8001c2e <HAL_GPIO_Init+0x1e2>
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	697a      	ldr	r2, [r7, #20]
 8001c30:	f002 0203 	and.w	r2, r2, #3
 8001c34:	0092      	lsls	r2, r2, #2
 8001c36:	4093      	lsls	r3, r2
 8001c38:	693a      	ldr	r2, [r7, #16]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c3e:	4937      	ldr	r1, [pc, #220]	; (8001d1c <HAL_GPIO_Init+0x2d0>)
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	089b      	lsrs	r3, r3, #2
 8001c44:	3302      	adds	r3, #2
 8001c46:	693a      	ldr	r2, [r7, #16]
 8001c48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c4c:	4b37      	ldr	r3, [pc, #220]	; (8001d2c <HAL_GPIO_Init+0x2e0>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	43db      	mvns	r3, r3
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d003      	beq.n	8001c70 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001c68:	693a      	ldr	r2, [r7, #16]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001c70:	4a2e      	ldr	r2, [pc, #184]	; (8001d2c <HAL_GPIO_Init+0x2e0>)
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c76:	4b2d      	ldr	r3, [pc, #180]	; (8001d2c <HAL_GPIO_Init+0x2e0>)
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	43db      	mvns	r3, r3
 8001c80:	693a      	ldr	r2, [r7, #16]
 8001c82:	4013      	ands	r3, r2
 8001c84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d003      	beq.n	8001c9a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001c92:	693a      	ldr	r2, [r7, #16]
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001c9a:	4a24      	ldr	r2, [pc, #144]	; (8001d2c <HAL_GPIO_Init+0x2e0>)
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ca0:	4b22      	ldr	r3, [pc, #136]	; (8001d2c <HAL_GPIO_Init+0x2e0>)
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	43db      	mvns	r3, r3
 8001caa:	693a      	ldr	r2, [r7, #16]
 8001cac:	4013      	ands	r3, r2
 8001cae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d003      	beq.n	8001cc4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001cbc:	693a      	ldr	r2, [r7, #16]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001cc4:	4a19      	ldr	r2, [pc, #100]	; (8001d2c <HAL_GPIO_Init+0x2e0>)
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cca:	4b18      	ldr	r3, [pc, #96]	; (8001d2c <HAL_GPIO_Init+0x2e0>)
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	43db      	mvns	r3, r3
 8001cd4:	693a      	ldr	r2, [r7, #16]
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d003      	beq.n	8001cee <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001ce6:	693a      	ldr	r2, [r7, #16]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001cee:	4a0f      	ldr	r2, [pc, #60]	; (8001d2c <HAL_GPIO_Init+0x2e0>)
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	fa22 f303 	lsr.w	r3, r2, r3
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	f47f aea9 	bne.w	8001a5c <HAL_GPIO_Init+0x10>
  }
}
 8001d0a:	bf00      	nop
 8001d0c:	371c      	adds	r7, #28
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	40021000 	.word	0x40021000
 8001d1c:	40010000 	.word	0x40010000
 8001d20:	48000400 	.word	0x48000400
 8001d24:	48000800 	.word	0x48000800
 8001d28:	48000c00 	.word	0x48000c00
 8001d2c:	40010400 	.word	0x40010400

08001d30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	460b      	mov	r3, r1
 8001d3a:	807b      	strh	r3, [r7, #2]
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d40:	787b      	ldrb	r3, [r7, #1]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d003      	beq.n	8001d4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d46:	887a      	ldrh	r2, [r7, #2]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d4c:	e002      	b.n	8001d54 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d4e:	887a      	ldrh	r2, [r7, #2]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d54:	bf00      	nop
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	460b      	mov	r3, r1
 8001d6a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	695a      	ldr	r2, [r3, #20]
 8001d70:	887b      	ldrh	r3, [r7, #2]
 8001d72:	4013      	ands	r3, r2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d004      	beq.n	8001d82 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001d78:	887b      	ldrh	r3, [r7, #2]
 8001d7a:	041a      	lsls	r2, r3, #16
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001d80:	e002      	b.n	8001d88 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d82:	887a      	ldrh	r2, [r7, #2]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	619a      	str	r2, [r3, #24]
}
 8001d88:	bf00      	nop
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d101      	bne.n	8001da6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e081      	b.n	8001eaa <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d106      	bne.n	8001dc0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f7fe fffa 	bl	8000db4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2224      	movs	r2, #36	; 0x24
 8001dc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f022 0201 	bic.w	r2, r2, #1
 8001dd6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685a      	ldr	r2, [r3, #4]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001de4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	689a      	ldr	r2, [r3, #8]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001df4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d107      	bne.n	8001e0e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	689a      	ldr	r2, [r3, #8]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e0a:	609a      	str	r2, [r3, #8]
 8001e0c:	e006      	b.n	8001e1c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	689a      	ldr	r2, [r3, #8]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001e1a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d104      	bne.n	8001e2e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e2c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	6812      	ldr	r2, [r2, #0]
 8001e38:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e40:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	68da      	ldr	r2, [r3, #12]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e50:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	691a      	ldr	r2, [r3, #16]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	695b      	ldr	r3, [r3, #20]
 8001e5a:	ea42 0103 	orr.w	r1, r2, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	699b      	ldr	r3, [r3, #24]
 8001e62:	021a      	lsls	r2, r3, #8
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	430a      	orrs	r2, r1
 8001e6a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	69d9      	ldr	r1, [r3, #28]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a1a      	ldr	r2, [r3, #32]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f042 0201 	orr.w	r2, r2, #1
 8001e8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2220      	movs	r2, #32
 8001e96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
	...

08001eb4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b088      	sub	sp, #32
 8001eb8:	af02      	add	r7, sp, #8
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	4608      	mov	r0, r1
 8001ebe:	4611      	mov	r1, r2
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	817b      	strh	r3, [r7, #10]
 8001ec6:	460b      	mov	r3, r1
 8001ec8:	813b      	strh	r3, [r7, #8]
 8001eca:	4613      	mov	r3, r2
 8001ecc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	2b20      	cmp	r3, #32
 8001ed8:	f040 80fd 	bne.w	80020d6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001edc:	6a3b      	ldr	r3, [r7, #32]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d002      	beq.n	8001ee8 <HAL_I2C_Mem_Read+0x34>
 8001ee2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d105      	bne.n	8001ef4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001eee:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e0f1      	b.n	80020d8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d101      	bne.n	8001f02 <HAL_I2C_Mem_Read+0x4e>
 8001efe:	2302      	movs	r3, #2
 8001f00:	e0ea      	b.n	80020d8 <HAL_I2C_Mem_Read+0x224>
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2201      	movs	r2, #1
 8001f06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001f0a:	f7ff fc8b 	bl	8001824 <HAL_GetTick>
 8001f0e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	9300      	str	r3, [sp, #0]
 8001f14:	2319      	movs	r3, #25
 8001f16:	2201      	movs	r2, #1
 8001f18:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f1c:	68f8      	ldr	r0, [r7, #12]
 8001f1e:	f000 f95b 	bl	80021d8 <I2C_WaitOnFlagUntilTimeout>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d001      	beq.n	8001f2c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e0d5      	b.n	80020d8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2222      	movs	r2, #34	; 0x22
 8001f30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2240      	movs	r2, #64	; 0x40
 8001f38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	6a3a      	ldr	r2, [r7, #32]
 8001f46:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001f4c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2200      	movs	r2, #0
 8001f52:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f54:	88f8      	ldrh	r0, [r7, #6]
 8001f56:	893a      	ldrh	r2, [r7, #8]
 8001f58:	8979      	ldrh	r1, [r7, #10]
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	9301      	str	r3, [sp, #4]
 8001f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f60:	9300      	str	r3, [sp, #0]
 8001f62:	4603      	mov	r3, r0
 8001f64:	68f8      	ldr	r0, [r7, #12]
 8001f66:	f000 f8bf 	bl	80020e8 <I2C_RequestMemoryRead>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d005      	beq.n	8001f7c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2200      	movs	r2, #0
 8001f74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e0ad      	b.n	80020d8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	2bff      	cmp	r3, #255	; 0xff
 8001f84:	d90e      	bls.n	8001fa4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	22ff      	movs	r2, #255	; 0xff
 8001f8a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f90:	b2da      	uxtb	r2, r3
 8001f92:	8979      	ldrh	r1, [r7, #10]
 8001f94:	4b52      	ldr	r3, [pc, #328]	; (80020e0 <HAL_I2C_Mem_Read+0x22c>)
 8001f96:	9300      	str	r3, [sp, #0]
 8001f98:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f9c:	68f8      	ldr	r0, [r7, #12]
 8001f9e:	f000 fa3d 	bl	800241c <I2C_TransferConfig>
 8001fa2:	e00f      	b.n	8001fc4 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fa8:	b29a      	uxth	r2, r3
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fb2:	b2da      	uxtb	r2, r3
 8001fb4:	8979      	ldrh	r1, [r7, #10]
 8001fb6:	4b4a      	ldr	r3, [pc, #296]	; (80020e0 <HAL_I2C_Mem_Read+0x22c>)
 8001fb8:	9300      	str	r3, [sp, #0]
 8001fba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fbe:	68f8      	ldr	r0, [r7, #12]
 8001fc0:	f000 fa2c 	bl	800241c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	9300      	str	r3, [sp, #0]
 8001fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fca:	2200      	movs	r2, #0
 8001fcc:	2104      	movs	r1, #4
 8001fce:	68f8      	ldr	r0, [r7, #12]
 8001fd0:	f000 f902 	bl	80021d8 <I2C_WaitOnFlagUntilTimeout>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e07c      	b.n	80020d8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe8:	b2d2      	uxtb	r2, r2
 8001fea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff0:	1c5a      	adds	r2, r3, #1
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	b29a      	uxth	r2, r3
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002006:	b29b      	uxth	r3, r3
 8002008:	3b01      	subs	r3, #1
 800200a:	b29a      	uxth	r2, r3
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002014:	b29b      	uxth	r3, r3
 8002016:	2b00      	cmp	r3, #0
 8002018:	d034      	beq.n	8002084 <HAL_I2C_Mem_Read+0x1d0>
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800201e:	2b00      	cmp	r3, #0
 8002020:	d130      	bne.n	8002084 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	9300      	str	r3, [sp, #0]
 8002026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002028:	2200      	movs	r2, #0
 800202a:	2180      	movs	r1, #128	; 0x80
 800202c:	68f8      	ldr	r0, [r7, #12]
 800202e:	f000 f8d3 	bl	80021d8 <I2C_WaitOnFlagUntilTimeout>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e04d      	b.n	80020d8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002040:	b29b      	uxth	r3, r3
 8002042:	2bff      	cmp	r3, #255	; 0xff
 8002044:	d90e      	bls.n	8002064 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	22ff      	movs	r2, #255	; 0xff
 800204a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002050:	b2da      	uxtb	r2, r3
 8002052:	8979      	ldrh	r1, [r7, #10]
 8002054:	2300      	movs	r3, #0
 8002056:	9300      	str	r3, [sp, #0]
 8002058:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800205c:	68f8      	ldr	r0, [r7, #12]
 800205e:	f000 f9dd 	bl	800241c <I2C_TransferConfig>
 8002062:	e00f      	b.n	8002084 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002068:	b29a      	uxth	r2, r3
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002072:	b2da      	uxtb	r2, r3
 8002074:	8979      	ldrh	r1, [r7, #10]
 8002076:	2300      	movs	r3, #0
 8002078:	9300      	str	r3, [sp, #0]
 800207a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800207e:	68f8      	ldr	r0, [r7, #12]
 8002080:	f000 f9cc 	bl	800241c <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002088:	b29b      	uxth	r3, r3
 800208a:	2b00      	cmp	r3, #0
 800208c:	d19a      	bne.n	8001fc4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800208e:	697a      	ldr	r2, [r7, #20]
 8002090:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002092:	68f8      	ldr	r0, [r7, #12]
 8002094:	f000 f920 	bl	80022d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e01a      	b.n	80020d8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2220      	movs	r2, #32
 80020a8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	6859      	ldr	r1, [r3, #4]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	4b0b      	ldr	r3, [pc, #44]	; (80020e4 <HAL_I2C_Mem_Read+0x230>)
 80020b6:	400b      	ands	r3, r1
 80020b8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2220      	movs	r2, #32
 80020be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2200      	movs	r2, #0
 80020c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2200      	movs	r2, #0
 80020ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80020d2:	2300      	movs	r3, #0
 80020d4:	e000      	b.n	80020d8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80020d6:	2302      	movs	r3, #2
  }
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3718      	adds	r7, #24
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	80002400 	.word	0x80002400
 80020e4:	fe00e800 	.word	0xfe00e800

080020e8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b086      	sub	sp, #24
 80020ec:	af02      	add	r7, sp, #8
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	4608      	mov	r0, r1
 80020f2:	4611      	mov	r1, r2
 80020f4:	461a      	mov	r2, r3
 80020f6:	4603      	mov	r3, r0
 80020f8:	817b      	strh	r3, [r7, #10]
 80020fa:	460b      	mov	r3, r1
 80020fc:	813b      	strh	r3, [r7, #8]
 80020fe:	4613      	mov	r3, r2
 8002100:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002102:	88fb      	ldrh	r3, [r7, #6]
 8002104:	b2da      	uxtb	r2, r3
 8002106:	8979      	ldrh	r1, [r7, #10]
 8002108:	4b20      	ldr	r3, [pc, #128]	; (800218c <I2C_RequestMemoryRead+0xa4>)
 800210a:	9300      	str	r3, [sp, #0]
 800210c:	2300      	movs	r3, #0
 800210e:	68f8      	ldr	r0, [r7, #12]
 8002110:	f000 f984 	bl	800241c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002114:	69fa      	ldr	r2, [r7, #28]
 8002116:	69b9      	ldr	r1, [r7, #24]
 8002118:	68f8      	ldr	r0, [r7, #12]
 800211a:	f000 f89d 	bl	8002258 <I2C_WaitOnTXISFlagUntilTimeout>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e02c      	b.n	8002182 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002128:	88fb      	ldrh	r3, [r7, #6]
 800212a:	2b01      	cmp	r3, #1
 800212c:	d105      	bne.n	800213a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800212e:	893b      	ldrh	r3, [r7, #8]
 8002130:	b2da      	uxtb	r2, r3
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	629a      	str	r2, [r3, #40]	; 0x28
 8002138:	e015      	b.n	8002166 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800213a:	893b      	ldrh	r3, [r7, #8]
 800213c:	0a1b      	lsrs	r3, r3, #8
 800213e:	b29b      	uxth	r3, r3
 8002140:	b2da      	uxtb	r2, r3
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002148:	69fa      	ldr	r2, [r7, #28]
 800214a:	69b9      	ldr	r1, [r7, #24]
 800214c:	68f8      	ldr	r0, [r7, #12]
 800214e:	f000 f883 	bl	8002258 <I2C_WaitOnTXISFlagUntilTimeout>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e012      	b.n	8002182 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800215c:	893b      	ldrh	r3, [r7, #8]
 800215e:	b2da      	uxtb	r2, r3
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	9300      	str	r3, [sp, #0]
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	2200      	movs	r2, #0
 800216e:	2140      	movs	r1, #64	; 0x40
 8002170:	68f8      	ldr	r0, [r7, #12]
 8002172:	f000 f831 	bl	80021d8 <I2C_WaitOnFlagUntilTimeout>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e000      	b.n	8002182 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3710      	adds	r7, #16
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	80002000 	.word	0x80002000

08002190 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	699b      	ldr	r3, [r3, #24]
 800219e:	f003 0302 	and.w	r3, r3, #2
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d103      	bne.n	80021ae <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	2200      	movs	r2, #0
 80021ac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	699b      	ldr	r3, [r3, #24]
 80021b4:	f003 0301 	and.w	r3, r3, #1
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d007      	beq.n	80021cc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	699a      	ldr	r2, [r3, #24]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f042 0201 	orr.w	r2, r2, #1
 80021ca:	619a      	str	r2, [r3, #24]
  }
}
 80021cc:	bf00      	nop
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
 80021de:	60f8      	str	r0, [r7, #12]
 80021e0:	60b9      	str	r1, [r7, #8]
 80021e2:	603b      	str	r3, [r7, #0]
 80021e4:	4613      	mov	r3, r2
 80021e6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021e8:	e022      	b.n	8002230 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021f0:	d01e      	beq.n	8002230 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021f2:	f7ff fb17 	bl	8001824 <HAL_GetTick>
 80021f6:	4602      	mov	r2, r0
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	683a      	ldr	r2, [r7, #0]
 80021fe:	429a      	cmp	r2, r3
 8002200:	d302      	bcc.n	8002208 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d113      	bne.n	8002230 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800220c:	f043 0220 	orr.w	r2, r3, #32
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2220      	movs	r2, #32
 8002218:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2200      	movs	r2, #0
 8002220:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2200      	movs	r2, #0
 8002228:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e00f      	b.n	8002250 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	699a      	ldr	r2, [r3, #24]
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	4013      	ands	r3, r2
 800223a:	68ba      	ldr	r2, [r7, #8]
 800223c:	429a      	cmp	r2, r3
 800223e:	bf0c      	ite	eq
 8002240:	2301      	moveq	r3, #1
 8002242:	2300      	movne	r3, #0
 8002244:	b2db      	uxtb	r3, r3
 8002246:	461a      	mov	r2, r3
 8002248:	79fb      	ldrb	r3, [r7, #7]
 800224a:	429a      	cmp	r2, r3
 800224c:	d0cd      	beq.n	80021ea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800224e:	2300      	movs	r3, #0
}
 8002250:	4618      	mov	r0, r3
 8002252:	3710      	adds	r7, #16
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}

08002258 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	60b9      	str	r1, [r7, #8]
 8002262:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002264:	e02c      	b.n	80022c0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	68b9      	ldr	r1, [r7, #8]
 800226a:	68f8      	ldr	r0, [r7, #12]
 800226c:	f000 f870 	bl	8002350 <I2C_IsAcknowledgeFailed>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e02a      	b.n	80022d0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002280:	d01e      	beq.n	80022c0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002282:	f7ff facf 	bl	8001824 <HAL_GetTick>
 8002286:	4602      	mov	r2, r0
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	68ba      	ldr	r2, [r7, #8]
 800228e:	429a      	cmp	r2, r3
 8002290:	d302      	bcc.n	8002298 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d113      	bne.n	80022c0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800229c:	f043 0220 	orr.w	r2, r3, #32
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2220      	movs	r2, #32
 80022a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2200      	movs	r2, #0
 80022b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2200      	movs	r2, #0
 80022b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e007      	b.n	80022d0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	699b      	ldr	r3, [r3, #24]
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d1cb      	bne.n	8002266 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80022ce:	2300      	movs	r3, #0
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3710      	adds	r7, #16
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022e4:	e028      	b.n	8002338 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	68b9      	ldr	r1, [r7, #8]
 80022ea:	68f8      	ldr	r0, [r7, #12]
 80022ec:	f000 f830 	bl	8002350 <I2C_IsAcknowledgeFailed>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e026      	b.n	8002348 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022fa:	f7ff fa93 	bl	8001824 <HAL_GetTick>
 80022fe:	4602      	mov	r2, r0
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	68ba      	ldr	r2, [r7, #8]
 8002306:	429a      	cmp	r2, r3
 8002308:	d302      	bcc.n	8002310 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d113      	bne.n	8002338 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002314:	f043 0220 	orr.w	r2, r3, #32
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2220      	movs	r2, #32
 8002320:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2200      	movs	r2, #0
 8002328:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2200      	movs	r2, #0
 8002330:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e007      	b.n	8002348 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	699b      	ldr	r3, [r3, #24]
 800233e:	f003 0320 	and.w	r3, r3, #32
 8002342:	2b20      	cmp	r3, #32
 8002344:	d1cf      	bne.n	80022e6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002346:	2300      	movs	r3, #0
}
 8002348:	4618      	mov	r0, r3
 800234a:	3710      	adds	r7, #16
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}

08002350 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	699b      	ldr	r3, [r3, #24]
 8002362:	f003 0310 	and.w	r3, r3, #16
 8002366:	2b10      	cmp	r3, #16
 8002368:	d151      	bne.n	800240e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800236a:	e022      	b.n	80023b2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002372:	d01e      	beq.n	80023b2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002374:	f7ff fa56 	bl	8001824 <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	68ba      	ldr	r2, [r7, #8]
 8002380:	429a      	cmp	r2, r3
 8002382:	d302      	bcc.n	800238a <I2C_IsAcknowledgeFailed+0x3a>
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d113      	bne.n	80023b2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800238e:	f043 0220 	orr.w	r2, r3, #32
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2220      	movs	r2, #32
 800239a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2200      	movs	r2, #0
 80023a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2200      	movs	r2, #0
 80023aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e02e      	b.n	8002410 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	699b      	ldr	r3, [r3, #24]
 80023b8:	f003 0320 	and.w	r3, r3, #32
 80023bc:	2b20      	cmp	r3, #32
 80023be:	d1d5      	bne.n	800236c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2210      	movs	r2, #16
 80023c6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2220      	movs	r2, #32
 80023ce:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80023d0:	68f8      	ldr	r0, [r7, #12]
 80023d2:	f7ff fedd 	bl	8002190 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	6859      	ldr	r1, [r3, #4]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	4b0d      	ldr	r3, [pc, #52]	; (8002418 <I2C_IsAcknowledgeFailed+0xc8>)
 80023e2:	400b      	ands	r3, r1
 80023e4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ea:	f043 0204 	orr.w	r2, r3, #4
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2220      	movs	r2, #32
 80023f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2200      	movs	r2, #0
 80023fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2200      	movs	r2, #0
 8002406:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e000      	b.n	8002410 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800240e:	2300      	movs	r3, #0
}
 8002410:	4618      	mov	r0, r3
 8002412:	3710      	adds	r7, #16
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	fe00e800 	.word	0xfe00e800

0800241c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800241c:	b480      	push	{r7}
 800241e:	b085      	sub	sp, #20
 8002420:	af00      	add	r7, sp, #0
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	607b      	str	r3, [r7, #4]
 8002426:	460b      	mov	r3, r1
 8002428:	817b      	strh	r3, [r7, #10]
 800242a:	4613      	mov	r3, r2
 800242c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	685a      	ldr	r2, [r3, #4]
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	0d5b      	lsrs	r3, r3, #21
 8002438:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800243c:	4b0d      	ldr	r3, [pc, #52]	; (8002474 <I2C_TransferConfig+0x58>)
 800243e:	430b      	orrs	r3, r1
 8002440:	43db      	mvns	r3, r3
 8002442:	ea02 0103 	and.w	r1, r2, r3
 8002446:	897b      	ldrh	r3, [r7, #10]
 8002448:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800244c:	7a7b      	ldrb	r3, [r7, #9]
 800244e:	041b      	lsls	r3, r3, #16
 8002450:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002454:	431a      	orrs	r2, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	431a      	orrs	r2, r3
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	431a      	orrs	r2, r3
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	430a      	orrs	r2, r1
 8002464:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002466:	bf00      	nop
 8002468:	3714      	adds	r7, #20
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	03ff63ff 	.word	0x03ff63ff

08002478 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002488:	b2db      	uxtb	r3, r3
 800248a:	2b20      	cmp	r3, #32
 800248c:	d138      	bne.n	8002500 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002494:	2b01      	cmp	r3, #1
 8002496:	d101      	bne.n	800249c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002498:	2302      	movs	r3, #2
 800249a:	e032      	b.n	8002502 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2224      	movs	r2, #36	; 0x24
 80024a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f022 0201 	bic.w	r2, r2, #1
 80024ba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80024ca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	6819      	ldr	r1, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	683a      	ldr	r2, [r7, #0]
 80024d8:	430a      	orrs	r2, r1
 80024da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f042 0201 	orr.w	r2, r2, #1
 80024ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2220      	movs	r2, #32
 80024f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80024fc:	2300      	movs	r3, #0
 80024fe:	e000      	b.n	8002502 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002500:	2302      	movs	r3, #2
  }
}
 8002502:	4618      	mov	r0, r3
 8002504:	370c      	adds	r7, #12
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr

0800250e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800250e:	b480      	push	{r7}
 8002510:	b085      	sub	sp, #20
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
 8002516:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800251e:	b2db      	uxtb	r3, r3
 8002520:	2b20      	cmp	r3, #32
 8002522:	d139      	bne.n	8002598 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800252a:	2b01      	cmp	r3, #1
 800252c:	d101      	bne.n	8002532 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800252e:	2302      	movs	r3, #2
 8002530:	e033      	b.n	800259a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2201      	movs	r2, #1
 8002536:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2224      	movs	r2, #36	; 0x24
 800253e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f022 0201 	bic.w	r2, r2, #1
 8002550:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002560:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	021b      	lsls	r3, r3, #8
 8002566:	68fa      	ldr	r2, [r7, #12]
 8002568:	4313      	orrs	r3, r2
 800256a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	68fa      	ldr	r2, [r7, #12]
 8002572:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f042 0201 	orr.w	r2, r2, #1
 8002582:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2220      	movs	r2, #32
 8002588:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2200      	movs	r2, #0
 8002590:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002594:	2300      	movs	r3, #0
 8002596:	e000      	b.n	800259a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002598:	2302      	movs	r3, #2
  }
}
 800259a:	4618      	mov	r0, r3
 800259c:	3714      	adds	r7, #20
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
	...

080025a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	1d3b      	adds	r3, r7, #4
 80025b2:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025b4:	1d3b      	adds	r3, r7, #4
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d102      	bne.n	80025c2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	f000 bef4 	b.w	80033aa <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025c2:	1d3b      	adds	r3, r7, #4
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0301 	and.w	r3, r3, #1
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	f000 816a 	beq.w	80028a6 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80025d2:	4bb3      	ldr	r3, [pc, #716]	; (80028a0 <HAL_RCC_OscConfig+0x2f8>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f003 030c 	and.w	r3, r3, #12
 80025da:	2b04      	cmp	r3, #4
 80025dc:	d00c      	beq.n	80025f8 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80025de:	4bb0      	ldr	r3, [pc, #704]	; (80028a0 <HAL_RCC_OscConfig+0x2f8>)
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f003 030c 	and.w	r3, r3, #12
 80025e6:	2b08      	cmp	r3, #8
 80025e8:	d159      	bne.n	800269e <HAL_RCC_OscConfig+0xf6>
 80025ea:	4bad      	ldr	r3, [pc, #692]	; (80028a0 <HAL_RCC_OscConfig+0x2f8>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025f6:	d152      	bne.n	800269e <HAL_RCC_OscConfig+0xf6>
 80025f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025fc:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002600:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002604:	fa93 f3a3 	rbit	r3, r3
 8002608:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800260c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002610:	fab3 f383 	clz	r3, r3
 8002614:	b2db      	uxtb	r3, r3
 8002616:	095b      	lsrs	r3, r3, #5
 8002618:	b2db      	uxtb	r3, r3
 800261a:	f043 0301 	orr.w	r3, r3, #1
 800261e:	b2db      	uxtb	r3, r3
 8002620:	2b01      	cmp	r3, #1
 8002622:	d102      	bne.n	800262a <HAL_RCC_OscConfig+0x82>
 8002624:	4b9e      	ldr	r3, [pc, #632]	; (80028a0 <HAL_RCC_OscConfig+0x2f8>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	e015      	b.n	8002656 <HAL_RCC_OscConfig+0xae>
 800262a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800262e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002632:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002636:	fa93 f3a3 	rbit	r3, r3
 800263a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800263e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002642:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002646:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800264a:	fa93 f3a3 	rbit	r3, r3
 800264e:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002652:	4b93      	ldr	r3, [pc, #588]	; (80028a0 <HAL_RCC_OscConfig+0x2f8>)
 8002654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002656:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800265a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800265e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002662:	fa92 f2a2 	rbit	r2, r2
 8002666:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800266a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800266e:	fab2 f282 	clz	r2, r2
 8002672:	b2d2      	uxtb	r2, r2
 8002674:	f042 0220 	orr.w	r2, r2, #32
 8002678:	b2d2      	uxtb	r2, r2
 800267a:	f002 021f 	and.w	r2, r2, #31
 800267e:	2101      	movs	r1, #1
 8002680:	fa01 f202 	lsl.w	r2, r1, r2
 8002684:	4013      	ands	r3, r2
 8002686:	2b00      	cmp	r3, #0
 8002688:	f000 810c 	beq.w	80028a4 <HAL_RCC_OscConfig+0x2fc>
 800268c:	1d3b      	adds	r3, r7, #4
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	2b00      	cmp	r3, #0
 8002694:	f040 8106 	bne.w	80028a4 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	f000 be86 	b.w	80033aa <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800269e:	1d3b      	adds	r3, r7, #4
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026a8:	d106      	bne.n	80026b8 <HAL_RCC_OscConfig+0x110>
 80026aa:	4b7d      	ldr	r3, [pc, #500]	; (80028a0 <HAL_RCC_OscConfig+0x2f8>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a7c      	ldr	r2, [pc, #496]	; (80028a0 <HAL_RCC_OscConfig+0x2f8>)
 80026b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026b4:	6013      	str	r3, [r2, #0]
 80026b6:	e030      	b.n	800271a <HAL_RCC_OscConfig+0x172>
 80026b8:	1d3b      	adds	r3, r7, #4
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d10c      	bne.n	80026dc <HAL_RCC_OscConfig+0x134>
 80026c2:	4b77      	ldr	r3, [pc, #476]	; (80028a0 <HAL_RCC_OscConfig+0x2f8>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a76      	ldr	r2, [pc, #472]	; (80028a0 <HAL_RCC_OscConfig+0x2f8>)
 80026c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026cc:	6013      	str	r3, [r2, #0]
 80026ce:	4b74      	ldr	r3, [pc, #464]	; (80028a0 <HAL_RCC_OscConfig+0x2f8>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a73      	ldr	r2, [pc, #460]	; (80028a0 <HAL_RCC_OscConfig+0x2f8>)
 80026d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026d8:	6013      	str	r3, [r2, #0]
 80026da:	e01e      	b.n	800271a <HAL_RCC_OscConfig+0x172>
 80026dc:	1d3b      	adds	r3, r7, #4
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026e6:	d10c      	bne.n	8002702 <HAL_RCC_OscConfig+0x15a>
 80026e8:	4b6d      	ldr	r3, [pc, #436]	; (80028a0 <HAL_RCC_OscConfig+0x2f8>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a6c      	ldr	r2, [pc, #432]	; (80028a0 <HAL_RCC_OscConfig+0x2f8>)
 80026ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026f2:	6013      	str	r3, [r2, #0]
 80026f4:	4b6a      	ldr	r3, [pc, #424]	; (80028a0 <HAL_RCC_OscConfig+0x2f8>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a69      	ldr	r2, [pc, #420]	; (80028a0 <HAL_RCC_OscConfig+0x2f8>)
 80026fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026fe:	6013      	str	r3, [r2, #0]
 8002700:	e00b      	b.n	800271a <HAL_RCC_OscConfig+0x172>
 8002702:	4b67      	ldr	r3, [pc, #412]	; (80028a0 <HAL_RCC_OscConfig+0x2f8>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a66      	ldr	r2, [pc, #408]	; (80028a0 <HAL_RCC_OscConfig+0x2f8>)
 8002708:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800270c:	6013      	str	r3, [r2, #0]
 800270e:	4b64      	ldr	r3, [pc, #400]	; (80028a0 <HAL_RCC_OscConfig+0x2f8>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a63      	ldr	r2, [pc, #396]	; (80028a0 <HAL_RCC_OscConfig+0x2f8>)
 8002714:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002718:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800271a:	4b61      	ldr	r3, [pc, #388]	; (80028a0 <HAL_RCC_OscConfig+0x2f8>)
 800271c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800271e:	f023 020f 	bic.w	r2, r3, #15
 8002722:	1d3b      	adds	r3, r7, #4
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	495d      	ldr	r1, [pc, #372]	; (80028a0 <HAL_RCC_OscConfig+0x2f8>)
 800272a:	4313      	orrs	r3, r2
 800272c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800272e:	1d3b      	adds	r3, r7, #4
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d059      	beq.n	80027ec <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002738:	f7ff f874 	bl	8001824 <HAL_GetTick>
 800273c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002740:	e00a      	b.n	8002758 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002742:	f7ff f86f 	bl	8001824 <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	2b64      	cmp	r3, #100	; 0x64
 8002750:	d902      	bls.n	8002758 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	f000 be29 	b.w	80033aa <HAL_RCC_OscConfig+0xe02>
 8002758:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800275c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002760:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002764:	fa93 f3a3 	rbit	r3, r3
 8002768:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800276c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002770:	fab3 f383 	clz	r3, r3
 8002774:	b2db      	uxtb	r3, r3
 8002776:	095b      	lsrs	r3, r3, #5
 8002778:	b2db      	uxtb	r3, r3
 800277a:	f043 0301 	orr.w	r3, r3, #1
 800277e:	b2db      	uxtb	r3, r3
 8002780:	2b01      	cmp	r3, #1
 8002782:	d102      	bne.n	800278a <HAL_RCC_OscConfig+0x1e2>
 8002784:	4b46      	ldr	r3, [pc, #280]	; (80028a0 <HAL_RCC_OscConfig+0x2f8>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	e015      	b.n	80027b6 <HAL_RCC_OscConfig+0x20e>
 800278a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800278e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002792:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002796:	fa93 f3a3 	rbit	r3, r3
 800279a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800279e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027a2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80027a6:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80027aa:	fa93 f3a3 	rbit	r3, r3
 80027ae:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80027b2:	4b3b      	ldr	r3, [pc, #236]	; (80028a0 <HAL_RCC_OscConfig+0x2f8>)
 80027b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80027ba:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80027be:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80027c2:	fa92 f2a2 	rbit	r2, r2
 80027c6:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80027ca:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80027ce:	fab2 f282 	clz	r2, r2
 80027d2:	b2d2      	uxtb	r2, r2
 80027d4:	f042 0220 	orr.w	r2, r2, #32
 80027d8:	b2d2      	uxtb	r2, r2
 80027da:	f002 021f 	and.w	r2, r2, #31
 80027de:	2101      	movs	r1, #1
 80027e0:	fa01 f202 	lsl.w	r2, r1, r2
 80027e4:	4013      	ands	r3, r2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d0ab      	beq.n	8002742 <HAL_RCC_OscConfig+0x19a>
 80027ea:	e05c      	b.n	80028a6 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ec:	f7ff f81a 	bl	8001824 <HAL_GetTick>
 80027f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027f4:	e00a      	b.n	800280c <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027f6:	f7ff f815 	bl	8001824 <HAL_GetTick>
 80027fa:	4602      	mov	r2, r0
 80027fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	2b64      	cmp	r3, #100	; 0x64
 8002804:	d902      	bls.n	800280c <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	f000 bdcf 	b.w	80033aa <HAL_RCC_OscConfig+0xe02>
 800280c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002810:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002814:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002818:	fa93 f3a3 	rbit	r3, r3
 800281c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002820:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002824:	fab3 f383 	clz	r3, r3
 8002828:	b2db      	uxtb	r3, r3
 800282a:	095b      	lsrs	r3, r3, #5
 800282c:	b2db      	uxtb	r3, r3
 800282e:	f043 0301 	orr.w	r3, r3, #1
 8002832:	b2db      	uxtb	r3, r3
 8002834:	2b01      	cmp	r3, #1
 8002836:	d102      	bne.n	800283e <HAL_RCC_OscConfig+0x296>
 8002838:	4b19      	ldr	r3, [pc, #100]	; (80028a0 <HAL_RCC_OscConfig+0x2f8>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	e015      	b.n	800286a <HAL_RCC_OscConfig+0x2c2>
 800283e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002842:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002846:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800284a:	fa93 f3a3 	rbit	r3, r3
 800284e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002852:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002856:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800285a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800285e:	fa93 f3a3 	rbit	r3, r3
 8002862:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002866:	4b0e      	ldr	r3, [pc, #56]	; (80028a0 <HAL_RCC_OscConfig+0x2f8>)
 8002868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800286e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002872:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002876:	fa92 f2a2 	rbit	r2, r2
 800287a:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800287e:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002882:	fab2 f282 	clz	r2, r2
 8002886:	b2d2      	uxtb	r2, r2
 8002888:	f042 0220 	orr.w	r2, r2, #32
 800288c:	b2d2      	uxtb	r2, r2
 800288e:	f002 021f 	and.w	r2, r2, #31
 8002892:	2101      	movs	r1, #1
 8002894:	fa01 f202 	lsl.w	r2, r1, r2
 8002898:	4013      	ands	r3, r2
 800289a:	2b00      	cmp	r3, #0
 800289c:	d1ab      	bne.n	80027f6 <HAL_RCC_OscConfig+0x24e>
 800289e:	e002      	b.n	80028a6 <HAL_RCC_OscConfig+0x2fe>
 80028a0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028a6:	1d3b      	adds	r3, r7, #4
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0302 	and.w	r3, r3, #2
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	f000 816f 	beq.w	8002b94 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80028b6:	4bd0      	ldr	r3, [pc, #832]	; (8002bf8 <HAL_RCC_OscConfig+0x650>)
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f003 030c 	and.w	r3, r3, #12
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d00b      	beq.n	80028da <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80028c2:	4bcd      	ldr	r3, [pc, #820]	; (8002bf8 <HAL_RCC_OscConfig+0x650>)
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f003 030c 	and.w	r3, r3, #12
 80028ca:	2b08      	cmp	r3, #8
 80028cc:	d16c      	bne.n	80029a8 <HAL_RCC_OscConfig+0x400>
 80028ce:	4bca      	ldr	r3, [pc, #808]	; (8002bf8 <HAL_RCC_OscConfig+0x650>)
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d166      	bne.n	80029a8 <HAL_RCC_OscConfig+0x400>
 80028da:	2302      	movs	r3, #2
 80028dc:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80028e4:	fa93 f3a3 	rbit	r3, r3
 80028e8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80028ec:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028f0:	fab3 f383 	clz	r3, r3
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	095b      	lsrs	r3, r3, #5
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	f043 0301 	orr.w	r3, r3, #1
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	2b01      	cmp	r3, #1
 8002902:	d102      	bne.n	800290a <HAL_RCC_OscConfig+0x362>
 8002904:	4bbc      	ldr	r3, [pc, #752]	; (8002bf8 <HAL_RCC_OscConfig+0x650>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	e013      	b.n	8002932 <HAL_RCC_OscConfig+0x38a>
 800290a:	2302      	movs	r3, #2
 800290c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002910:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002914:	fa93 f3a3 	rbit	r3, r3
 8002918:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800291c:	2302      	movs	r3, #2
 800291e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002922:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002926:	fa93 f3a3 	rbit	r3, r3
 800292a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800292e:	4bb2      	ldr	r3, [pc, #712]	; (8002bf8 <HAL_RCC_OscConfig+0x650>)
 8002930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002932:	2202      	movs	r2, #2
 8002934:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002938:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800293c:	fa92 f2a2 	rbit	r2, r2
 8002940:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002944:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002948:	fab2 f282 	clz	r2, r2
 800294c:	b2d2      	uxtb	r2, r2
 800294e:	f042 0220 	orr.w	r2, r2, #32
 8002952:	b2d2      	uxtb	r2, r2
 8002954:	f002 021f 	and.w	r2, r2, #31
 8002958:	2101      	movs	r1, #1
 800295a:	fa01 f202 	lsl.w	r2, r1, r2
 800295e:	4013      	ands	r3, r2
 8002960:	2b00      	cmp	r3, #0
 8002962:	d007      	beq.n	8002974 <HAL_RCC_OscConfig+0x3cc>
 8002964:	1d3b      	adds	r3, r7, #4
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	2b01      	cmp	r3, #1
 800296c:	d002      	beq.n	8002974 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	f000 bd1b 	b.w	80033aa <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002974:	4ba0      	ldr	r3, [pc, #640]	; (8002bf8 <HAL_RCC_OscConfig+0x650>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800297c:	1d3b      	adds	r3, r7, #4
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	695b      	ldr	r3, [r3, #20]
 8002982:	21f8      	movs	r1, #248	; 0xf8
 8002984:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002988:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800298c:	fa91 f1a1 	rbit	r1, r1
 8002990:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002994:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002998:	fab1 f181 	clz	r1, r1
 800299c:	b2c9      	uxtb	r1, r1
 800299e:	408b      	lsls	r3, r1
 80029a0:	4995      	ldr	r1, [pc, #596]	; (8002bf8 <HAL_RCC_OscConfig+0x650>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029a6:	e0f5      	b.n	8002b94 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029a8:	1d3b      	adds	r3, r7, #4
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	691b      	ldr	r3, [r3, #16]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	f000 8085 	beq.w	8002abe <HAL_RCC_OscConfig+0x516>
 80029b4:	2301      	movs	r3, #1
 80029b6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ba:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80029be:	fa93 f3a3 	rbit	r3, r3
 80029c2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80029c6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029ca:	fab3 f383 	clz	r3, r3
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80029d4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	461a      	mov	r2, r3
 80029dc:	2301      	movs	r3, #1
 80029de:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e0:	f7fe ff20 	bl	8001824 <HAL_GetTick>
 80029e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029e8:	e00a      	b.n	8002a00 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029ea:	f7fe ff1b 	bl	8001824 <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d902      	bls.n	8002a00 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	f000 bcd5 	b.w	80033aa <HAL_RCC_OscConfig+0xe02>
 8002a00:	2302      	movs	r3, #2
 8002a02:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a06:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002a0a:	fa93 f3a3 	rbit	r3, r3
 8002a0e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002a12:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a16:	fab3 f383 	clz	r3, r3
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	095b      	lsrs	r3, r3, #5
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	f043 0301 	orr.w	r3, r3, #1
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d102      	bne.n	8002a30 <HAL_RCC_OscConfig+0x488>
 8002a2a:	4b73      	ldr	r3, [pc, #460]	; (8002bf8 <HAL_RCC_OscConfig+0x650>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	e013      	b.n	8002a58 <HAL_RCC_OscConfig+0x4b0>
 8002a30:	2302      	movs	r3, #2
 8002a32:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a36:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002a3a:	fa93 f3a3 	rbit	r3, r3
 8002a3e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002a42:	2302      	movs	r3, #2
 8002a44:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002a48:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002a4c:	fa93 f3a3 	rbit	r3, r3
 8002a50:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002a54:	4b68      	ldr	r3, [pc, #416]	; (8002bf8 <HAL_RCC_OscConfig+0x650>)
 8002a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a58:	2202      	movs	r2, #2
 8002a5a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002a5e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002a62:	fa92 f2a2 	rbit	r2, r2
 8002a66:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002a6a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002a6e:	fab2 f282 	clz	r2, r2
 8002a72:	b2d2      	uxtb	r2, r2
 8002a74:	f042 0220 	orr.w	r2, r2, #32
 8002a78:	b2d2      	uxtb	r2, r2
 8002a7a:	f002 021f 	and.w	r2, r2, #31
 8002a7e:	2101      	movs	r1, #1
 8002a80:	fa01 f202 	lsl.w	r2, r1, r2
 8002a84:	4013      	ands	r3, r2
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d0af      	beq.n	80029ea <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a8a:	4b5b      	ldr	r3, [pc, #364]	; (8002bf8 <HAL_RCC_OscConfig+0x650>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a92:	1d3b      	adds	r3, r7, #4
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	695b      	ldr	r3, [r3, #20]
 8002a98:	21f8      	movs	r1, #248	; 0xf8
 8002a9a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a9e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002aa2:	fa91 f1a1 	rbit	r1, r1
 8002aa6:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002aaa:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002aae:	fab1 f181 	clz	r1, r1
 8002ab2:	b2c9      	uxtb	r1, r1
 8002ab4:	408b      	lsls	r3, r1
 8002ab6:	4950      	ldr	r1, [pc, #320]	; (8002bf8 <HAL_RCC_OscConfig+0x650>)
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	600b      	str	r3, [r1, #0]
 8002abc:	e06a      	b.n	8002b94 <HAL_RCC_OscConfig+0x5ec>
 8002abe:	2301      	movs	r3, #1
 8002ac0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002ac8:	fa93 f3a3 	rbit	r3, r3
 8002acc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002ad0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ad4:	fab3 f383 	clz	r3, r3
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ade:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aea:	f7fe fe9b 	bl	8001824 <HAL_GetTick>
 8002aee:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002af2:	e00a      	b.n	8002b0a <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002af4:	f7fe fe96 	bl	8001824 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d902      	bls.n	8002b0a <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	f000 bc50 	b.w	80033aa <HAL_RCC_OscConfig+0xe02>
 8002b0a:	2302      	movs	r3, #2
 8002b0c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b10:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002b14:	fa93 f3a3 	rbit	r3, r3
 8002b18:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002b1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b20:	fab3 f383 	clz	r3, r3
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	095b      	lsrs	r3, r3, #5
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	f043 0301 	orr.w	r3, r3, #1
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d102      	bne.n	8002b3a <HAL_RCC_OscConfig+0x592>
 8002b34:	4b30      	ldr	r3, [pc, #192]	; (8002bf8 <HAL_RCC_OscConfig+0x650>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	e013      	b.n	8002b62 <HAL_RCC_OscConfig+0x5ba>
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b40:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002b44:	fa93 f3a3 	rbit	r3, r3
 8002b48:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002b52:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002b56:	fa93 f3a3 	rbit	r3, r3
 8002b5a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002b5e:	4b26      	ldr	r3, [pc, #152]	; (8002bf8 <HAL_RCC_OscConfig+0x650>)
 8002b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b62:	2202      	movs	r2, #2
 8002b64:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002b68:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002b6c:	fa92 f2a2 	rbit	r2, r2
 8002b70:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002b74:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002b78:	fab2 f282 	clz	r2, r2
 8002b7c:	b2d2      	uxtb	r2, r2
 8002b7e:	f042 0220 	orr.w	r2, r2, #32
 8002b82:	b2d2      	uxtb	r2, r2
 8002b84:	f002 021f 	and.w	r2, r2, #31
 8002b88:	2101      	movs	r1, #1
 8002b8a:	fa01 f202 	lsl.w	r2, r1, r2
 8002b8e:	4013      	ands	r3, r2
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d1af      	bne.n	8002af4 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b94:	1d3b      	adds	r3, r7, #4
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0308 	and.w	r3, r3, #8
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	f000 80da 	beq.w	8002d58 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ba4:	1d3b      	adds	r3, r7, #4
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	699b      	ldr	r3, [r3, #24]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d069      	beq.n	8002c82 <HAL_RCC_OscConfig+0x6da>
 8002bae:	2301      	movs	r3, #1
 8002bb0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002bb8:	fa93 f3a3 	rbit	r3, r3
 8002bbc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002bc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bc4:	fab3 f383 	clz	r3, r3
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	461a      	mov	r2, r3
 8002bcc:	4b0b      	ldr	r3, [pc, #44]	; (8002bfc <HAL_RCC_OscConfig+0x654>)
 8002bce:	4413      	add	r3, r2
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bd8:	f7fe fe24 	bl	8001824 <HAL_GetTick>
 8002bdc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002be0:	e00e      	b.n	8002c00 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002be2:	f7fe fe1f 	bl	8001824 <HAL_GetTick>
 8002be6:	4602      	mov	r2, r0
 8002be8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d906      	bls.n	8002c00 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e3d9      	b.n	80033aa <HAL_RCC_OscConfig+0xe02>
 8002bf6:	bf00      	nop
 8002bf8:	40021000 	.word	0x40021000
 8002bfc:	10908120 	.word	0x10908120
 8002c00:	2302      	movs	r3, #2
 8002c02:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c06:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002c0a:	fa93 f3a3 	rbit	r3, r3
 8002c0e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002c12:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002c16:	2202      	movs	r2, #2
 8002c18:	601a      	str	r2, [r3, #0]
 8002c1a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	fa93 f2a3 	rbit	r2, r3
 8002c24:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002c28:	601a      	str	r2, [r3, #0]
 8002c2a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002c2e:	2202      	movs	r2, #2
 8002c30:	601a      	str	r2, [r3, #0]
 8002c32:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	fa93 f2a3 	rbit	r2, r3
 8002c3c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002c40:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c42:	4ba5      	ldr	r3, [pc, #660]	; (8002ed8 <HAL_RCC_OscConfig+0x930>)
 8002c44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c46:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002c4a:	2102      	movs	r1, #2
 8002c4c:	6019      	str	r1, [r3, #0]
 8002c4e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	fa93 f1a3 	rbit	r1, r3
 8002c58:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002c5c:	6019      	str	r1, [r3, #0]
  return result;
 8002c5e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	fab3 f383 	clz	r3, r3
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	f003 031f 	and.w	r3, r3, #31
 8002c74:	2101      	movs	r1, #1
 8002c76:	fa01 f303 	lsl.w	r3, r1, r3
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d0b0      	beq.n	8002be2 <HAL_RCC_OscConfig+0x63a>
 8002c80:	e06a      	b.n	8002d58 <HAL_RCC_OscConfig+0x7b0>
 8002c82:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002c86:	2201      	movs	r2, #1
 8002c88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c8a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	fa93 f2a3 	rbit	r2, r3
 8002c94:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002c98:	601a      	str	r2, [r3, #0]
  return result;
 8002c9a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002c9e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ca0:	fab3 f383 	clz	r3, r3
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	4b8c      	ldr	r3, [pc, #560]	; (8002edc <HAL_RCC_OscConfig+0x934>)
 8002caa:	4413      	add	r3, r2
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	461a      	mov	r2, r3
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cb4:	f7fe fdb6 	bl	8001824 <HAL_GetTick>
 8002cb8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cbc:	e009      	b.n	8002cd2 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cbe:	f7fe fdb1 	bl	8001824 <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e36b      	b.n	80033aa <HAL_RCC_OscConfig+0xe02>
 8002cd2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002cd6:	2202      	movs	r2, #2
 8002cd8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cda:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	fa93 f2a3 	rbit	r2, r3
 8002ce4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002ce8:	601a      	str	r2, [r3, #0]
 8002cea:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002cee:	2202      	movs	r2, #2
 8002cf0:	601a      	str	r2, [r3, #0]
 8002cf2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	fa93 f2a3 	rbit	r2, r3
 8002cfc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002d00:	601a      	str	r2, [r3, #0]
 8002d02:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002d06:	2202      	movs	r2, #2
 8002d08:	601a      	str	r2, [r3, #0]
 8002d0a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	fa93 f2a3 	rbit	r2, r3
 8002d14:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002d18:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d1a:	4b6f      	ldr	r3, [pc, #444]	; (8002ed8 <HAL_RCC_OscConfig+0x930>)
 8002d1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d1e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002d22:	2102      	movs	r1, #2
 8002d24:	6019      	str	r1, [r3, #0]
 8002d26:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	fa93 f1a3 	rbit	r1, r3
 8002d30:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002d34:	6019      	str	r1, [r3, #0]
  return result;
 8002d36:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	fab3 f383 	clz	r3, r3
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	f003 031f 	and.w	r3, r3, #31
 8002d4c:	2101      	movs	r1, #1
 8002d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d52:	4013      	ands	r3, r2
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d1b2      	bne.n	8002cbe <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d58:	1d3b      	adds	r3, r7, #4
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0304 	and.w	r3, r3, #4
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	f000 8158 	beq.w	8003018 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d6e:	4b5a      	ldr	r3, [pc, #360]	; (8002ed8 <HAL_RCC_OscConfig+0x930>)
 8002d70:	69db      	ldr	r3, [r3, #28]
 8002d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d112      	bne.n	8002da0 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d7a:	4b57      	ldr	r3, [pc, #348]	; (8002ed8 <HAL_RCC_OscConfig+0x930>)
 8002d7c:	69db      	ldr	r3, [r3, #28]
 8002d7e:	4a56      	ldr	r2, [pc, #344]	; (8002ed8 <HAL_RCC_OscConfig+0x930>)
 8002d80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d84:	61d3      	str	r3, [r2, #28]
 8002d86:	4b54      	ldr	r3, [pc, #336]	; (8002ed8 <HAL_RCC_OscConfig+0x930>)
 8002d88:	69db      	ldr	r3, [r3, #28]
 8002d8a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002d8e:	f107 0308 	add.w	r3, r7, #8
 8002d92:	601a      	str	r2, [r3, #0]
 8002d94:	f107 0308 	add.w	r3, r7, #8
 8002d98:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002da0:	4b4f      	ldr	r3, [pc, #316]	; (8002ee0 <HAL_RCC_OscConfig+0x938>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d11a      	bne.n	8002de2 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dac:	4b4c      	ldr	r3, [pc, #304]	; (8002ee0 <HAL_RCC_OscConfig+0x938>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a4b      	ldr	r2, [pc, #300]	; (8002ee0 <HAL_RCC_OscConfig+0x938>)
 8002db2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002db6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002db8:	f7fe fd34 	bl	8001824 <HAL_GetTick>
 8002dbc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dc0:	e009      	b.n	8002dd6 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dc2:	f7fe fd2f 	bl	8001824 <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b64      	cmp	r3, #100	; 0x64
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e2e9      	b.n	80033aa <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dd6:	4b42      	ldr	r3, [pc, #264]	; (8002ee0 <HAL_RCC_OscConfig+0x938>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d0ef      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002de2:	1d3b      	adds	r3, r7, #4
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d106      	bne.n	8002dfa <HAL_RCC_OscConfig+0x852>
 8002dec:	4b3a      	ldr	r3, [pc, #232]	; (8002ed8 <HAL_RCC_OscConfig+0x930>)
 8002dee:	6a1b      	ldr	r3, [r3, #32]
 8002df0:	4a39      	ldr	r2, [pc, #228]	; (8002ed8 <HAL_RCC_OscConfig+0x930>)
 8002df2:	f043 0301 	orr.w	r3, r3, #1
 8002df6:	6213      	str	r3, [r2, #32]
 8002df8:	e02f      	b.n	8002e5a <HAL_RCC_OscConfig+0x8b2>
 8002dfa:	1d3b      	adds	r3, r7, #4
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d10c      	bne.n	8002e1e <HAL_RCC_OscConfig+0x876>
 8002e04:	4b34      	ldr	r3, [pc, #208]	; (8002ed8 <HAL_RCC_OscConfig+0x930>)
 8002e06:	6a1b      	ldr	r3, [r3, #32]
 8002e08:	4a33      	ldr	r2, [pc, #204]	; (8002ed8 <HAL_RCC_OscConfig+0x930>)
 8002e0a:	f023 0301 	bic.w	r3, r3, #1
 8002e0e:	6213      	str	r3, [r2, #32]
 8002e10:	4b31      	ldr	r3, [pc, #196]	; (8002ed8 <HAL_RCC_OscConfig+0x930>)
 8002e12:	6a1b      	ldr	r3, [r3, #32]
 8002e14:	4a30      	ldr	r2, [pc, #192]	; (8002ed8 <HAL_RCC_OscConfig+0x930>)
 8002e16:	f023 0304 	bic.w	r3, r3, #4
 8002e1a:	6213      	str	r3, [r2, #32]
 8002e1c:	e01d      	b.n	8002e5a <HAL_RCC_OscConfig+0x8b2>
 8002e1e:	1d3b      	adds	r3, r7, #4
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	2b05      	cmp	r3, #5
 8002e26:	d10c      	bne.n	8002e42 <HAL_RCC_OscConfig+0x89a>
 8002e28:	4b2b      	ldr	r3, [pc, #172]	; (8002ed8 <HAL_RCC_OscConfig+0x930>)
 8002e2a:	6a1b      	ldr	r3, [r3, #32]
 8002e2c:	4a2a      	ldr	r2, [pc, #168]	; (8002ed8 <HAL_RCC_OscConfig+0x930>)
 8002e2e:	f043 0304 	orr.w	r3, r3, #4
 8002e32:	6213      	str	r3, [r2, #32]
 8002e34:	4b28      	ldr	r3, [pc, #160]	; (8002ed8 <HAL_RCC_OscConfig+0x930>)
 8002e36:	6a1b      	ldr	r3, [r3, #32]
 8002e38:	4a27      	ldr	r2, [pc, #156]	; (8002ed8 <HAL_RCC_OscConfig+0x930>)
 8002e3a:	f043 0301 	orr.w	r3, r3, #1
 8002e3e:	6213      	str	r3, [r2, #32]
 8002e40:	e00b      	b.n	8002e5a <HAL_RCC_OscConfig+0x8b2>
 8002e42:	4b25      	ldr	r3, [pc, #148]	; (8002ed8 <HAL_RCC_OscConfig+0x930>)
 8002e44:	6a1b      	ldr	r3, [r3, #32]
 8002e46:	4a24      	ldr	r2, [pc, #144]	; (8002ed8 <HAL_RCC_OscConfig+0x930>)
 8002e48:	f023 0301 	bic.w	r3, r3, #1
 8002e4c:	6213      	str	r3, [r2, #32]
 8002e4e:	4b22      	ldr	r3, [pc, #136]	; (8002ed8 <HAL_RCC_OscConfig+0x930>)
 8002e50:	6a1b      	ldr	r3, [r3, #32]
 8002e52:	4a21      	ldr	r2, [pc, #132]	; (8002ed8 <HAL_RCC_OscConfig+0x930>)
 8002e54:	f023 0304 	bic.w	r3, r3, #4
 8002e58:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e5a:	1d3b      	adds	r3, r7, #4
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d06b      	beq.n	8002f3c <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e64:	f7fe fcde 	bl	8001824 <HAL_GetTick>
 8002e68:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e6c:	e00b      	b.n	8002e86 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e6e:	f7fe fcd9 	bl	8001824 <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d901      	bls.n	8002e86 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8002e82:	2303      	movs	r3, #3
 8002e84:	e291      	b.n	80033aa <HAL_RCC_OscConfig+0xe02>
 8002e86:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002e8a:	2202      	movs	r2, #2
 8002e8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e8e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	fa93 f2a3 	rbit	r2, r3
 8002e98:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002e9c:	601a      	str	r2, [r3, #0]
 8002e9e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002ea2:	2202      	movs	r2, #2
 8002ea4:	601a      	str	r2, [r3, #0]
 8002ea6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	fa93 f2a3 	rbit	r2, r3
 8002eb0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002eb4:	601a      	str	r2, [r3, #0]
  return result;
 8002eb6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002eba:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ebc:	fab3 f383 	clz	r3, r3
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	095b      	lsrs	r3, r3, #5
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	f043 0302 	orr.w	r3, r3, #2
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d109      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x93c>
 8002ed0:	4b01      	ldr	r3, [pc, #4]	; (8002ed8 <HAL_RCC_OscConfig+0x930>)
 8002ed2:	6a1b      	ldr	r3, [r3, #32]
 8002ed4:	e014      	b.n	8002f00 <HAL_RCC_OscConfig+0x958>
 8002ed6:	bf00      	nop
 8002ed8:	40021000 	.word	0x40021000
 8002edc:	10908120 	.word	0x10908120
 8002ee0:	40007000 	.word	0x40007000
 8002ee4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002ee8:	2202      	movs	r2, #2
 8002eea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eec:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	fa93 f2a3 	rbit	r2, r3
 8002ef6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002efa:	601a      	str	r2, [r3, #0]
 8002efc:	4bbb      	ldr	r3, [pc, #748]	; (80031ec <HAL_RCC_OscConfig+0xc44>)
 8002efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f00:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002f04:	2102      	movs	r1, #2
 8002f06:	6011      	str	r1, [r2, #0]
 8002f08:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002f0c:	6812      	ldr	r2, [r2, #0]
 8002f0e:	fa92 f1a2 	rbit	r1, r2
 8002f12:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002f16:	6011      	str	r1, [r2, #0]
  return result;
 8002f18:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002f1c:	6812      	ldr	r2, [r2, #0]
 8002f1e:	fab2 f282 	clz	r2, r2
 8002f22:	b2d2      	uxtb	r2, r2
 8002f24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f28:	b2d2      	uxtb	r2, r2
 8002f2a:	f002 021f 	and.w	r2, r2, #31
 8002f2e:	2101      	movs	r1, #1
 8002f30:	fa01 f202 	lsl.w	r2, r1, r2
 8002f34:	4013      	ands	r3, r2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d099      	beq.n	8002e6e <HAL_RCC_OscConfig+0x8c6>
 8002f3a:	e063      	b.n	8003004 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f3c:	f7fe fc72 	bl	8001824 <HAL_GetTick>
 8002f40:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f44:	e00b      	b.n	8002f5e <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f46:	f7fe fc6d 	bl	8001824 <HAL_GetTick>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d901      	bls.n	8002f5e <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e225      	b.n	80033aa <HAL_RCC_OscConfig+0xe02>
 8002f5e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002f62:	2202      	movs	r2, #2
 8002f64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f66:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	fa93 f2a3 	rbit	r2, r3
 8002f70:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002f74:	601a      	str	r2, [r3, #0]
 8002f76:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002f7a:	2202      	movs	r2, #2
 8002f7c:	601a      	str	r2, [r3, #0]
 8002f7e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	fa93 f2a3 	rbit	r2, r3
 8002f88:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002f8c:	601a      	str	r2, [r3, #0]
  return result;
 8002f8e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002f92:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f94:	fab3 f383 	clz	r3, r3
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	095b      	lsrs	r3, r3, #5
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	f043 0302 	orr.w	r3, r3, #2
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d102      	bne.n	8002fae <HAL_RCC_OscConfig+0xa06>
 8002fa8:	4b90      	ldr	r3, [pc, #576]	; (80031ec <HAL_RCC_OscConfig+0xc44>)
 8002faa:	6a1b      	ldr	r3, [r3, #32]
 8002fac:	e00d      	b.n	8002fca <HAL_RCC_OscConfig+0xa22>
 8002fae:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002fb2:	2202      	movs	r2, #2
 8002fb4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	fa93 f2a3 	rbit	r2, r3
 8002fc0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002fc4:	601a      	str	r2, [r3, #0]
 8002fc6:	4b89      	ldr	r3, [pc, #548]	; (80031ec <HAL_RCC_OscConfig+0xc44>)
 8002fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fca:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002fce:	2102      	movs	r1, #2
 8002fd0:	6011      	str	r1, [r2, #0]
 8002fd2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002fd6:	6812      	ldr	r2, [r2, #0]
 8002fd8:	fa92 f1a2 	rbit	r1, r2
 8002fdc:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002fe0:	6011      	str	r1, [r2, #0]
  return result;
 8002fe2:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002fe6:	6812      	ldr	r2, [r2, #0]
 8002fe8:	fab2 f282 	clz	r2, r2
 8002fec:	b2d2      	uxtb	r2, r2
 8002fee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ff2:	b2d2      	uxtb	r2, r2
 8002ff4:	f002 021f 	and.w	r2, r2, #31
 8002ff8:	2101      	movs	r1, #1
 8002ffa:	fa01 f202 	lsl.w	r2, r1, r2
 8002ffe:	4013      	ands	r3, r2
 8003000:	2b00      	cmp	r3, #0
 8003002:	d1a0      	bne.n	8002f46 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003004:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003008:	2b01      	cmp	r3, #1
 800300a:	d105      	bne.n	8003018 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800300c:	4b77      	ldr	r3, [pc, #476]	; (80031ec <HAL_RCC_OscConfig+0xc44>)
 800300e:	69db      	ldr	r3, [r3, #28]
 8003010:	4a76      	ldr	r2, [pc, #472]	; (80031ec <HAL_RCC_OscConfig+0xc44>)
 8003012:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003016:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003018:	1d3b      	adds	r3, r7, #4
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	69db      	ldr	r3, [r3, #28]
 800301e:	2b00      	cmp	r3, #0
 8003020:	f000 81c2 	beq.w	80033a8 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003024:	4b71      	ldr	r3, [pc, #452]	; (80031ec <HAL_RCC_OscConfig+0xc44>)
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f003 030c 	and.w	r3, r3, #12
 800302c:	2b08      	cmp	r3, #8
 800302e:	f000 819c 	beq.w	800336a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003032:	1d3b      	adds	r3, r7, #4
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	69db      	ldr	r3, [r3, #28]
 8003038:	2b02      	cmp	r3, #2
 800303a:	f040 8114 	bne.w	8003266 <HAL_RCC_OscConfig+0xcbe>
 800303e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003042:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003046:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003048:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	fa93 f2a3 	rbit	r2, r3
 8003052:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003056:	601a      	str	r2, [r3, #0]
  return result;
 8003058:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800305c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800305e:	fab3 f383 	clz	r3, r3
 8003062:	b2db      	uxtb	r3, r3
 8003064:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003068:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	461a      	mov	r2, r3
 8003070:	2300      	movs	r3, #0
 8003072:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003074:	f7fe fbd6 	bl	8001824 <HAL_GetTick>
 8003078:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800307c:	e009      	b.n	8003092 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800307e:	f7fe fbd1 	bl	8001824 <HAL_GetTick>
 8003082:	4602      	mov	r2, r0
 8003084:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	2b02      	cmp	r3, #2
 800308c:	d901      	bls.n	8003092 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e18b      	b.n	80033aa <HAL_RCC_OscConfig+0xe02>
 8003092:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003096:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800309a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	fa93 f2a3 	rbit	r2, r3
 80030a6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80030aa:	601a      	str	r2, [r3, #0]
  return result;
 80030ac:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80030b0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030b2:	fab3 f383 	clz	r3, r3
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	095b      	lsrs	r3, r3, #5
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	f043 0301 	orr.w	r3, r3, #1
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d102      	bne.n	80030cc <HAL_RCC_OscConfig+0xb24>
 80030c6:	4b49      	ldr	r3, [pc, #292]	; (80031ec <HAL_RCC_OscConfig+0xc44>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	e01b      	b.n	8003104 <HAL_RCC_OscConfig+0xb5c>
 80030cc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80030d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	fa93 f2a3 	rbit	r2, r3
 80030e0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80030e4:	601a      	str	r2, [r3, #0]
 80030e6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80030ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030ee:	601a      	str	r2, [r3, #0]
 80030f0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	fa93 f2a3 	rbit	r2, r3
 80030fa:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80030fe:	601a      	str	r2, [r3, #0]
 8003100:	4b3a      	ldr	r3, [pc, #232]	; (80031ec <HAL_RCC_OscConfig+0xc44>)
 8003102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003104:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003108:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800310c:	6011      	str	r1, [r2, #0]
 800310e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003112:	6812      	ldr	r2, [r2, #0]
 8003114:	fa92 f1a2 	rbit	r1, r2
 8003118:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800311c:	6011      	str	r1, [r2, #0]
  return result;
 800311e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003122:	6812      	ldr	r2, [r2, #0]
 8003124:	fab2 f282 	clz	r2, r2
 8003128:	b2d2      	uxtb	r2, r2
 800312a:	f042 0220 	orr.w	r2, r2, #32
 800312e:	b2d2      	uxtb	r2, r2
 8003130:	f002 021f 	and.w	r2, r2, #31
 8003134:	2101      	movs	r1, #1
 8003136:	fa01 f202 	lsl.w	r2, r1, r2
 800313a:	4013      	ands	r3, r2
 800313c:	2b00      	cmp	r3, #0
 800313e:	d19e      	bne.n	800307e <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003140:	4b2a      	ldr	r3, [pc, #168]	; (80031ec <HAL_RCC_OscConfig+0xc44>)
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003148:	1d3b      	adds	r3, r7, #4
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800314e:	1d3b      	adds	r3, r7, #4
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	6a1b      	ldr	r3, [r3, #32]
 8003154:	430b      	orrs	r3, r1
 8003156:	4925      	ldr	r1, [pc, #148]	; (80031ec <HAL_RCC_OscConfig+0xc44>)
 8003158:	4313      	orrs	r3, r2
 800315a:	604b      	str	r3, [r1, #4]
 800315c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003160:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003164:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003166:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	fa93 f2a3 	rbit	r2, r3
 8003170:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003174:	601a      	str	r2, [r3, #0]
  return result;
 8003176:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800317a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800317c:	fab3 f383 	clz	r3, r3
 8003180:	b2db      	uxtb	r3, r3
 8003182:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003186:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	461a      	mov	r2, r3
 800318e:	2301      	movs	r3, #1
 8003190:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003192:	f7fe fb47 	bl	8001824 <HAL_GetTick>
 8003196:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800319a:	e009      	b.n	80031b0 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800319c:	f7fe fb42 	bl	8001824 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	d901      	bls.n	80031b0 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	e0fc      	b.n	80033aa <HAL_RCC_OscConfig+0xe02>
 80031b0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80031b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ba:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	fa93 f2a3 	rbit	r2, r3
 80031c4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80031c8:	601a      	str	r2, [r3, #0]
  return result;
 80031ca:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80031ce:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031d0:	fab3 f383 	clz	r3, r3
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	095b      	lsrs	r3, r3, #5
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	f043 0301 	orr.w	r3, r3, #1
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d105      	bne.n	80031f0 <HAL_RCC_OscConfig+0xc48>
 80031e4:	4b01      	ldr	r3, [pc, #4]	; (80031ec <HAL_RCC_OscConfig+0xc44>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	e01e      	b.n	8003228 <HAL_RCC_OscConfig+0xc80>
 80031ea:	bf00      	nop
 80031ec:	40021000 	.word	0x40021000
 80031f0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80031f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031fa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	fa93 f2a3 	rbit	r2, r3
 8003204:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003208:	601a      	str	r2, [r3, #0]
 800320a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800320e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003212:	601a      	str	r2, [r3, #0]
 8003214:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	fa93 f2a3 	rbit	r2, r3
 800321e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003222:	601a      	str	r2, [r3, #0]
 8003224:	4b63      	ldr	r3, [pc, #396]	; (80033b4 <HAL_RCC_OscConfig+0xe0c>)
 8003226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003228:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800322c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003230:	6011      	str	r1, [r2, #0]
 8003232:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003236:	6812      	ldr	r2, [r2, #0]
 8003238:	fa92 f1a2 	rbit	r1, r2
 800323c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003240:	6011      	str	r1, [r2, #0]
  return result;
 8003242:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003246:	6812      	ldr	r2, [r2, #0]
 8003248:	fab2 f282 	clz	r2, r2
 800324c:	b2d2      	uxtb	r2, r2
 800324e:	f042 0220 	orr.w	r2, r2, #32
 8003252:	b2d2      	uxtb	r2, r2
 8003254:	f002 021f 	and.w	r2, r2, #31
 8003258:	2101      	movs	r1, #1
 800325a:	fa01 f202 	lsl.w	r2, r1, r2
 800325e:	4013      	ands	r3, r2
 8003260:	2b00      	cmp	r3, #0
 8003262:	d09b      	beq.n	800319c <HAL_RCC_OscConfig+0xbf4>
 8003264:	e0a0      	b.n	80033a8 <HAL_RCC_OscConfig+0xe00>
 8003266:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800326a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800326e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003270:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	fa93 f2a3 	rbit	r2, r3
 800327a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800327e:	601a      	str	r2, [r3, #0]
  return result;
 8003280:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003284:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003286:	fab3 f383 	clz	r3, r3
 800328a:	b2db      	uxtb	r3, r3
 800328c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003290:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	461a      	mov	r2, r3
 8003298:	2300      	movs	r3, #0
 800329a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800329c:	f7fe fac2 	bl	8001824 <HAL_GetTick>
 80032a0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032a4:	e009      	b.n	80032ba <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032a6:	f7fe fabd 	bl	8001824 <HAL_GetTick>
 80032aa:	4602      	mov	r2, r0
 80032ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d901      	bls.n	80032ba <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e077      	b.n	80033aa <HAL_RCC_OscConfig+0xe02>
 80032ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80032be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	fa93 f2a3 	rbit	r2, r3
 80032ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032d2:	601a      	str	r2, [r3, #0]
  return result;
 80032d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032d8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032da:	fab3 f383 	clz	r3, r3
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	095b      	lsrs	r3, r3, #5
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	f043 0301 	orr.w	r3, r3, #1
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d102      	bne.n	80032f4 <HAL_RCC_OscConfig+0xd4c>
 80032ee:	4b31      	ldr	r3, [pc, #196]	; (80033b4 <HAL_RCC_OscConfig+0xe0c>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	e01b      	b.n	800332c <HAL_RCC_OscConfig+0xd84>
 80032f4:	f107 0320 	add.w	r3, r7, #32
 80032f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032fe:	f107 0320 	add.w	r3, r7, #32
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	fa93 f2a3 	rbit	r2, r3
 8003308:	f107 031c 	add.w	r3, r7, #28
 800330c:	601a      	str	r2, [r3, #0]
 800330e:	f107 0318 	add.w	r3, r7, #24
 8003312:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003316:	601a      	str	r2, [r3, #0]
 8003318:	f107 0318 	add.w	r3, r7, #24
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	fa93 f2a3 	rbit	r2, r3
 8003322:	f107 0314 	add.w	r3, r7, #20
 8003326:	601a      	str	r2, [r3, #0]
 8003328:	4b22      	ldr	r3, [pc, #136]	; (80033b4 <HAL_RCC_OscConfig+0xe0c>)
 800332a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332c:	f107 0210 	add.w	r2, r7, #16
 8003330:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003334:	6011      	str	r1, [r2, #0]
 8003336:	f107 0210 	add.w	r2, r7, #16
 800333a:	6812      	ldr	r2, [r2, #0]
 800333c:	fa92 f1a2 	rbit	r1, r2
 8003340:	f107 020c 	add.w	r2, r7, #12
 8003344:	6011      	str	r1, [r2, #0]
  return result;
 8003346:	f107 020c 	add.w	r2, r7, #12
 800334a:	6812      	ldr	r2, [r2, #0]
 800334c:	fab2 f282 	clz	r2, r2
 8003350:	b2d2      	uxtb	r2, r2
 8003352:	f042 0220 	orr.w	r2, r2, #32
 8003356:	b2d2      	uxtb	r2, r2
 8003358:	f002 021f 	and.w	r2, r2, #31
 800335c:	2101      	movs	r1, #1
 800335e:	fa01 f202 	lsl.w	r2, r1, r2
 8003362:	4013      	ands	r3, r2
 8003364:	2b00      	cmp	r3, #0
 8003366:	d19e      	bne.n	80032a6 <HAL_RCC_OscConfig+0xcfe>
 8003368:	e01e      	b.n	80033a8 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800336a:	1d3b      	adds	r3, r7, #4
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	69db      	ldr	r3, [r3, #28]
 8003370:	2b01      	cmp	r3, #1
 8003372:	d101      	bne.n	8003378 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e018      	b.n	80033aa <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003378:	4b0e      	ldr	r3, [pc, #56]	; (80033b4 <HAL_RCC_OscConfig+0xe0c>)
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003380:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003384:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003388:	1d3b      	adds	r3, r7, #4
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	6a1b      	ldr	r3, [r3, #32]
 800338e:	429a      	cmp	r2, r3
 8003390:	d108      	bne.n	80033a4 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003392:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003396:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800339a:	1d3b      	adds	r3, r7, #4
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d001      	beq.n	80033a8 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e000      	b.n	80033aa <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	40021000 	.word	0x40021000

080033b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b09e      	sub	sp, #120	; 0x78
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80033c2:	2300      	movs	r3, #0
 80033c4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d101      	bne.n	80033d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e162      	b.n	8003696 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033d0:	4b90      	ldr	r3, [pc, #576]	; (8003614 <HAL_RCC_ClockConfig+0x25c>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0307 	and.w	r3, r3, #7
 80033d8:	683a      	ldr	r2, [r7, #0]
 80033da:	429a      	cmp	r2, r3
 80033dc:	d910      	bls.n	8003400 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033de:	4b8d      	ldr	r3, [pc, #564]	; (8003614 <HAL_RCC_ClockConfig+0x25c>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f023 0207 	bic.w	r2, r3, #7
 80033e6:	498b      	ldr	r1, [pc, #556]	; (8003614 <HAL_RCC_ClockConfig+0x25c>)
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ee:	4b89      	ldr	r3, [pc, #548]	; (8003614 <HAL_RCC_ClockConfig+0x25c>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0307 	and.w	r3, r3, #7
 80033f6:	683a      	ldr	r2, [r7, #0]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d001      	beq.n	8003400 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e14a      	b.n	8003696 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0302 	and.w	r3, r3, #2
 8003408:	2b00      	cmp	r3, #0
 800340a:	d008      	beq.n	800341e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800340c:	4b82      	ldr	r3, [pc, #520]	; (8003618 <HAL_RCC_ClockConfig+0x260>)
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	497f      	ldr	r1, [pc, #508]	; (8003618 <HAL_RCC_ClockConfig+0x260>)
 800341a:	4313      	orrs	r3, r2
 800341c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0301 	and.w	r3, r3, #1
 8003426:	2b00      	cmp	r3, #0
 8003428:	f000 80dc 	beq.w	80035e4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	2b01      	cmp	r3, #1
 8003432:	d13c      	bne.n	80034ae <HAL_RCC_ClockConfig+0xf6>
 8003434:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003438:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800343a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800343c:	fa93 f3a3 	rbit	r3, r3
 8003440:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003442:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003444:	fab3 f383 	clz	r3, r3
 8003448:	b2db      	uxtb	r3, r3
 800344a:	095b      	lsrs	r3, r3, #5
 800344c:	b2db      	uxtb	r3, r3
 800344e:	f043 0301 	orr.w	r3, r3, #1
 8003452:	b2db      	uxtb	r3, r3
 8003454:	2b01      	cmp	r3, #1
 8003456:	d102      	bne.n	800345e <HAL_RCC_ClockConfig+0xa6>
 8003458:	4b6f      	ldr	r3, [pc, #444]	; (8003618 <HAL_RCC_ClockConfig+0x260>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	e00f      	b.n	800347e <HAL_RCC_ClockConfig+0xc6>
 800345e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003462:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003464:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003466:	fa93 f3a3 	rbit	r3, r3
 800346a:	667b      	str	r3, [r7, #100]	; 0x64
 800346c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003470:	663b      	str	r3, [r7, #96]	; 0x60
 8003472:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003474:	fa93 f3a3 	rbit	r3, r3
 8003478:	65fb      	str	r3, [r7, #92]	; 0x5c
 800347a:	4b67      	ldr	r3, [pc, #412]	; (8003618 <HAL_RCC_ClockConfig+0x260>)
 800347c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003482:	65ba      	str	r2, [r7, #88]	; 0x58
 8003484:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003486:	fa92 f2a2 	rbit	r2, r2
 800348a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800348c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800348e:	fab2 f282 	clz	r2, r2
 8003492:	b2d2      	uxtb	r2, r2
 8003494:	f042 0220 	orr.w	r2, r2, #32
 8003498:	b2d2      	uxtb	r2, r2
 800349a:	f002 021f 	and.w	r2, r2, #31
 800349e:	2101      	movs	r1, #1
 80034a0:	fa01 f202 	lsl.w	r2, r1, r2
 80034a4:	4013      	ands	r3, r2
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d17b      	bne.n	80035a2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e0f3      	b.n	8003696 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d13c      	bne.n	8003530 <HAL_RCC_ClockConfig+0x178>
 80034b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034ba:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034be:	fa93 f3a3 	rbit	r3, r3
 80034c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80034c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034c6:	fab3 f383 	clz	r3, r3
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	095b      	lsrs	r3, r3, #5
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	f043 0301 	orr.w	r3, r3, #1
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d102      	bne.n	80034e0 <HAL_RCC_ClockConfig+0x128>
 80034da:	4b4f      	ldr	r3, [pc, #316]	; (8003618 <HAL_RCC_ClockConfig+0x260>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	e00f      	b.n	8003500 <HAL_RCC_ClockConfig+0x148>
 80034e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034e4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034e8:	fa93 f3a3 	rbit	r3, r3
 80034ec:	647b      	str	r3, [r7, #68]	; 0x44
 80034ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034f2:	643b      	str	r3, [r7, #64]	; 0x40
 80034f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034f6:	fa93 f3a3 	rbit	r3, r3
 80034fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034fc:	4b46      	ldr	r3, [pc, #280]	; (8003618 <HAL_RCC_ClockConfig+0x260>)
 80034fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003500:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003504:	63ba      	str	r2, [r7, #56]	; 0x38
 8003506:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003508:	fa92 f2a2 	rbit	r2, r2
 800350c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800350e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003510:	fab2 f282 	clz	r2, r2
 8003514:	b2d2      	uxtb	r2, r2
 8003516:	f042 0220 	orr.w	r2, r2, #32
 800351a:	b2d2      	uxtb	r2, r2
 800351c:	f002 021f 	and.w	r2, r2, #31
 8003520:	2101      	movs	r1, #1
 8003522:	fa01 f202 	lsl.w	r2, r1, r2
 8003526:	4013      	ands	r3, r2
 8003528:	2b00      	cmp	r3, #0
 800352a:	d13a      	bne.n	80035a2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e0b2      	b.n	8003696 <HAL_RCC_ClockConfig+0x2de>
 8003530:	2302      	movs	r3, #2
 8003532:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003536:	fa93 f3a3 	rbit	r3, r3
 800353a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800353c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800353e:	fab3 f383 	clz	r3, r3
 8003542:	b2db      	uxtb	r3, r3
 8003544:	095b      	lsrs	r3, r3, #5
 8003546:	b2db      	uxtb	r3, r3
 8003548:	f043 0301 	orr.w	r3, r3, #1
 800354c:	b2db      	uxtb	r3, r3
 800354e:	2b01      	cmp	r3, #1
 8003550:	d102      	bne.n	8003558 <HAL_RCC_ClockConfig+0x1a0>
 8003552:	4b31      	ldr	r3, [pc, #196]	; (8003618 <HAL_RCC_ClockConfig+0x260>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	e00d      	b.n	8003574 <HAL_RCC_ClockConfig+0x1bc>
 8003558:	2302      	movs	r3, #2
 800355a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800355c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800355e:	fa93 f3a3 	rbit	r3, r3
 8003562:	627b      	str	r3, [r7, #36]	; 0x24
 8003564:	2302      	movs	r3, #2
 8003566:	623b      	str	r3, [r7, #32]
 8003568:	6a3b      	ldr	r3, [r7, #32]
 800356a:	fa93 f3a3 	rbit	r3, r3
 800356e:	61fb      	str	r3, [r7, #28]
 8003570:	4b29      	ldr	r3, [pc, #164]	; (8003618 <HAL_RCC_ClockConfig+0x260>)
 8003572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003574:	2202      	movs	r2, #2
 8003576:	61ba      	str	r2, [r7, #24]
 8003578:	69ba      	ldr	r2, [r7, #24]
 800357a:	fa92 f2a2 	rbit	r2, r2
 800357e:	617a      	str	r2, [r7, #20]
  return result;
 8003580:	697a      	ldr	r2, [r7, #20]
 8003582:	fab2 f282 	clz	r2, r2
 8003586:	b2d2      	uxtb	r2, r2
 8003588:	f042 0220 	orr.w	r2, r2, #32
 800358c:	b2d2      	uxtb	r2, r2
 800358e:	f002 021f 	and.w	r2, r2, #31
 8003592:	2101      	movs	r1, #1
 8003594:	fa01 f202 	lsl.w	r2, r1, r2
 8003598:	4013      	ands	r3, r2
 800359a:	2b00      	cmp	r3, #0
 800359c:	d101      	bne.n	80035a2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e079      	b.n	8003696 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035a2:	4b1d      	ldr	r3, [pc, #116]	; (8003618 <HAL_RCC_ClockConfig+0x260>)
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	f023 0203 	bic.w	r2, r3, #3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	491a      	ldr	r1, [pc, #104]	; (8003618 <HAL_RCC_ClockConfig+0x260>)
 80035b0:	4313      	orrs	r3, r2
 80035b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035b4:	f7fe f936 	bl	8001824 <HAL_GetTick>
 80035b8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ba:	e00a      	b.n	80035d2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035bc:	f7fe f932 	bl	8001824 <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d901      	bls.n	80035d2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e061      	b.n	8003696 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035d2:	4b11      	ldr	r3, [pc, #68]	; (8003618 <HAL_RCC_ClockConfig+0x260>)
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f003 020c 	and.w	r2, r3, #12
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d1eb      	bne.n	80035bc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035e4:	4b0b      	ldr	r3, [pc, #44]	; (8003614 <HAL_RCC_ClockConfig+0x25c>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0307 	and.w	r3, r3, #7
 80035ec:	683a      	ldr	r2, [r7, #0]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d214      	bcs.n	800361c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035f2:	4b08      	ldr	r3, [pc, #32]	; (8003614 <HAL_RCC_ClockConfig+0x25c>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f023 0207 	bic.w	r2, r3, #7
 80035fa:	4906      	ldr	r1, [pc, #24]	; (8003614 <HAL_RCC_ClockConfig+0x25c>)
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	4313      	orrs	r3, r2
 8003600:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003602:	4b04      	ldr	r3, [pc, #16]	; (8003614 <HAL_RCC_ClockConfig+0x25c>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0307 	and.w	r3, r3, #7
 800360a:	683a      	ldr	r2, [r7, #0]
 800360c:	429a      	cmp	r2, r3
 800360e:	d005      	beq.n	800361c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e040      	b.n	8003696 <HAL_RCC_ClockConfig+0x2de>
 8003614:	40022000 	.word	0x40022000
 8003618:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0304 	and.w	r3, r3, #4
 8003624:	2b00      	cmp	r3, #0
 8003626:	d008      	beq.n	800363a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003628:	4b1d      	ldr	r3, [pc, #116]	; (80036a0 <HAL_RCC_ClockConfig+0x2e8>)
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	491a      	ldr	r1, [pc, #104]	; (80036a0 <HAL_RCC_ClockConfig+0x2e8>)
 8003636:	4313      	orrs	r3, r2
 8003638:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0308 	and.w	r3, r3, #8
 8003642:	2b00      	cmp	r3, #0
 8003644:	d009      	beq.n	800365a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003646:	4b16      	ldr	r3, [pc, #88]	; (80036a0 <HAL_RCC_ClockConfig+0x2e8>)
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	00db      	lsls	r3, r3, #3
 8003654:	4912      	ldr	r1, [pc, #72]	; (80036a0 <HAL_RCC_ClockConfig+0x2e8>)
 8003656:	4313      	orrs	r3, r2
 8003658:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800365a:	f000 f829 	bl	80036b0 <HAL_RCC_GetSysClockFreq>
 800365e:	4601      	mov	r1, r0
 8003660:	4b0f      	ldr	r3, [pc, #60]	; (80036a0 <HAL_RCC_ClockConfig+0x2e8>)
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003668:	22f0      	movs	r2, #240	; 0xf0
 800366a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800366c:	693a      	ldr	r2, [r7, #16]
 800366e:	fa92 f2a2 	rbit	r2, r2
 8003672:	60fa      	str	r2, [r7, #12]
  return result;
 8003674:	68fa      	ldr	r2, [r7, #12]
 8003676:	fab2 f282 	clz	r2, r2
 800367a:	b2d2      	uxtb	r2, r2
 800367c:	40d3      	lsrs	r3, r2
 800367e:	4a09      	ldr	r2, [pc, #36]	; (80036a4 <HAL_RCC_ClockConfig+0x2ec>)
 8003680:	5cd3      	ldrb	r3, [r2, r3]
 8003682:	fa21 f303 	lsr.w	r3, r1, r3
 8003686:	4a08      	ldr	r2, [pc, #32]	; (80036a8 <HAL_RCC_ClockConfig+0x2f0>)
 8003688:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800368a:	4b08      	ldr	r3, [pc, #32]	; (80036ac <HAL_RCC_ClockConfig+0x2f4>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4618      	mov	r0, r3
 8003690:	f7fe f884 	bl	800179c <HAL_InitTick>
  
  return HAL_OK;
 8003694:	2300      	movs	r3, #0
}
 8003696:	4618      	mov	r0, r3
 8003698:	3778      	adds	r7, #120	; 0x78
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	40021000 	.word	0x40021000
 80036a4:	080087f8 	.word	0x080087f8
 80036a8:	20000000 	.word	0x20000000
 80036ac:	20000004 	.word	0x20000004

080036b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b08b      	sub	sp, #44	; 0x2c
 80036b4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80036b6:	2300      	movs	r3, #0
 80036b8:	61fb      	str	r3, [r7, #28]
 80036ba:	2300      	movs	r3, #0
 80036bc:	61bb      	str	r3, [r7, #24]
 80036be:	2300      	movs	r3, #0
 80036c0:	627b      	str	r3, [r7, #36]	; 0x24
 80036c2:	2300      	movs	r3, #0
 80036c4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80036c6:	2300      	movs	r3, #0
 80036c8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80036ca:	4b29      	ldr	r3, [pc, #164]	; (8003770 <HAL_RCC_GetSysClockFreq+0xc0>)
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	f003 030c 	and.w	r3, r3, #12
 80036d6:	2b04      	cmp	r3, #4
 80036d8:	d002      	beq.n	80036e0 <HAL_RCC_GetSysClockFreq+0x30>
 80036da:	2b08      	cmp	r3, #8
 80036dc:	d003      	beq.n	80036e6 <HAL_RCC_GetSysClockFreq+0x36>
 80036de:	e03c      	b.n	800375a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80036e0:	4b24      	ldr	r3, [pc, #144]	; (8003774 <HAL_RCC_GetSysClockFreq+0xc4>)
 80036e2:	623b      	str	r3, [r7, #32]
      break;
 80036e4:	e03c      	b.n	8003760 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80036ec:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80036f0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f2:	68ba      	ldr	r2, [r7, #8]
 80036f4:	fa92 f2a2 	rbit	r2, r2
 80036f8:	607a      	str	r2, [r7, #4]
  return result;
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	fab2 f282 	clz	r2, r2
 8003700:	b2d2      	uxtb	r2, r2
 8003702:	40d3      	lsrs	r3, r2
 8003704:	4a1c      	ldr	r2, [pc, #112]	; (8003778 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003706:	5cd3      	ldrb	r3, [r2, r3]
 8003708:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800370a:	4b19      	ldr	r3, [pc, #100]	; (8003770 <HAL_RCC_GetSysClockFreq+0xc0>)
 800370c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800370e:	f003 030f 	and.w	r3, r3, #15
 8003712:	220f      	movs	r2, #15
 8003714:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003716:	693a      	ldr	r2, [r7, #16]
 8003718:	fa92 f2a2 	rbit	r2, r2
 800371c:	60fa      	str	r2, [r7, #12]
  return result;
 800371e:	68fa      	ldr	r2, [r7, #12]
 8003720:	fab2 f282 	clz	r2, r2
 8003724:	b2d2      	uxtb	r2, r2
 8003726:	40d3      	lsrs	r3, r2
 8003728:	4a14      	ldr	r2, [pc, #80]	; (800377c <HAL_RCC_GetSysClockFreq+0xcc>)
 800372a:	5cd3      	ldrb	r3, [r2, r3]
 800372c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d008      	beq.n	800374a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003738:	4a0e      	ldr	r2, [pc, #56]	; (8003774 <HAL_RCC_GetSysClockFreq+0xc4>)
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	fb02 f303 	mul.w	r3, r2, r3
 8003746:	627b      	str	r3, [r7, #36]	; 0x24
 8003748:	e004      	b.n	8003754 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	4a0c      	ldr	r2, [pc, #48]	; (8003780 <HAL_RCC_GetSysClockFreq+0xd0>)
 800374e:	fb02 f303 	mul.w	r3, r2, r3
 8003752:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003756:	623b      	str	r3, [r7, #32]
      break;
 8003758:	e002      	b.n	8003760 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800375a:	4b06      	ldr	r3, [pc, #24]	; (8003774 <HAL_RCC_GetSysClockFreq+0xc4>)
 800375c:	623b      	str	r3, [r7, #32]
      break;
 800375e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003760:	6a3b      	ldr	r3, [r7, #32]
}
 8003762:	4618      	mov	r0, r3
 8003764:	372c      	adds	r7, #44	; 0x2c
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	40021000 	.word	0x40021000
 8003774:	007a1200 	.word	0x007a1200
 8003778:	08008810 	.word	0x08008810
 800377c:	08008820 	.word	0x08008820
 8003780:	003d0900 	.word	0x003d0900

08003784 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003784:	b480      	push	{r7}
 8003786:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003788:	4b03      	ldr	r3, [pc, #12]	; (8003798 <HAL_RCC_GetHCLKFreq+0x14>)
 800378a:	681b      	ldr	r3, [r3, #0]
}
 800378c:	4618      	mov	r0, r3
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr
 8003796:	bf00      	nop
 8003798:	20000000 	.word	0x20000000

0800379c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80037a2:	f7ff ffef 	bl	8003784 <HAL_RCC_GetHCLKFreq>
 80037a6:	4601      	mov	r1, r0
 80037a8:	4b0b      	ldr	r3, [pc, #44]	; (80037d8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80037b0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80037b4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	fa92 f2a2 	rbit	r2, r2
 80037bc:	603a      	str	r2, [r7, #0]
  return result;
 80037be:	683a      	ldr	r2, [r7, #0]
 80037c0:	fab2 f282 	clz	r2, r2
 80037c4:	b2d2      	uxtb	r2, r2
 80037c6:	40d3      	lsrs	r3, r2
 80037c8:	4a04      	ldr	r2, [pc, #16]	; (80037dc <HAL_RCC_GetPCLK1Freq+0x40>)
 80037ca:	5cd3      	ldrb	r3, [r2, r3]
 80037cc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80037d0:	4618      	mov	r0, r3
 80037d2:	3708      	adds	r7, #8
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	40021000 	.word	0x40021000
 80037dc:	08008808 	.word	0x08008808

080037e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80037e6:	f7ff ffcd 	bl	8003784 <HAL_RCC_GetHCLKFreq>
 80037ea:	4601      	mov	r1, r0
 80037ec:	4b0b      	ldr	r3, [pc, #44]	; (800381c <HAL_RCC_GetPCLK2Freq+0x3c>)
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80037f4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80037f8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	fa92 f2a2 	rbit	r2, r2
 8003800:	603a      	str	r2, [r7, #0]
  return result;
 8003802:	683a      	ldr	r2, [r7, #0]
 8003804:	fab2 f282 	clz	r2, r2
 8003808:	b2d2      	uxtb	r2, r2
 800380a:	40d3      	lsrs	r3, r2
 800380c:	4a04      	ldr	r2, [pc, #16]	; (8003820 <HAL_RCC_GetPCLK2Freq+0x40>)
 800380e:	5cd3      	ldrb	r3, [r2, r3]
 8003810:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003814:	4618      	mov	r0, r3
 8003816:	3708      	adds	r7, #8
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}
 800381c:	40021000 	.word	0x40021000
 8003820:	08008808 	.word	0x08008808

08003824 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b092      	sub	sp, #72	; 0x48
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800382c:	2300      	movs	r3, #0
 800382e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003830:	2300      	movs	r3, #0
 8003832:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800383c:	2b00      	cmp	r3, #0
 800383e:	f000 80d0 	beq.w	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003842:	2300      	movs	r3, #0
 8003844:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003848:	4b86      	ldr	r3, [pc, #536]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800384a:	69db      	ldr	r3, [r3, #28]
 800384c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003850:	2b00      	cmp	r3, #0
 8003852:	d10e      	bne.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003854:	4b83      	ldr	r3, [pc, #524]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003856:	69db      	ldr	r3, [r3, #28]
 8003858:	4a82      	ldr	r2, [pc, #520]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800385a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800385e:	61d3      	str	r3, [r2, #28]
 8003860:	4b80      	ldr	r3, [pc, #512]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003862:	69db      	ldr	r3, [r3, #28]
 8003864:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003868:	60bb      	str	r3, [r7, #8]
 800386a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800386c:	2301      	movs	r3, #1
 800386e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003872:	4b7d      	ldr	r3, [pc, #500]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800387a:	2b00      	cmp	r3, #0
 800387c:	d118      	bne.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800387e:	4b7a      	ldr	r3, [pc, #488]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a79      	ldr	r2, [pc, #484]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003884:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003888:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800388a:	f7fd ffcb 	bl	8001824 <HAL_GetTick>
 800388e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003890:	e008      	b.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003892:	f7fd ffc7 	bl	8001824 <HAL_GetTick>
 8003896:	4602      	mov	r2, r0
 8003898:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	2b64      	cmp	r3, #100	; 0x64
 800389e:	d901      	bls.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80038a0:	2303      	movs	r3, #3
 80038a2:	e0db      	b.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038a4:	4b70      	ldr	r3, [pc, #448]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d0f0      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80038b0:	4b6c      	ldr	r3, [pc, #432]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038b2:	6a1b      	ldr	r3, [r3, #32]
 80038b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038b8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80038ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d07d      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x198>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d076      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80038ce:	4b65      	ldr	r3, [pc, #404]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038d0:	6a1b      	ldr	r3, [r3, #32]
 80038d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80038dc:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038e0:	fa93 f3a3 	rbit	r3, r3
 80038e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80038e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80038e8:	fab3 f383 	clz	r3, r3
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	461a      	mov	r2, r3
 80038f0:	4b5e      	ldr	r3, [pc, #376]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80038f2:	4413      	add	r3, r2
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	461a      	mov	r2, r3
 80038f8:	2301      	movs	r3, #1
 80038fa:	6013      	str	r3, [r2, #0]
 80038fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003900:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003904:	fa93 f3a3 	rbit	r3, r3
 8003908:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800390a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800390c:	fab3 f383 	clz	r3, r3
 8003910:	b2db      	uxtb	r3, r3
 8003912:	461a      	mov	r2, r3
 8003914:	4b55      	ldr	r3, [pc, #340]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003916:	4413      	add	r3, r2
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	461a      	mov	r2, r3
 800391c:	2300      	movs	r3, #0
 800391e:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003920:	4a50      	ldr	r2, [pc, #320]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003922:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003924:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003926:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003928:	f003 0301 	and.w	r3, r3, #1
 800392c:	2b00      	cmp	r3, #0
 800392e:	d045      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003930:	f7fd ff78 	bl	8001824 <HAL_GetTick>
 8003934:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003936:	e00a      	b.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003938:	f7fd ff74 	bl	8001824 <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	f241 3288 	movw	r2, #5000	; 0x1388
 8003946:	4293      	cmp	r3, r2
 8003948:	d901      	bls.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e086      	b.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x238>
 800394e:	2302      	movs	r3, #2
 8003950:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003954:	fa93 f3a3 	rbit	r3, r3
 8003958:	627b      	str	r3, [r7, #36]	; 0x24
 800395a:	2302      	movs	r3, #2
 800395c:	623b      	str	r3, [r7, #32]
 800395e:	6a3b      	ldr	r3, [r7, #32]
 8003960:	fa93 f3a3 	rbit	r3, r3
 8003964:	61fb      	str	r3, [r7, #28]
  return result;
 8003966:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003968:	fab3 f383 	clz	r3, r3
 800396c:	b2db      	uxtb	r3, r3
 800396e:	095b      	lsrs	r3, r3, #5
 8003970:	b2db      	uxtb	r3, r3
 8003972:	f043 0302 	orr.w	r3, r3, #2
 8003976:	b2db      	uxtb	r3, r3
 8003978:	2b02      	cmp	r3, #2
 800397a:	d102      	bne.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800397c:	4b39      	ldr	r3, [pc, #228]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800397e:	6a1b      	ldr	r3, [r3, #32]
 8003980:	e007      	b.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003982:	2302      	movs	r3, #2
 8003984:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	fa93 f3a3 	rbit	r3, r3
 800398c:	617b      	str	r3, [r7, #20]
 800398e:	4b35      	ldr	r3, [pc, #212]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003992:	2202      	movs	r2, #2
 8003994:	613a      	str	r2, [r7, #16]
 8003996:	693a      	ldr	r2, [r7, #16]
 8003998:	fa92 f2a2 	rbit	r2, r2
 800399c:	60fa      	str	r2, [r7, #12]
  return result;
 800399e:	68fa      	ldr	r2, [r7, #12]
 80039a0:	fab2 f282 	clz	r2, r2
 80039a4:	b2d2      	uxtb	r2, r2
 80039a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039aa:	b2d2      	uxtb	r2, r2
 80039ac:	f002 021f 	and.w	r2, r2, #31
 80039b0:	2101      	movs	r1, #1
 80039b2:	fa01 f202 	lsl.w	r2, r1, r2
 80039b6:	4013      	ands	r3, r2
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d0bd      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80039bc:	4b29      	ldr	r3, [pc, #164]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80039be:	6a1b      	ldr	r3, [r3, #32]
 80039c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	4926      	ldr	r1, [pc, #152]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80039ce:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d105      	bne.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039d6:	4b23      	ldr	r3, [pc, #140]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80039d8:	69db      	ldr	r3, [r3, #28]
 80039da:	4a22      	ldr	r2, [pc, #136]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80039dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039e0:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0301 	and.w	r3, r3, #1
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d008      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80039ee:	4b1d      	ldr	r3, [pc, #116]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80039f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f2:	f023 0203 	bic.w	r2, r3, #3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	491a      	ldr	r1, [pc, #104]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0320 	and.w	r3, r3, #32
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d008      	beq.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a0c:	4b15      	ldr	r3, [pc, #84]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a10:	f023 0210 	bic.w	r2, r3, #16
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	4912      	ldr	r1, [pc, #72]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d008      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003a2a:	4b0e      	ldr	r3, [pc, #56]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a2e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	490b      	ldr	r1, [pc, #44]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d008      	beq.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003a48:	4b06      	ldr	r3, [pc, #24]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	695b      	ldr	r3, [r3, #20]
 8003a54:	4903      	ldr	r1, [pc, #12]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a56:	4313      	orrs	r3, r2
 8003a58:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003a5a:	2300      	movs	r3, #0
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3748      	adds	r7, #72	; 0x48
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	40021000 	.word	0x40021000
 8003a68:	40007000 	.word	0x40007000
 8003a6c:	10908100 	.word	0x10908100

08003a70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d101      	bne.n	8003a82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e040      	b.n	8003b04 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d106      	bne.n	8003a98 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f7fd fdfe 	bl	8001694 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2224      	movs	r2, #36	; 0x24
 8003a9c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f022 0201 	bic.w	r2, r2, #1
 8003aac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f000 f8c0 	bl	8003c34 <UART_SetConfig>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d101      	bne.n	8003abe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e022      	b.n	8003b04 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d002      	beq.n	8003acc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f000 fa36 	bl	8003f38 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	685a      	ldr	r2, [r3, #4]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ada:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	689a      	ldr	r2, [r3, #8]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003aea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f042 0201 	orr.w	r2, r2, #1
 8003afa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f000 fabd 	bl	800407c <UART_CheckIdleState>
 8003b02:	4603      	mov	r3, r0
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3708      	adds	r7, #8
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b08a      	sub	sp, #40	; 0x28
 8003b10:	af02      	add	r7, sp, #8
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	60b9      	str	r1, [r7, #8]
 8003b16:	603b      	str	r3, [r7, #0]
 8003b18:	4613      	mov	r3, r2
 8003b1a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b20:	2b20      	cmp	r3, #32
 8003b22:	f040 8081 	bne.w	8003c28 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d002      	beq.n	8003b32 <HAL_UART_Transmit+0x26>
 8003b2c:	88fb      	ldrh	r3, [r7, #6]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d101      	bne.n	8003b36 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e079      	b.n	8003c2a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d101      	bne.n	8003b44 <HAL_UART_Transmit+0x38>
 8003b40:	2302      	movs	r3, #2
 8003b42:	e072      	b.n	8003c2a <HAL_UART_Transmit+0x11e>
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2221      	movs	r2, #33	; 0x21
 8003b56:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003b58:	f7fd fe64 	bl	8001824 <HAL_GetTick>
 8003b5c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	88fa      	ldrh	r2, [r7, #6]
 8003b62:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	88fa      	ldrh	r2, [r7, #6]
 8003b6a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b76:	d108      	bne.n	8003b8a <HAL_UART_Transmit+0x7e>
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	691b      	ldr	r3, [r3, #16]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d104      	bne.n	8003b8a <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8003b80:	2300      	movs	r3, #0
 8003b82:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	61bb      	str	r3, [r7, #24]
 8003b88:	e003      	b.n	8003b92 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003b92:	e02d      	b.n	8003bf0 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	9300      	str	r3, [sp, #0]
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	2180      	movs	r1, #128	; 0x80
 8003b9e:	68f8      	ldr	r0, [r7, #12]
 8003ba0:	f000 fab1 	bl	8004106 <UART_WaitOnFlagUntilTimeout>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d001      	beq.n	8003bae <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e03d      	b.n	8003c2a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d10b      	bne.n	8003bcc <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003bb4:	69bb      	ldr	r3, [r7, #24]
 8003bb6:	881a      	ldrh	r2, [r3, #0]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bc0:	b292      	uxth	r2, r2
 8003bc2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	3302      	adds	r3, #2
 8003bc8:	61bb      	str	r3, [r7, #24]
 8003bca:	e008      	b.n	8003bde <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	781a      	ldrb	r2, [r3, #0]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	b292      	uxth	r2, r2
 8003bd6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	3301      	adds	r3, #1
 8003bdc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	3b01      	subs	r3, #1
 8003be8:	b29a      	uxth	r2, r3
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d1cb      	bne.n	8003b94 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	9300      	str	r3, [sp, #0]
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	2200      	movs	r2, #0
 8003c04:	2140      	movs	r1, #64	; 0x40
 8003c06:	68f8      	ldr	r0, [r7, #12]
 8003c08:	f000 fa7d 	bl	8004106 <UART_WaitOnFlagUntilTimeout>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d001      	beq.n	8003c16 <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	e009      	b.n	8003c2a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2220      	movs	r2, #32
 8003c1a:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8003c24:	2300      	movs	r3, #0
 8003c26:	e000      	b.n	8003c2a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003c28:	2302      	movs	r3, #2
  }
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3720      	adds	r7, #32
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
	...

08003c34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b088      	sub	sp, #32
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c40:	2300      	movs	r3, #0
 8003c42:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	689a      	ldr	r2, [r3, #8]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	691b      	ldr	r3, [r3, #16]
 8003c4c:	431a      	orrs	r2, r3
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	695b      	ldr	r3, [r3, #20]
 8003c52:	431a      	orrs	r2, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	69db      	ldr	r3, [r3, #28]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	4ba2      	ldr	r3, [pc, #648]	; (8003eec <UART_SetConfig+0x2b8>)
 8003c64:	4013      	ands	r3, r2
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	6812      	ldr	r2, [r2, #0]
 8003c6a:	6939      	ldr	r1, [r7, #16]
 8003c6c:	430b      	orrs	r3, r1
 8003c6e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	68da      	ldr	r2, [r3, #12]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	430a      	orrs	r2, r1
 8003c84:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	699b      	ldr	r3, [r3, #24]
 8003c8a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6a1b      	ldr	r3, [r3, #32]
 8003c90:	693a      	ldr	r2, [r7, #16]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	693a      	ldr	r2, [r7, #16]
 8003ca6:	430a      	orrs	r2, r1
 8003ca8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a90      	ldr	r2, [pc, #576]	; (8003ef0 <UART_SetConfig+0x2bc>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d121      	bne.n	8003cf8 <UART_SetConfig+0xc4>
 8003cb4:	4b8f      	ldr	r3, [pc, #572]	; (8003ef4 <UART_SetConfig+0x2c0>)
 8003cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb8:	f003 0303 	and.w	r3, r3, #3
 8003cbc:	2b03      	cmp	r3, #3
 8003cbe:	d817      	bhi.n	8003cf0 <UART_SetConfig+0xbc>
 8003cc0:	a201      	add	r2, pc, #4	; (adr r2, 8003cc8 <UART_SetConfig+0x94>)
 8003cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cc6:	bf00      	nop
 8003cc8:	08003cd9 	.word	0x08003cd9
 8003ccc:	08003ce5 	.word	0x08003ce5
 8003cd0:	08003ceb 	.word	0x08003ceb
 8003cd4:	08003cdf 	.word	0x08003cdf
 8003cd8:	2300      	movs	r3, #0
 8003cda:	77fb      	strb	r3, [r7, #31]
 8003cdc:	e01e      	b.n	8003d1c <UART_SetConfig+0xe8>
 8003cde:	2302      	movs	r3, #2
 8003ce0:	77fb      	strb	r3, [r7, #31]
 8003ce2:	e01b      	b.n	8003d1c <UART_SetConfig+0xe8>
 8003ce4:	2304      	movs	r3, #4
 8003ce6:	77fb      	strb	r3, [r7, #31]
 8003ce8:	e018      	b.n	8003d1c <UART_SetConfig+0xe8>
 8003cea:	2308      	movs	r3, #8
 8003cec:	77fb      	strb	r3, [r7, #31]
 8003cee:	e015      	b.n	8003d1c <UART_SetConfig+0xe8>
 8003cf0:	2310      	movs	r3, #16
 8003cf2:	77fb      	strb	r3, [r7, #31]
 8003cf4:	bf00      	nop
 8003cf6:	e011      	b.n	8003d1c <UART_SetConfig+0xe8>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a7e      	ldr	r2, [pc, #504]	; (8003ef8 <UART_SetConfig+0x2c4>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d102      	bne.n	8003d08 <UART_SetConfig+0xd4>
 8003d02:	2300      	movs	r3, #0
 8003d04:	77fb      	strb	r3, [r7, #31]
 8003d06:	e009      	b.n	8003d1c <UART_SetConfig+0xe8>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a7b      	ldr	r2, [pc, #492]	; (8003efc <UART_SetConfig+0x2c8>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d102      	bne.n	8003d18 <UART_SetConfig+0xe4>
 8003d12:	2300      	movs	r3, #0
 8003d14:	77fb      	strb	r3, [r7, #31]
 8003d16:	e001      	b.n	8003d1c <UART_SetConfig+0xe8>
 8003d18:	2310      	movs	r3, #16
 8003d1a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	69db      	ldr	r3, [r3, #28]
 8003d20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d24:	f040 8082 	bne.w	8003e2c <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8003d28:	7ffb      	ldrb	r3, [r7, #31]
 8003d2a:	2b08      	cmp	r3, #8
 8003d2c:	d85e      	bhi.n	8003dec <UART_SetConfig+0x1b8>
 8003d2e:	a201      	add	r2, pc, #4	; (adr r2, 8003d34 <UART_SetConfig+0x100>)
 8003d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d34:	08003d59 	.word	0x08003d59
 8003d38:	08003d79 	.word	0x08003d79
 8003d3c:	08003d99 	.word	0x08003d99
 8003d40:	08003ded 	.word	0x08003ded
 8003d44:	08003db5 	.word	0x08003db5
 8003d48:	08003ded 	.word	0x08003ded
 8003d4c:	08003ded 	.word	0x08003ded
 8003d50:	08003ded 	.word	0x08003ded
 8003d54:	08003dd5 	.word	0x08003dd5
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d58:	f7ff fd20 	bl	800379c <HAL_RCC_GetPCLK1Freq>
 8003d5c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	005a      	lsls	r2, r3, #1
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	085b      	lsrs	r3, r3, #1
 8003d68:	441a      	add	r2, r3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	61bb      	str	r3, [r7, #24]
        break;
 8003d76:	e03c      	b.n	8003df2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d78:	f7ff fd32 	bl	80037e0 <HAL_RCC_GetPCLK2Freq>
 8003d7c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	005a      	lsls	r2, r3, #1
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	085b      	lsrs	r3, r3, #1
 8003d88:	441a      	add	r2, r3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	61bb      	str	r3, [r7, #24]
        break;
 8003d96:	e02c      	b.n	8003df2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	085b      	lsrs	r3, r3, #1
 8003d9e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8003da2:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	6852      	ldr	r2, [r2, #4]
 8003daa:	fbb3 f3f2 	udiv	r3, r3, r2
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	61bb      	str	r3, [r7, #24]
        break;
 8003db2:	e01e      	b.n	8003df2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003db4:	f7ff fc7c 	bl	80036b0 <HAL_RCC_GetSysClockFreq>
 8003db8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	005a      	lsls	r2, r3, #1
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	085b      	lsrs	r3, r3, #1
 8003dc4:	441a      	add	r2, r3
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	61bb      	str	r3, [r7, #24]
        break;
 8003dd2:	e00e      	b.n	8003df2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	085b      	lsrs	r3, r3, #1
 8003dda:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	61bb      	str	r3, [r7, #24]
        break;
 8003dea:	e002      	b.n	8003df2 <UART_SetConfig+0x1be>
      default:
        ret = HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	75fb      	strb	r3, [r7, #23]
        break;
 8003df0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003df2:	69bb      	ldr	r3, [r7, #24]
 8003df4:	2b0f      	cmp	r3, #15
 8003df6:	d916      	bls.n	8003e26 <UART_SetConfig+0x1f2>
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dfe:	d212      	bcs.n	8003e26 <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	f023 030f 	bic.w	r3, r3, #15
 8003e08:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	085b      	lsrs	r3, r3, #1
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	f003 0307 	and.w	r3, r3, #7
 8003e14:	b29a      	uxth	r2, r3
 8003e16:	897b      	ldrh	r3, [r7, #10]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	897a      	ldrh	r2, [r7, #10]
 8003e22:	60da      	str	r2, [r3, #12]
 8003e24:	e07d      	b.n	8003f22 <UART_SetConfig+0x2ee>
    }
    else
    {
      ret = HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	75fb      	strb	r3, [r7, #23]
 8003e2a:	e07a      	b.n	8003f22 <UART_SetConfig+0x2ee>
    }
  }
  else
  {
    switch (clocksource)
 8003e2c:	7ffb      	ldrb	r3, [r7, #31]
 8003e2e:	2b08      	cmp	r3, #8
 8003e30:	d866      	bhi.n	8003f00 <UART_SetConfig+0x2cc>
 8003e32:	a201      	add	r2, pc, #4	; (adr r2, 8003e38 <UART_SetConfig+0x204>)
 8003e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e38:	08003e5d 	.word	0x08003e5d
 8003e3c:	08003e7b 	.word	0x08003e7b
 8003e40:	08003e99 	.word	0x08003e99
 8003e44:	08003f01 	.word	0x08003f01
 8003e48:	08003eb5 	.word	0x08003eb5
 8003e4c:	08003f01 	.word	0x08003f01
 8003e50:	08003f01 	.word	0x08003f01
 8003e54:	08003f01 	.word	0x08003f01
 8003e58:	08003ed3 	.word	0x08003ed3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e5c:	f7ff fc9e 	bl	800379c <HAL_RCC_GetPCLK1Freq>
 8003e60:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	085a      	lsrs	r2, r3, #1
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	441a      	add	r2, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	61bb      	str	r3, [r7, #24]
        break;
 8003e78:	e045      	b.n	8003f06 <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e7a:	f7ff fcb1 	bl	80037e0 <HAL_RCC_GetPCLK2Freq>
 8003e7e:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	085a      	lsrs	r2, r3, #1
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	441a      	add	r2, r3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	61bb      	str	r3, [r7, #24]
        break;
 8003e96:	e036      	b.n	8003f06 <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	085b      	lsrs	r3, r3, #1
 8003e9e:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8003ea2:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	6852      	ldr	r2, [r2, #4]
 8003eaa:	fbb3 f3f2 	udiv	r3, r3, r2
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	61bb      	str	r3, [r7, #24]
        break;
 8003eb2:	e028      	b.n	8003f06 <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003eb4:	f7ff fbfc 	bl	80036b0 <HAL_RCC_GetSysClockFreq>
 8003eb8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	085a      	lsrs	r2, r3, #1
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	441a      	add	r2, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	61bb      	str	r3, [r7, #24]
        break;
 8003ed0:	e019      	b.n	8003f06 <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	085b      	lsrs	r3, r3, #1
 8003ed8:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	61bb      	str	r3, [r7, #24]
        break;
 8003ee8:	e00d      	b.n	8003f06 <UART_SetConfig+0x2d2>
 8003eea:	bf00      	nop
 8003eec:	efff69f3 	.word	0xefff69f3
 8003ef0:	40013800 	.word	0x40013800
 8003ef4:	40021000 	.word	0x40021000
 8003ef8:	40004400 	.word	0x40004400
 8003efc:	40004800 	.word	0x40004800
      default:
        ret = HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	75fb      	strb	r3, [r7, #23]
        break;
 8003f04:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f06:	69bb      	ldr	r3, [r7, #24]
 8003f08:	2b0f      	cmp	r3, #15
 8003f0a:	d908      	bls.n	8003f1e <UART_SetConfig+0x2ea>
 8003f0c:	69bb      	ldr	r3, [r7, #24]
 8003f0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f12:	d204      	bcs.n	8003f1e <UART_SetConfig+0x2ea>
    {
      huart->Instance->BRR = usartdiv;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	69ba      	ldr	r2, [r7, #24]
 8003f1a:	60da      	str	r2, [r3, #12]
 8003f1c:	e001      	b.n	8003f22 <UART_SetConfig+0x2ee>
    }
    else
    {
      ret = HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003f2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3720      	adds	r7, #32
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f44:	f003 0301 	and.w	r3, r3, #1
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d00a      	beq.n	8003f62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	430a      	orrs	r2, r1
 8003f60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f66:	f003 0302 	and.w	r3, r3, #2
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d00a      	beq.n	8003f84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	430a      	orrs	r2, r1
 8003f82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f88:	f003 0304 	and.w	r3, r3, #4
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d00a      	beq.n	8003fa6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	430a      	orrs	r2, r1
 8003fa4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003faa:	f003 0308 	and.w	r3, r3, #8
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d00a      	beq.n	8003fc8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	430a      	orrs	r2, r1
 8003fc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fcc:	f003 0310 	and.w	r3, r3, #16
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d00a      	beq.n	8003fea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	430a      	orrs	r2, r1
 8003fe8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fee:	f003 0320 	and.w	r3, r3, #32
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d00a      	beq.n	800400c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	430a      	orrs	r2, r1
 800400a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004014:	2b00      	cmp	r3, #0
 8004016:	d01a      	beq.n	800404e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	430a      	orrs	r2, r1
 800402c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004032:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004036:	d10a      	bne.n	800404e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	430a      	orrs	r2, r1
 800404c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004056:	2b00      	cmp	r3, #0
 8004058:	d00a      	beq.n	8004070 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	430a      	orrs	r2, r1
 800406e:	605a      	str	r2, [r3, #4]
  }
}
 8004070:	bf00      	nop
 8004072:	370c      	adds	r7, #12
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr

0800407c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b086      	sub	sp, #24
 8004080:	af02      	add	r7, sp, #8
 8004082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800408a:	f7fd fbcb 	bl	8001824 <HAL_GetTick>
 800408e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0308 	and.w	r3, r3, #8
 800409a:	2b08      	cmp	r3, #8
 800409c:	d10e      	bne.n	80040bc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800409e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80040a2:	9300      	str	r3, [sp, #0]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f000 f82a 	bl	8004106 <UART_WaitOnFlagUntilTimeout>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d001      	beq.n	80040bc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040b8:	2303      	movs	r3, #3
 80040ba:	e020      	b.n	80040fe <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0304 	and.w	r3, r3, #4
 80040c6:	2b04      	cmp	r3, #4
 80040c8:	d10e      	bne.n	80040e8 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040ca:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80040ce:	9300      	str	r3, [sp, #0]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f000 f814 	bl	8004106 <UART_WaitOnFlagUntilTimeout>
 80040de:	4603      	mov	r3, r0
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d001      	beq.n	80040e8 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	e00a      	b.n	80040fe <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2220      	movs	r2, #32
 80040ec:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2220      	movs	r2, #32
 80040f2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80040fc:	2300      	movs	r3, #0
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3710      	adds	r7, #16
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}

08004106 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004106:	b580      	push	{r7, lr}
 8004108:	b084      	sub	sp, #16
 800410a:	af00      	add	r7, sp, #0
 800410c:	60f8      	str	r0, [r7, #12]
 800410e:	60b9      	str	r1, [r7, #8]
 8004110:	603b      	str	r3, [r7, #0]
 8004112:	4613      	mov	r3, r2
 8004114:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004116:	e05d      	b.n	80041d4 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004118:	69bb      	ldr	r3, [r7, #24]
 800411a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800411e:	d059      	beq.n	80041d4 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004120:	f7fd fb80 	bl	8001824 <HAL_GetTick>
 8004124:	4602      	mov	r2, r0
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	69ba      	ldr	r2, [r7, #24]
 800412c:	429a      	cmp	r2, r3
 800412e:	d302      	bcc.n	8004136 <UART_WaitOnFlagUntilTimeout+0x30>
 8004130:	69bb      	ldr	r3, [r7, #24]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d11b      	bne.n	800416e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004144:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	689a      	ldr	r2, [r3, #8]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f022 0201 	bic.w	r2, r2, #1
 8004154:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2220      	movs	r2, #32
 800415a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2220      	movs	r2, #32
 8004160:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2200      	movs	r2, #0
 8004166:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	e042      	b.n	80041f4 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0304 	and.w	r3, r3, #4
 8004178:	2b00      	cmp	r3, #0
 800417a:	d02b      	beq.n	80041d4 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	69db      	ldr	r3, [r3, #28]
 8004182:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004186:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800418a:	d123      	bne.n	80041d4 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004194:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80041a4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	689a      	ldr	r2, [r3, #8]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f022 0201 	bic.w	r2, r2, #1
 80041b4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2220      	movs	r2, #32
 80041ba:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2220      	movs	r2, #32
 80041c0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2220      	movs	r2, #32
 80041c6:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2200      	movs	r2, #0
 80041cc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80041d0:	2303      	movs	r3, #3
 80041d2:	e00f      	b.n	80041f4 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	69da      	ldr	r2, [r3, #28]
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	4013      	ands	r3, r2
 80041de:	68ba      	ldr	r2, [r7, #8]
 80041e0:	429a      	cmp	r2, r3
 80041e2:	bf0c      	ite	eq
 80041e4:	2301      	moveq	r3, #1
 80041e6:	2300      	movne	r3, #0
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	461a      	mov	r2, r3
 80041ec:	79fb      	ldrb	r3, [r7, #7]
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d092      	beq.n	8004118 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041f2:	2300      	movs	r3, #0
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3710      	adds	r7, #16
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}

080041fc <__errno>:
 80041fc:	4b01      	ldr	r3, [pc, #4]	; (8004204 <__errno+0x8>)
 80041fe:	6818      	ldr	r0, [r3, #0]
 8004200:	4770      	bx	lr
 8004202:	bf00      	nop
 8004204:	2000000c 	.word	0x2000000c

08004208 <__libc_init_array>:
 8004208:	b570      	push	{r4, r5, r6, lr}
 800420a:	4e0d      	ldr	r6, [pc, #52]	; (8004240 <__libc_init_array+0x38>)
 800420c:	4c0d      	ldr	r4, [pc, #52]	; (8004244 <__libc_init_array+0x3c>)
 800420e:	1ba4      	subs	r4, r4, r6
 8004210:	10a4      	asrs	r4, r4, #2
 8004212:	2500      	movs	r5, #0
 8004214:	42a5      	cmp	r5, r4
 8004216:	d109      	bne.n	800422c <__libc_init_array+0x24>
 8004218:	4e0b      	ldr	r6, [pc, #44]	; (8004248 <__libc_init_array+0x40>)
 800421a:	4c0c      	ldr	r4, [pc, #48]	; (800424c <__libc_init_array+0x44>)
 800421c:	f004 fa5e 	bl	80086dc <_init>
 8004220:	1ba4      	subs	r4, r4, r6
 8004222:	10a4      	asrs	r4, r4, #2
 8004224:	2500      	movs	r5, #0
 8004226:	42a5      	cmp	r5, r4
 8004228:	d105      	bne.n	8004236 <__libc_init_array+0x2e>
 800422a:	bd70      	pop	{r4, r5, r6, pc}
 800422c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004230:	4798      	blx	r3
 8004232:	3501      	adds	r5, #1
 8004234:	e7ee      	b.n	8004214 <__libc_init_array+0xc>
 8004236:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800423a:	4798      	blx	r3
 800423c:	3501      	adds	r5, #1
 800423e:	e7f2      	b.n	8004226 <__libc_init_array+0x1e>
 8004240:	08008b50 	.word	0x08008b50
 8004244:	08008b50 	.word	0x08008b50
 8004248:	08008b50 	.word	0x08008b50
 800424c:	08008b54 	.word	0x08008b54

08004250 <memcpy>:
 8004250:	b510      	push	{r4, lr}
 8004252:	1e43      	subs	r3, r0, #1
 8004254:	440a      	add	r2, r1
 8004256:	4291      	cmp	r1, r2
 8004258:	d100      	bne.n	800425c <memcpy+0xc>
 800425a:	bd10      	pop	{r4, pc}
 800425c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004260:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004264:	e7f7      	b.n	8004256 <memcpy+0x6>

08004266 <memset>:
 8004266:	4402      	add	r2, r0
 8004268:	4603      	mov	r3, r0
 800426a:	4293      	cmp	r3, r2
 800426c:	d100      	bne.n	8004270 <memset+0xa>
 800426e:	4770      	bx	lr
 8004270:	f803 1b01 	strb.w	r1, [r3], #1
 8004274:	e7f9      	b.n	800426a <memset+0x4>

08004276 <__cvt>:
 8004276:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800427a:	ec55 4b10 	vmov	r4, r5, d0
 800427e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8004280:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004284:	2d00      	cmp	r5, #0
 8004286:	460e      	mov	r6, r1
 8004288:	4691      	mov	r9, r2
 800428a:	4619      	mov	r1, r3
 800428c:	bfb8      	it	lt
 800428e:	4622      	movlt	r2, r4
 8004290:	462b      	mov	r3, r5
 8004292:	f027 0720 	bic.w	r7, r7, #32
 8004296:	bfbb      	ittet	lt
 8004298:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800429c:	461d      	movlt	r5, r3
 800429e:	2300      	movge	r3, #0
 80042a0:	232d      	movlt	r3, #45	; 0x2d
 80042a2:	bfb8      	it	lt
 80042a4:	4614      	movlt	r4, r2
 80042a6:	2f46      	cmp	r7, #70	; 0x46
 80042a8:	700b      	strb	r3, [r1, #0]
 80042aa:	d004      	beq.n	80042b6 <__cvt+0x40>
 80042ac:	2f45      	cmp	r7, #69	; 0x45
 80042ae:	d100      	bne.n	80042b2 <__cvt+0x3c>
 80042b0:	3601      	adds	r6, #1
 80042b2:	2102      	movs	r1, #2
 80042b4:	e000      	b.n	80042b8 <__cvt+0x42>
 80042b6:	2103      	movs	r1, #3
 80042b8:	ab03      	add	r3, sp, #12
 80042ba:	9301      	str	r3, [sp, #4]
 80042bc:	ab02      	add	r3, sp, #8
 80042be:	9300      	str	r3, [sp, #0]
 80042c0:	4632      	mov	r2, r6
 80042c2:	4653      	mov	r3, sl
 80042c4:	ec45 4b10 	vmov	d0, r4, r5
 80042c8:	f001 feb2 	bl	8006030 <_dtoa_r>
 80042cc:	2f47      	cmp	r7, #71	; 0x47
 80042ce:	4680      	mov	r8, r0
 80042d0:	d102      	bne.n	80042d8 <__cvt+0x62>
 80042d2:	f019 0f01 	tst.w	r9, #1
 80042d6:	d026      	beq.n	8004326 <__cvt+0xb0>
 80042d8:	2f46      	cmp	r7, #70	; 0x46
 80042da:	eb08 0906 	add.w	r9, r8, r6
 80042de:	d111      	bne.n	8004304 <__cvt+0x8e>
 80042e0:	f898 3000 	ldrb.w	r3, [r8]
 80042e4:	2b30      	cmp	r3, #48	; 0x30
 80042e6:	d10a      	bne.n	80042fe <__cvt+0x88>
 80042e8:	2200      	movs	r2, #0
 80042ea:	2300      	movs	r3, #0
 80042ec:	4620      	mov	r0, r4
 80042ee:	4629      	mov	r1, r5
 80042f0:	f7fc fbea 	bl	8000ac8 <__aeabi_dcmpeq>
 80042f4:	b918      	cbnz	r0, 80042fe <__cvt+0x88>
 80042f6:	f1c6 0601 	rsb	r6, r6, #1
 80042fa:	f8ca 6000 	str.w	r6, [sl]
 80042fe:	f8da 3000 	ldr.w	r3, [sl]
 8004302:	4499      	add	r9, r3
 8004304:	2200      	movs	r2, #0
 8004306:	2300      	movs	r3, #0
 8004308:	4620      	mov	r0, r4
 800430a:	4629      	mov	r1, r5
 800430c:	f7fc fbdc 	bl	8000ac8 <__aeabi_dcmpeq>
 8004310:	b938      	cbnz	r0, 8004322 <__cvt+0xac>
 8004312:	2230      	movs	r2, #48	; 0x30
 8004314:	9b03      	ldr	r3, [sp, #12]
 8004316:	454b      	cmp	r3, r9
 8004318:	d205      	bcs.n	8004326 <__cvt+0xb0>
 800431a:	1c59      	adds	r1, r3, #1
 800431c:	9103      	str	r1, [sp, #12]
 800431e:	701a      	strb	r2, [r3, #0]
 8004320:	e7f8      	b.n	8004314 <__cvt+0x9e>
 8004322:	f8cd 900c 	str.w	r9, [sp, #12]
 8004326:	9b03      	ldr	r3, [sp, #12]
 8004328:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800432a:	eba3 0308 	sub.w	r3, r3, r8
 800432e:	4640      	mov	r0, r8
 8004330:	6013      	str	r3, [r2, #0]
 8004332:	b004      	add	sp, #16
 8004334:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004338 <__exponent>:
 8004338:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800433a:	2900      	cmp	r1, #0
 800433c:	4604      	mov	r4, r0
 800433e:	bfba      	itte	lt
 8004340:	4249      	neglt	r1, r1
 8004342:	232d      	movlt	r3, #45	; 0x2d
 8004344:	232b      	movge	r3, #43	; 0x2b
 8004346:	2909      	cmp	r1, #9
 8004348:	f804 2b02 	strb.w	r2, [r4], #2
 800434c:	7043      	strb	r3, [r0, #1]
 800434e:	dd20      	ble.n	8004392 <__exponent+0x5a>
 8004350:	f10d 0307 	add.w	r3, sp, #7
 8004354:	461f      	mov	r7, r3
 8004356:	260a      	movs	r6, #10
 8004358:	fb91 f5f6 	sdiv	r5, r1, r6
 800435c:	fb06 1115 	mls	r1, r6, r5, r1
 8004360:	3130      	adds	r1, #48	; 0x30
 8004362:	2d09      	cmp	r5, #9
 8004364:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004368:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800436c:	4629      	mov	r1, r5
 800436e:	dc09      	bgt.n	8004384 <__exponent+0x4c>
 8004370:	3130      	adds	r1, #48	; 0x30
 8004372:	3b02      	subs	r3, #2
 8004374:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004378:	42bb      	cmp	r3, r7
 800437a:	4622      	mov	r2, r4
 800437c:	d304      	bcc.n	8004388 <__exponent+0x50>
 800437e:	1a10      	subs	r0, r2, r0
 8004380:	b003      	add	sp, #12
 8004382:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004384:	4613      	mov	r3, r2
 8004386:	e7e7      	b.n	8004358 <__exponent+0x20>
 8004388:	f813 2b01 	ldrb.w	r2, [r3], #1
 800438c:	f804 2b01 	strb.w	r2, [r4], #1
 8004390:	e7f2      	b.n	8004378 <__exponent+0x40>
 8004392:	2330      	movs	r3, #48	; 0x30
 8004394:	4419      	add	r1, r3
 8004396:	7083      	strb	r3, [r0, #2]
 8004398:	1d02      	adds	r2, r0, #4
 800439a:	70c1      	strb	r1, [r0, #3]
 800439c:	e7ef      	b.n	800437e <__exponent+0x46>
	...

080043a0 <_printf_float>:
 80043a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043a4:	b08d      	sub	sp, #52	; 0x34
 80043a6:	460c      	mov	r4, r1
 80043a8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80043ac:	4616      	mov	r6, r2
 80043ae:	461f      	mov	r7, r3
 80043b0:	4605      	mov	r5, r0
 80043b2:	f003 f89b 	bl	80074ec <_localeconv_r>
 80043b6:	6803      	ldr	r3, [r0, #0]
 80043b8:	9304      	str	r3, [sp, #16]
 80043ba:	4618      	mov	r0, r3
 80043bc:	f7fb ff08 	bl	80001d0 <strlen>
 80043c0:	2300      	movs	r3, #0
 80043c2:	930a      	str	r3, [sp, #40]	; 0x28
 80043c4:	f8d8 3000 	ldr.w	r3, [r8]
 80043c8:	9005      	str	r0, [sp, #20]
 80043ca:	3307      	adds	r3, #7
 80043cc:	f023 0307 	bic.w	r3, r3, #7
 80043d0:	f103 0208 	add.w	r2, r3, #8
 80043d4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80043d8:	f8d4 b000 	ldr.w	fp, [r4]
 80043dc:	f8c8 2000 	str.w	r2, [r8]
 80043e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80043e8:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80043ec:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80043f0:	9307      	str	r3, [sp, #28]
 80043f2:	f8cd 8018 	str.w	r8, [sp, #24]
 80043f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80043fa:	4ba7      	ldr	r3, [pc, #668]	; (8004698 <_printf_float+0x2f8>)
 80043fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004400:	f7fc fb94 	bl	8000b2c <__aeabi_dcmpun>
 8004404:	bb70      	cbnz	r0, 8004464 <_printf_float+0xc4>
 8004406:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800440a:	4ba3      	ldr	r3, [pc, #652]	; (8004698 <_printf_float+0x2f8>)
 800440c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004410:	f7fc fb6e 	bl	8000af0 <__aeabi_dcmple>
 8004414:	bb30      	cbnz	r0, 8004464 <_printf_float+0xc4>
 8004416:	2200      	movs	r2, #0
 8004418:	2300      	movs	r3, #0
 800441a:	4640      	mov	r0, r8
 800441c:	4649      	mov	r1, r9
 800441e:	f7fc fb5d 	bl	8000adc <__aeabi_dcmplt>
 8004422:	b110      	cbz	r0, 800442a <_printf_float+0x8a>
 8004424:	232d      	movs	r3, #45	; 0x2d
 8004426:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800442a:	4a9c      	ldr	r2, [pc, #624]	; (800469c <_printf_float+0x2fc>)
 800442c:	4b9c      	ldr	r3, [pc, #624]	; (80046a0 <_printf_float+0x300>)
 800442e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004432:	bf8c      	ite	hi
 8004434:	4690      	movhi	r8, r2
 8004436:	4698      	movls	r8, r3
 8004438:	2303      	movs	r3, #3
 800443a:	f02b 0204 	bic.w	r2, fp, #4
 800443e:	6123      	str	r3, [r4, #16]
 8004440:	6022      	str	r2, [r4, #0]
 8004442:	f04f 0900 	mov.w	r9, #0
 8004446:	9700      	str	r7, [sp, #0]
 8004448:	4633      	mov	r3, r6
 800444a:	aa0b      	add	r2, sp, #44	; 0x2c
 800444c:	4621      	mov	r1, r4
 800444e:	4628      	mov	r0, r5
 8004450:	f000 f9e6 	bl	8004820 <_printf_common>
 8004454:	3001      	adds	r0, #1
 8004456:	f040 808d 	bne.w	8004574 <_printf_float+0x1d4>
 800445a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800445e:	b00d      	add	sp, #52	; 0x34
 8004460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004464:	4642      	mov	r2, r8
 8004466:	464b      	mov	r3, r9
 8004468:	4640      	mov	r0, r8
 800446a:	4649      	mov	r1, r9
 800446c:	f7fc fb5e 	bl	8000b2c <__aeabi_dcmpun>
 8004470:	b110      	cbz	r0, 8004478 <_printf_float+0xd8>
 8004472:	4a8c      	ldr	r2, [pc, #560]	; (80046a4 <_printf_float+0x304>)
 8004474:	4b8c      	ldr	r3, [pc, #560]	; (80046a8 <_printf_float+0x308>)
 8004476:	e7da      	b.n	800442e <_printf_float+0x8e>
 8004478:	6861      	ldr	r1, [r4, #4]
 800447a:	1c4b      	adds	r3, r1, #1
 800447c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8004480:	a80a      	add	r0, sp, #40	; 0x28
 8004482:	d13e      	bne.n	8004502 <_printf_float+0x162>
 8004484:	2306      	movs	r3, #6
 8004486:	6063      	str	r3, [r4, #4]
 8004488:	2300      	movs	r3, #0
 800448a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800448e:	ab09      	add	r3, sp, #36	; 0x24
 8004490:	9300      	str	r3, [sp, #0]
 8004492:	ec49 8b10 	vmov	d0, r8, r9
 8004496:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800449a:	6022      	str	r2, [r4, #0]
 800449c:	f8cd a004 	str.w	sl, [sp, #4]
 80044a0:	6861      	ldr	r1, [r4, #4]
 80044a2:	4628      	mov	r0, r5
 80044a4:	f7ff fee7 	bl	8004276 <__cvt>
 80044a8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80044ac:	2b47      	cmp	r3, #71	; 0x47
 80044ae:	4680      	mov	r8, r0
 80044b0:	d109      	bne.n	80044c6 <_printf_float+0x126>
 80044b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044b4:	1cd8      	adds	r0, r3, #3
 80044b6:	db02      	blt.n	80044be <_printf_float+0x11e>
 80044b8:	6862      	ldr	r2, [r4, #4]
 80044ba:	4293      	cmp	r3, r2
 80044bc:	dd47      	ble.n	800454e <_printf_float+0x1ae>
 80044be:	f1aa 0a02 	sub.w	sl, sl, #2
 80044c2:	fa5f fa8a 	uxtb.w	sl, sl
 80044c6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80044ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 80044cc:	d824      	bhi.n	8004518 <_printf_float+0x178>
 80044ce:	3901      	subs	r1, #1
 80044d0:	4652      	mov	r2, sl
 80044d2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80044d6:	9109      	str	r1, [sp, #36]	; 0x24
 80044d8:	f7ff ff2e 	bl	8004338 <__exponent>
 80044dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80044de:	1813      	adds	r3, r2, r0
 80044e0:	2a01      	cmp	r2, #1
 80044e2:	4681      	mov	r9, r0
 80044e4:	6123      	str	r3, [r4, #16]
 80044e6:	dc02      	bgt.n	80044ee <_printf_float+0x14e>
 80044e8:	6822      	ldr	r2, [r4, #0]
 80044ea:	07d1      	lsls	r1, r2, #31
 80044ec:	d501      	bpl.n	80044f2 <_printf_float+0x152>
 80044ee:	3301      	adds	r3, #1
 80044f0:	6123      	str	r3, [r4, #16]
 80044f2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d0a5      	beq.n	8004446 <_printf_float+0xa6>
 80044fa:	232d      	movs	r3, #45	; 0x2d
 80044fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004500:	e7a1      	b.n	8004446 <_printf_float+0xa6>
 8004502:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8004506:	f000 8177 	beq.w	80047f8 <_printf_float+0x458>
 800450a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800450e:	d1bb      	bne.n	8004488 <_printf_float+0xe8>
 8004510:	2900      	cmp	r1, #0
 8004512:	d1b9      	bne.n	8004488 <_printf_float+0xe8>
 8004514:	2301      	movs	r3, #1
 8004516:	e7b6      	b.n	8004486 <_printf_float+0xe6>
 8004518:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800451c:	d119      	bne.n	8004552 <_printf_float+0x1b2>
 800451e:	2900      	cmp	r1, #0
 8004520:	6863      	ldr	r3, [r4, #4]
 8004522:	dd0c      	ble.n	800453e <_printf_float+0x19e>
 8004524:	6121      	str	r1, [r4, #16]
 8004526:	b913      	cbnz	r3, 800452e <_printf_float+0x18e>
 8004528:	6822      	ldr	r2, [r4, #0]
 800452a:	07d2      	lsls	r2, r2, #31
 800452c:	d502      	bpl.n	8004534 <_printf_float+0x194>
 800452e:	3301      	adds	r3, #1
 8004530:	440b      	add	r3, r1
 8004532:	6123      	str	r3, [r4, #16]
 8004534:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004536:	65a3      	str	r3, [r4, #88]	; 0x58
 8004538:	f04f 0900 	mov.w	r9, #0
 800453c:	e7d9      	b.n	80044f2 <_printf_float+0x152>
 800453e:	b913      	cbnz	r3, 8004546 <_printf_float+0x1a6>
 8004540:	6822      	ldr	r2, [r4, #0]
 8004542:	07d0      	lsls	r0, r2, #31
 8004544:	d501      	bpl.n	800454a <_printf_float+0x1aa>
 8004546:	3302      	adds	r3, #2
 8004548:	e7f3      	b.n	8004532 <_printf_float+0x192>
 800454a:	2301      	movs	r3, #1
 800454c:	e7f1      	b.n	8004532 <_printf_float+0x192>
 800454e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8004552:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004556:	4293      	cmp	r3, r2
 8004558:	db05      	blt.n	8004566 <_printf_float+0x1c6>
 800455a:	6822      	ldr	r2, [r4, #0]
 800455c:	6123      	str	r3, [r4, #16]
 800455e:	07d1      	lsls	r1, r2, #31
 8004560:	d5e8      	bpl.n	8004534 <_printf_float+0x194>
 8004562:	3301      	adds	r3, #1
 8004564:	e7e5      	b.n	8004532 <_printf_float+0x192>
 8004566:	2b00      	cmp	r3, #0
 8004568:	bfd4      	ite	le
 800456a:	f1c3 0302 	rsble	r3, r3, #2
 800456e:	2301      	movgt	r3, #1
 8004570:	4413      	add	r3, r2
 8004572:	e7de      	b.n	8004532 <_printf_float+0x192>
 8004574:	6823      	ldr	r3, [r4, #0]
 8004576:	055a      	lsls	r2, r3, #21
 8004578:	d407      	bmi.n	800458a <_printf_float+0x1ea>
 800457a:	6923      	ldr	r3, [r4, #16]
 800457c:	4642      	mov	r2, r8
 800457e:	4631      	mov	r1, r6
 8004580:	4628      	mov	r0, r5
 8004582:	47b8      	blx	r7
 8004584:	3001      	adds	r0, #1
 8004586:	d12b      	bne.n	80045e0 <_printf_float+0x240>
 8004588:	e767      	b.n	800445a <_printf_float+0xba>
 800458a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800458e:	f240 80dc 	bls.w	800474a <_printf_float+0x3aa>
 8004592:	2200      	movs	r2, #0
 8004594:	2300      	movs	r3, #0
 8004596:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800459a:	f7fc fa95 	bl	8000ac8 <__aeabi_dcmpeq>
 800459e:	2800      	cmp	r0, #0
 80045a0:	d033      	beq.n	800460a <_printf_float+0x26a>
 80045a2:	2301      	movs	r3, #1
 80045a4:	4a41      	ldr	r2, [pc, #260]	; (80046ac <_printf_float+0x30c>)
 80045a6:	4631      	mov	r1, r6
 80045a8:	4628      	mov	r0, r5
 80045aa:	47b8      	blx	r7
 80045ac:	3001      	adds	r0, #1
 80045ae:	f43f af54 	beq.w	800445a <_printf_float+0xba>
 80045b2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80045b6:	429a      	cmp	r2, r3
 80045b8:	db02      	blt.n	80045c0 <_printf_float+0x220>
 80045ba:	6823      	ldr	r3, [r4, #0]
 80045bc:	07d8      	lsls	r0, r3, #31
 80045be:	d50f      	bpl.n	80045e0 <_printf_float+0x240>
 80045c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80045c4:	4631      	mov	r1, r6
 80045c6:	4628      	mov	r0, r5
 80045c8:	47b8      	blx	r7
 80045ca:	3001      	adds	r0, #1
 80045cc:	f43f af45 	beq.w	800445a <_printf_float+0xba>
 80045d0:	f04f 0800 	mov.w	r8, #0
 80045d4:	f104 091a 	add.w	r9, r4, #26
 80045d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80045da:	3b01      	subs	r3, #1
 80045dc:	4543      	cmp	r3, r8
 80045de:	dc09      	bgt.n	80045f4 <_printf_float+0x254>
 80045e0:	6823      	ldr	r3, [r4, #0]
 80045e2:	079b      	lsls	r3, r3, #30
 80045e4:	f100 8103 	bmi.w	80047ee <_printf_float+0x44e>
 80045e8:	68e0      	ldr	r0, [r4, #12]
 80045ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80045ec:	4298      	cmp	r0, r3
 80045ee:	bfb8      	it	lt
 80045f0:	4618      	movlt	r0, r3
 80045f2:	e734      	b.n	800445e <_printf_float+0xbe>
 80045f4:	2301      	movs	r3, #1
 80045f6:	464a      	mov	r2, r9
 80045f8:	4631      	mov	r1, r6
 80045fa:	4628      	mov	r0, r5
 80045fc:	47b8      	blx	r7
 80045fe:	3001      	adds	r0, #1
 8004600:	f43f af2b 	beq.w	800445a <_printf_float+0xba>
 8004604:	f108 0801 	add.w	r8, r8, #1
 8004608:	e7e6      	b.n	80045d8 <_printf_float+0x238>
 800460a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800460c:	2b00      	cmp	r3, #0
 800460e:	dc2b      	bgt.n	8004668 <_printf_float+0x2c8>
 8004610:	2301      	movs	r3, #1
 8004612:	4a26      	ldr	r2, [pc, #152]	; (80046ac <_printf_float+0x30c>)
 8004614:	4631      	mov	r1, r6
 8004616:	4628      	mov	r0, r5
 8004618:	47b8      	blx	r7
 800461a:	3001      	adds	r0, #1
 800461c:	f43f af1d 	beq.w	800445a <_printf_float+0xba>
 8004620:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004622:	b923      	cbnz	r3, 800462e <_printf_float+0x28e>
 8004624:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004626:	b913      	cbnz	r3, 800462e <_printf_float+0x28e>
 8004628:	6823      	ldr	r3, [r4, #0]
 800462a:	07d9      	lsls	r1, r3, #31
 800462c:	d5d8      	bpl.n	80045e0 <_printf_float+0x240>
 800462e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004632:	4631      	mov	r1, r6
 8004634:	4628      	mov	r0, r5
 8004636:	47b8      	blx	r7
 8004638:	3001      	adds	r0, #1
 800463a:	f43f af0e 	beq.w	800445a <_printf_float+0xba>
 800463e:	f04f 0900 	mov.w	r9, #0
 8004642:	f104 0a1a 	add.w	sl, r4, #26
 8004646:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004648:	425b      	negs	r3, r3
 800464a:	454b      	cmp	r3, r9
 800464c:	dc01      	bgt.n	8004652 <_printf_float+0x2b2>
 800464e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004650:	e794      	b.n	800457c <_printf_float+0x1dc>
 8004652:	2301      	movs	r3, #1
 8004654:	4652      	mov	r2, sl
 8004656:	4631      	mov	r1, r6
 8004658:	4628      	mov	r0, r5
 800465a:	47b8      	blx	r7
 800465c:	3001      	adds	r0, #1
 800465e:	f43f aefc 	beq.w	800445a <_printf_float+0xba>
 8004662:	f109 0901 	add.w	r9, r9, #1
 8004666:	e7ee      	b.n	8004646 <_printf_float+0x2a6>
 8004668:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800466a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800466c:	429a      	cmp	r2, r3
 800466e:	bfa8      	it	ge
 8004670:	461a      	movge	r2, r3
 8004672:	2a00      	cmp	r2, #0
 8004674:	4691      	mov	r9, r2
 8004676:	dd07      	ble.n	8004688 <_printf_float+0x2e8>
 8004678:	4613      	mov	r3, r2
 800467a:	4631      	mov	r1, r6
 800467c:	4642      	mov	r2, r8
 800467e:	4628      	mov	r0, r5
 8004680:	47b8      	blx	r7
 8004682:	3001      	adds	r0, #1
 8004684:	f43f aee9 	beq.w	800445a <_printf_float+0xba>
 8004688:	f104 031a 	add.w	r3, r4, #26
 800468c:	f04f 0b00 	mov.w	fp, #0
 8004690:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004694:	9306      	str	r3, [sp, #24]
 8004696:	e015      	b.n	80046c4 <_printf_float+0x324>
 8004698:	7fefffff 	.word	0x7fefffff
 800469c:	08008838 	.word	0x08008838
 80046a0:	08008834 	.word	0x08008834
 80046a4:	08008840 	.word	0x08008840
 80046a8:	0800883c 	.word	0x0800883c
 80046ac:	08008844 	.word	0x08008844
 80046b0:	2301      	movs	r3, #1
 80046b2:	9a06      	ldr	r2, [sp, #24]
 80046b4:	4631      	mov	r1, r6
 80046b6:	4628      	mov	r0, r5
 80046b8:	47b8      	blx	r7
 80046ba:	3001      	adds	r0, #1
 80046bc:	f43f aecd 	beq.w	800445a <_printf_float+0xba>
 80046c0:	f10b 0b01 	add.w	fp, fp, #1
 80046c4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80046c8:	ebaa 0309 	sub.w	r3, sl, r9
 80046cc:	455b      	cmp	r3, fp
 80046ce:	dcef      	bgt.n	80046b0 <_printf_float+0x310>
 80046d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80046d4:	429a      	cmp	r2, r3
 80046d6:	44d0      	add	r8, sl
 80046d8:	db15      	blt.n	8004706 <_printf_float+0x366>
 80046da:	6823      	ldr	r3, [r4, #0]
 80046dc:	07da      	lsls	r2, r3, #31
 80046de:	d412      	bmi.n	8004706 <_printf_float+0x366>
 80046e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80046e2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80046e4:	eba3 020a 	sub.w	r2, r3, sl
 80046e8:	eba3 0a01 	sub.w	sl, r3, r1
 80046ec:	4592      	cmp	sl, r2
 80046ee:	bfa8      	it	ge
 80046f0:	4692      	movge	sl, r2
 80046f2:	f1ba 0f00 	cmp.w	sl, #0
 80046f6:	dc0e      	bgt.n	8004716 <_printf_float+0x376>
 80046f8:	f04f 0800 	mov.w	r8, #0
 80046fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004700:	f104 091a 	add.w	r9, r4, #26
 8004704:	e019      	b.n	800473a <_printf_float+0x39a>
 8004706:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800470a:	4631      	mov	r1, r6
 800470c:	4628      	mov	r0, r5
 800470e:	47b8      	blx	r7
 8004710:	3001      	adds	r0, #1
 8004712:	d1e5      	bne.n	80046e0 <_printf_float+0x340>
 8004714:	e6a1      	b.n	800445a <_printf_float+0xba>
 8004716:	4653      	mov	r3, sl
 8004718:	4642      	mov	r2, r8
 800471a:	4631      	mov	r1, r6
 800471c:	4628      	mov	r0, r5
 800471e:	47b8      	blx	r7
 8004720:	3001      	adds	r0, #1
 8004722:	d1e9      	bne.n	80046f8 <_printf_float+0x358>
 8004724:	e699      	b.n	800445a <_printf_float+0xba>
 8004726:	2301      	movs	r3, #1
 8004728:	464a      	mov	r2, r9
 800472a:	4631      	mov	r1, r6
 800472c:	4628      	mov	r0, r5
 800472e:	47b8      	blx	r7
 8004730:	3001      	adds	r0, #1
 8004732:	f43f ae92 	beq.w	800445a <_printf_float+0xba>
 8004736:	f108 0801 	add.w	r8, r8, #1
 800473a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800473e:	1a9b      	subs	r3, r3, r2
 8004740:	eba3 030a 	sub.w	r3, r3, sl
 8004744:	4543      	cmp	r3, r8
 8004746:	dcee      	bgt.n	8004726 <_printf_float+0x386>
 8004748:	e74a      	b.n	80045e0 <_printf_float+0x240>
 800474a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800474c:	2a01      	cmp	r2, #1
 800474e:	dc01      	bgt.n	8004754 <_printf_float+0x3b4>
 8004750:	07db      	lsls	r3, r3, #31
 8004752:	d53a      	bpl.n	80047ca <_printf_float+0x42a>
 8004754:	2301      	movs	r3, #1
 8004756:	4642      	mov	r2, r8
 8004758:	4631      	mov	r1, r6
 800475a:	4628      	mov	r0, r5
 800475c:	47b8      	blx	r7
 800475e:	3001      	adds	r0, #1
 8004760:	f43f ae7b 	beq.w	800445a <_printf_float+0xba>
 8004764:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004768:	4631      	mov	r1, r6
 800476a:	4628      	mov	r0, r5
 800476c:	47b8      	blx	r7
 800476e:	3001      	adds	r0, #1
 8004770:	f108 0801 	add.w	r8, r8, #1
 8004774:	f43f ae71 	beq.w	800445a <_printf_float+0xba>
 8004778:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800477a:	2200      	movs	r2, #0
 800477c:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8004780:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004784:	2300      	movs	r3, #0
 8004786:	f7fc f99f 	bl	8000ac8 <__aeabi_dcmpeq>
 800478a:	b9c8      	cbnz	r0, 80047c0 <_printf_float+0x420>
 800478c:	4653      	mov	r3, sl
 800478e:	4642      	mov	r2, r8
 8004790:	4631      	mov	r1, r6
 8004792:	4628      	mov	r0, r5
 8004794:	47b8      	blx	r7
 8004796:	3001      	adds	r0, #1
 8004798:	d10e      	bne.n	80047b8 <_printf_float+0x418>
 800479a:	e65e      	b.n	800445a <_printf_float+0xba>
 800479c:	2301      	movs	r3, #1
 800479e:	4652      	mov	r2, sl
 80047a0:	4631      	mov	r1, r6
 80047a2:	4628      	mov	r0, r5
 80047a4:	47b8      	blx	r7
 80047a6:	3001      	adds	r0, #1
 80047a8:	f43f ae57 	beq.w	800445a <_printf_float+0xba>
 80047ac:	f108 0801 	add.w	r8, r8, #1
 80047b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80047b2:	3b01      	subs	r3, #1
 80047b4:	4543      	cmp	r3, r8
 80047b6:	dcf1      	bgt.n	800479c <_printf_float+0x3fc>
 80047b8:	464b      	mov	r3, r9
 80047ba:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80047be:	e6de      	b.n	800457e <_printf_float+0x1de>
 80047c0:	f04f 0800 	mov.w	r8, #0
 80047c4:	f104 0a1a 	add.w	sl, r4, #26
 80047c8:	e7f2      	b.n	80047b0 <_printf_float+0x410>
 80047ca:	2301      	movs	r3, #1
 80047cc:	e7df      	b.n	800478e <_printf_float+0x3ee>
 80047ce:	2301      	movs	r3, #1
 80047d0:	464a      	mov	r2, r9
 80047d2:	4631      	mov	r1, r6
 80047d4:	4628      	mov	r0, r5
 80047d6:	47b8      	blx	r7
 80047d8:	3001      	adds	r0, #1
 80047da:	f43f ae3e 	beq.w	800445a <_printf_float+0xba>
 80047de:	f108 0801 	add.w	r8, r8, #1
 80047e2:	68e3      	ldr	r3, [r4, #12]
 80047e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80047e6:	1a9b      	subs	r3, r3, r2
 80047e8:	4543      	cmp	r3, r8
 80047ea:	dcf0      	bgt.n	80047ce <_printf_float+0x42e>
 80047ec:	e6fc      	b.n	80045e8 <_printf_float+0x248>
 80047ee:	f04f 0800 	mov.w	r8, #0
 80047f2:	f104 0919 	add.w	r9, r4, #25
 80047f6:	e7f4      	b.n	80047e2 <_printf_float+0x442>
 80047f8:	2900      	cmp	r1, #0
 80047fa:	f43f ae8b 	beq.w	8004514 <_printf_float+0x174>
 80047fe:	2300      	movs	r3, #0
 8004800:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004804:	ab09      	add	r3, sp, #36	; 0x24
 8004806:	9300      	str	r3, [sp, #0]
 8004808:	ec49 8b10 	vmov	d0, r8, r9
 800480c:	6022      	str	r2, [r4, #0]
 800480e:	f8cd a004 	str.w	sl, [sp, #4]
 8004812:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004816:	4628      	mov	r0, r5
 8004818:	f7ff fd2d 	bl	8004276 <__cvt>
 800481c:	4680      	mov	r8, r0
 800481e:	e648      	b.n	80044b2 <_printf_float+0x112>

08004820 <_printf_common>:
 8004820:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004824:	4691      	mov	r9, r2
 8004826:	461f      	mov	r7, r3
 8004828:	688a      	ldr	r2, [r1, #8]
 800482a:	690b      	ldr	r3, [r1, #16]
 800482c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004830:	4293      	cmp	r3, r2
 8004832:	bfb8      	it	lt
 8004834:	4613      	movlt	r3, r2
 8004836:	f8c9 3000 	str.w	r3, [r9]
 800483a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800483e:	4606      	mov	r6, r0
 8004840:	460c      	mov	r4, r1
 8004842:	b112      	cbz	r2, 800484a <_printf_common+0x2a>
 8004844:	3301      	adds	r3, #1
 8004846:	f8c9 3000 	str.w	r3, [r9]
 800484a:	6823      	ldr	r3, [r4, #0]
 800484c:	0699      	lsls	r1, r3, #26
 800484e:	bf42      	ittt	mi
 8004850:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004854:	3302      	addmi	r3, #2
 8004856:	f8c9 3000 	strmi.w	r3, [r9]
 800485a:	6825      	ldr	r5, [r4, #0]
 800485c:	f015 0506 	ands.w	r5, r5, #6
 8004860:	d107      	bne.n	8004872 <_printf_common+0x52>
 8004862:	f104 0a19 	add.w	sl, r4, #25
 8004866:	68e3      	ldr	r3, [r4, #12]
 8004868:	f8d9 2000 	ldr.w	r2, [r9]
 800486c:	1a9b      	subs	r3, r3, r2
 800486e:	42ab      	cmp	r3, r5
 8004870:	dc28      	bgt.n	80048c4 <_printf_common+0xa4>
 8004872:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004876:	6822      	ldr	r2, [r4, #0]
 8004878:	3300      	adds	r3, #0
 800487a:	bf18      	it	ne
 800487c:	2301      	movne	r3, #1
 800487e:	0692      	lsls	r2, r2, #26
 8004880:	d42d      	bmi.n	80048de <_printf_common+0xbe>
 8004882:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004886:	4639      	mov	r1, r7
 8004888:	4630      	mov	r0, r6
 800488a:	47c0      	blx	r8
 800488c:	3001      	adds	r0, #1
 800488e:	d020      	beq.n	80048d2 <_printf_common+0xb2>
 8004890:	6823      	ldr	r3, [r4, #0]
 8004892:	68e5      	ldr	r5, [r4, #12]
 8004894:	f8d9 2000 	ldr.w	r2, [r9]
 8004898:	f003 0306 	and.w	r3, r3, #6
 800489c:	2b04      	cmp	r3, #4
 800489e:	bf08      	it	eq
 80048a0:	1aad      	subeq	r5, r5, r2
 80048a2:	68a3      	ldr	r3, [r4, #8]
 80048a4:	6922      	ldr	r2, [r4, #16]
 80048a6:	bf0c      	ite	eq
 80048a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80048ac:	2500      	movne	r5, #0
 80048ae:	4293      	cmp	r3, r2
 80048b0:	bfc4      	itt	gt
 80048b2:	1a9b      	subgt	r3, r3, r2
 80048b4:	18ed      	addgt	r5, r5, r3
 80048b6:	f04f 0900 	mov.w	r9, #0
 80048ba:	341a      	adds	r4, #26
 80048bc:	454d      	cmp	r5, r9
 80048be:	d11a      	bne.n	80048f6 <_printf_common+0xd6>
 80048c0:	2000      	movs	r0, #0
 80048c2:	e008      	b.n	80048d6 <_printf_common+0xb6>
 80048c4:	2301      	movs	r3, #1
 80048c6:	4652      	mov	r2, sl
 80048c8:	4639      	mov	r1, r7
 80048ca:	4630      	mov	r0, r6
 80048cc:	47c0      	blx	r8
 80048ce:	3001      	adds	r0, #1
 80048d0:	d103      	bne.n	80048da <_printf_common+0xba>
 80048d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80048d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048da:	3501      	adds	r5, #1
 80048dc:	e7c3      	b.n	8004866 <_printf_common+0x46>
 80048de:	18e1      	adds	r1, r4, r3
 80048e0:	1c5a      	adds	r2, r3, #1
 80048e2:	2030      	movs	r0, #48	; 0x30
 80048e4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80048e8:	4422      	add	r2, r4
 80048ea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80048ee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80048f2:	3302      	adds	r3, #2
 80048f4:	e7c5      	b.n	8004882 <_printf_common+0x62>
 80048f6:	2301      	movs	r3, #1
 80048f8:	4622      	mov	r2, r4
 80048fa:	4639      	mov	r1, r7
 80048fc:	4630      	mov	r0, r6
 80048fe:	47c0      	blx	r8
 8004900:	3001      	adds	r0, #1
 8004902:	d0e6      	beq.n	80048d2 <_printf_common+0xb2>
 8004904:	f109 0901 	add.w	r9, r9, #1
 8004908:	e7d8      	b.n	80048bc <_printf_common+0x9c>
	...

0800490c <_printf_i>:
 800490c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004910:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004914:	460c      	mov	r4, r1
 8004916:	7e09      	ldrb	r1, [r1, #24]
 8004918:	b085      	sub	sp, #20
 800491a:	296e      	cmp	r1, #110	; 0x6e
 800491c:	4617      	mov	r7, r2
 800491e:	4606      	mov	r6, r0
 8004920:	4698      	mov	r8, r3
 8004922:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004924:	f000 80b3 	beq.w	8004a8e <_printf_i+0x182>
 8004928:	d822      	bhi.n	8004970 <_printf_i+0x64>
 800492a:	2963      	cmp	r1, #99	; 0x63
 800492c:	d036      	beq.n	800499c <_printf_i+0x90>
 800492e:	d80a      	bhi.n	8004946 <_printf_i+0x3a>
 8004930:	2900      	cmp	r1, #0
 8004932:	f000 80b9 	beq.w	8004aa8 <_printf_i+0x19c>
 8004936:	2958      	cmp	r1, #88	; 0x58
 8004938:	f000 8083 	beq.w	8004a42 <_printf_i+0x136>
 800493c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004940:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004944:	e032      	b.n	80049ac <_printf_i+0xa0>
 8004946:	2964      	cmp	r1, #100	; 0x64
 8004948:	d001      	beq.n	800494e <_printf_i+0x42>
 800494a:	2969      	cmp	r1, #105	; 0x69
 800494c:	d1f6      	bne.n	800493c <_printf_i+0x30>
 800494e:	6820      	ldr	r0, [r4, #0]
 8004950:	6813      	ldr	r3, [r2, #0]
 8004952:	0605      	lsls	r5, r0, #24
 8004954:	f103 0104 	add.w	r1, r3, #4
 8004958:	d52a      	bpl.n	80049b0 <_printf_i+0xa4>
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	6011      	str	r1, [r2, #0]
 800495e:	2b00      	cmp	r3, #0
 8004960:	da03      	bge.n	800496a <_printf_i+0x5e>
 8004962:	222d      	movs	r2, #45	; 0x2d
 8004964:	425b      	negs	r3, r3
 8004966:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800496a:	486f      	ldr	r0, [pc, #444]	; (8004b28 <_printf_i+0x21c>)
 800496c:	220a      	movs	r2, #10
 800496e:	e039      	b.n	80049e4 <_printf_i+0xd8>
 8004970:	2973      	cmp	r1, #115	; 0x73
 8004972:	f000 809d 	beq.w	8004ab0 <_printf_i+0x1a4>
 8004976:	d808      	bhi.n	800498a <_printf_i+0x7e>
 8004978:	296f      	cmp	r1, #111	; 0x6f
 800497a:	d020      	beq.n	80049be <_printf_i+0xb2>
 800497c:	2970      	cmp	r1, #112	; 0x70
 800497e:	d1dd      	bne.n	800493c <_printf_i+0x30>
 8004980:	6823      	ldr	r3, [r4, #0]
 8004982:	f043 0320 	orr.w	r3, r3, #32
 8004986:	6023      	str	r3, [r4, #0]
 8004988:	e003      	b.n	8004992 <_printf_i+0x86>
 800498a:	2975      	cmp	r1, #117	; 0x75
 800498c:	d017      	beq.n	80049be <_printf_i+0xb2>
 800498e:	2978      	cmp	r1, #120	; 0x78
 8004990:	d1d4      	bne.n	800493c <_printf_i+0x30>
 8004992:	2378      	movs	r3, #120	; 0x78
 8004994:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004998:	4864      	ldr	r0, [pc, #400]	; (8004b2c <_printf_i+0x220>)
 800499a:	e055      	b.n	8004a48 <_printf_i+0x13c>
 800499c:	6813      	ldr	r3, [r2, #0]
 800499e:	1d19      	adds	r1, r3, #4
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	6011      	str	r1, [r2, #0]
 80049a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80049ac:	2301      	movs	r3, #1
 80049ae:	e08c      	b.n	8004aca <_printf_i+0x1be>
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	6011      	str	r1, [r2, #0]
 80049b4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80049b8:	bf18      	it	ne
 80049ba:	b21b      	sxthne	r3, r3
 80049bc:	e7cf      	b.n	800495e <_printf_i+0x52>
 80049be:	6813      	ldr	r3, [r2, #0]
 80049c0:	6825      	ldr	r5, [r4, #0]
 80049c2:	1d18      	adds	r0, r3, #4
 80049c4:	6010      	str	r0, [r2, #0]
 80049c6:	0628      	lsls	r0, r5, #24
 80049c8:	d501      	bpl.n	80049ce <_printf_i+0xc2>
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	e002      	b.n	80049d4 <_printf_i+0xc8>
 80049ce:	0668      	lsls	r0, r5, #25
 80049d0:	d5fb      	bpl.n	80049ca <_printf_i+0xbe>
 80049d2:	881b      	ldrh	r3, [r3, #0]
 80049d4:	4854      	ldr	r0, [pc, #336]	; (8004b28 <_printf_i+0x21c>)
 80049d6:	296f      	cmp	r1, #111	; 0x6f
 80049d8:	bf14      	ite	ne
 80049da:	220a      	movne	r2, #10
 80049dc:	2208      	moveq	r2, #8
 80049de:	2100      	movs	r1, #0
 80049e0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80049e4:	6865      	ldr	r5, [r4, #4]
 80049e6:	60a5      	str	r5, [r4, #8]
 80049e8:	2d00      	cmp	r5, #0
 80049ea:	f2c0 8095 	blt.w	8004b18 <_printf_i+0x20c>
 80049ee:	6821      	ldr	r1, [r4, #0]
 80049f0:	f021 0104 	bic.w	r1, r1, #4
 80049f4:	6021      	str	r1, [r4, #0]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d13d      	bne.n	8004a76 <_printf_i+0x16a>
 80049fa:	2d00      	cmp	r5, #0
 80049fc:	f040 808e 	bne.w	8004b1c <_printf_i+0x210>
 8004a00:	4665      	mov	r5, ip
 8004a02:	2a08      	cmp	r2, #8
 8004a04:	d10b      	bne.n	8004a1e <_printf_i+0x112>
 8004a06:	6823      	ldr	r3, [r4, #0]
 8004a08:	07db      	lsls	r3, r3, #31
 8004a0a:	d508      	bpl.n	8004a1e <_printf_i+0x112>
 8004a0c:	6923      	ldr	r3, [r4, #16]
 8004a0e:	6862      	ldr	r2, [r4, #4]
 8004a10:	429a      	cmp	r2, r3
 8004a12:	bfde      	ittt	le
 8004a14:	2330      	movle	r3, #48	; 0x30
 8004a16:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004a1a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004a1e:	ebac 0305 	sub.w	r3, ip, r5
 8004a22:	6123      	str	r3, [r4, #16]
 8004a24:	f8cd 8000 	str.w	r8, [sp]
 8004a28:	463b      	mov	r3, r7
 8004a2a:	aa03      	add	r2, sp, #12
 8004a2c:	4621      	mov	r1, r4
 8004a2e:	4630      	mov	r0, r6
 8004a30:	f7ff fef6 	bl	8004820 <_printf_common>
 8004a34:	3001      	adds	r0, #1
 8004a36:	d14d      	bne.n	8004ad4 <_printf_i+0x1c8>
 8004a38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a3c:	b005      	add	sp, #20
 8004a3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004a42:	4839      	ldr	r0, [pc, #228]	; (8004b28 <_printf_i+0x21c>)
 8004a44:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004a48:	6813      	ldr	r3, [r2, #0]
 8004a4a:	6821      	ldr	r1, [r4, #0]
 8004a4c:	1d1d      	adds	r5, r3, #4
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	6015      	str	r5, [r2, #0]
 8004a52:	060a      	lsls	r2, r1, #24
 8004a54:	d50b      	bpl.n	8004a6e <_printf_i+0x162>
 8004a56:	07ca      	lsls	r2, r1, #31
 8004a58:	bf44      	itt	mi
 8004a5a:	f041 0120 	orrmi.w	r1, r1, #32
 8004a5e:	6021      	strmi	r1, [r4, #0]
 8004a60:	b91b      	cbnz	r3, 8004a6a <_printf_i+0x15e>
 8004a62:	6822      	ldr	r2, [r4, #0]
 8004a64:	f022 0220 	bic.w	r2, r2, #32
 8004a68:	6022      	str	r2, [r4, #0]
 8004a6a:	2210      	movs	r2, #16
 8004a6c:	e7b7      	b.n	80049de <_printf_i+0xd2>
 8004a6e:	064d      	lsls	r5, r1, #25
 8004a70:	bf48      	it	mi
 8004a72:	b29b      	uxthmi	r3, r3
 8004a74:	e7ef      	b.n	8004a56 <_printf_i+0x14a>
 8004a76:	4665      	mov	r5, ip
 8004a78:	fbb3 f1f2 	udiv	r1, r3, r2
 8004a7c:	fb02 3311 	mls	r3, r2, r1, r3
 8004a80:	5cc3      	ldrb	r3, [r0, r3]
 8004a82:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004a86:	460b      	mov	r3, r1
 8004a88:	2900      	cmp	r1, #0
 8004a8a:	d1f5      	bne.n	8004a78 <_printf_i+0x16c>
 8004a8c:	e7b9      	b.n	8004a02 <_printf_i+0xf6>
 8004a8e:	6813      	ldr	r3, [r2, #0]
 8004a90:	6825      	ldr	r5, [r4, #0]
 8004a92:	6961      	ldr	r1, [r4, #20]
 8004a94:	1d18      	adds	r0, r3, #4
 8004a96:	6010      	str	r0, [r2, #0]
 8004a98:	0628      	lsls	r0, r5, #24
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	d501      	bpl.n	8004aa2 <_printf_i+0x196>
 8004a9e:	6019      	str	r1, [r3, #0]
 8004aa0:	e002      	b.n	8004aa8 <_printf_i+0x19c>
 8004aa2:	066a      	lsls	r2, r5, #25
 8004aa4:	d5fb      	bpl.n	8004a9e <_printf_i+0x192>
 8004aa6:	8019      	strh	r1, [r3, #0]
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	6123      	str	r3, [r4, #16]
 8004aac:	4665      	mov	r5, ip
 8004aae:	e7b9      	b.n	8004a24 <_printf_i+0x118>
 8004ab0:	6813      	ldr	r3, [r2, #0]
 8004ab2:	1d19      	adds	r1, r3, #4
 8004ab4:	6011      	str	r1, [r2, #0]
 8004ab6:	681d      	ldr	r5, [r3, #0]
 8004ab8:	6862      	ldr	r2, [r4, #4]
 8004aba:	2100      	movs	r1, #0
 8004abc:	4628      	mov	r0, r5
 8004abe:	f7fb fb8f 	bl	80001e0 <memchr>
 8004ac2:	b108      	cbz	r0, 8004ac8 <_printf_i+0x1bc>
 8004ac4:	1b40      	subs	r0, r0, r5
 8004ac6:	6060      	str	r0, [r4, #4]
 8004ac8:	6863      	ldr	r3, [r4, #4]
 8004aca:	6123      	str	r3, [r4, #16]
 8004acc:	2300      	movs	r3, #0
 8004ace:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ad2:	e7a7      	b.n	8004a24 <_printf_i+0x118>
 8004ad4:	6923      	ldr	r3, [r4, #16]
 8004ad6:	462a      	mov	r2, r5
 8004ad8:	4639      	mov	r1, r7
 8004ada:	4630      	mov	r0, r6
 8004adc:	47c0      	blx	r8
 8004ade:	3001      	adds	r0, #1
 8004ae0:	d0aa      	beq.n	8004a38 <_printf_i+0x12c>
 8004ae2:	6823      	ldr	r3, [r4, #0]
 8004ae4:	079b      	lsls	r3, r3, #30
 8004ae6:	d413      	bmi.n	8004b10 <_printf_i+0x204>
 8004ae8:	68e0      	ldr	r0, [r4, #12]
 8004aea:	9b03      	ldr	r3, [sp, #12]
 8004aec:	4298      	cmp	r0, r3
 8004aee:	bfb8      	it	lt
 8004af0:	4618      	movlt	r0, r3
 8004af2:	e7a3      	b.n	8004a3c <_printf_i+0x130>
 8004af4:	2301      	movs	r3, #1
 8004af6:	464a      	mov	r2, r9
 8004af8:	4639      	mov	r1, r7
 8004afa:	4630      	mov	r0, r6
 8004afc:	47c0      	blx	r8
 8004afe:	3001      	adds	r0, #1
 8004b00:	d09a      	beq.n	8004a38 <_printf_i+0x12c>
 8004b02:	3501      	adds	r5, #1
 8004b04:	68e3      	ldr	r3, [r4, #12]
 8004b06:	9a03      	ldr	r2, [sp, #12]
 8004b08:	1a9b      	subs	r3, r3, r2
 8004b0a:	42ab      	cmp	r3, r5
 8004b0c:	dcf2      	bgt.n	8004af4 <_printf_i+0x1e8>
 8004b0e:	e7eb      	b.n	8004ae8 <_printf_i+0x1dc>
 8004b10:	2500      	movs	r5, #0
 8004b12:	f104 0919 	add.w	r9, r4, #25
 8004b16:	e7f5      	b.n	8004b04 <_printf_i+0x1f8>
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d1ac      	bne.n	8004a76 <_printf_i+0x16a>
 8004b1c:	7803      	ldrb	r3, [r0, #0]
 8004b1e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b22:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b26:	e76c      	b.n	8004a02 <_printf_i+0xf6>
 8004b28:	08008846 	.word	0x08008846
 8004b2c:	08008857 	.word	0x08008857

08004b30 <_scanf_float>:
 8004b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b34:	469a      	mov	sl, r3
 8004b36:	688b      	ldr	r3, [r1, #8]
 8004b38:	4616      	mov	r6, r2
 8004b3a:	1e5a      	subs	r2, r3, #1
 8004b3c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004b40:	b087      	sub	sp, #28
 8004b42:	bf83      	ittte	hi
 8004b44:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8004b48:	189b      	addhi	r3, r3, r2
 8004b4a:	9301      	strhi	r3, [sp, #4]
 8004b4c:	2300      	movls	r3, #0
 8004b4e:	bf86      	itte	hi
 8004b50:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004b54:	608b      	strhi	r3, [r1, #8]
 8004b56:	9301      	strls	r3, [sp, #4]
 8004b58:	680b      	ldr	r3, [r1, #0]
 8004b5a:	4688      	mov	r8, r1
 8004b5c:	f04f 0b00 	mov.w	fp, #0
 8004b60:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004b64:	f848 3b1c 	str.w	r3, [r8], #28
 8004b68:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8004b6c:	4607      	mov	r7, r0
 8004b6e:	460c      	mov	r4, r1
 8004b70:	4645      	mov	r5, r8
 8004b72:	465a      	mov	r2, fp
 8004b74:	46d9      	mov	r9, fp
 8004b76:	f8cd b008 	str.w	fp, [sp, #8]
 8004b7a:	68a1      	ldr	r1, [r4, #8]
 8004b7c:	b181      	cbz	r1, 8004ba0 <_scanf_float+0x70>
 8004b7e:	6833      	ldr	r3, [r6, #0]
 8004b80:	781b      	ldrb	r3, [r3, #0]
 8004b82:	2b49      	cmp	r3, #73	; 0x49
 8004b84:	d071      	beq.n	8004c6a <_scanf_float+0x13a>
 8004b86:	d84d      	bhi.n	8004c24 <_scanf_float+0xf4>
 8004b88:	2b39      	cmp	r3, #57	; 0x39
 8004b8a:	d840      	bhi.n	8004c0e <_scanf_float+0xde>
 8004b8c:	2b31      	cmp	r3, #49	; 0x31
 8004b8e:	f080 8088 	bcs.w	8004ca2 <_scanf_float+0x172>
 8004b92:	2b2d      	cmp	r3, #45	; 0x2d
 8004b94:	f000 8090 	beq.w	8004cb8 <_scanf_float+0x188>
 8004b98:	d815      	bhi.n	8004bc6 <_scanf_float+0x96>
 8004b9a:	2b2b      	cmp	r3, #43	; 0x2b
 8004b9c:	f000 808c 	beq.w	8004cb8 <_scanf_float+0x188>
 8004ba0:	f1b9 0f00 	cmp.w	r9, #0
 8004ba4:	d003      	beq.n	8004bae <_scanf_float+0x7e>
 8004ba6:	6823      	ldr	r3, [r4, #0]
 8004ba8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bac:	6023      	str	r3, [r4, #0]
 8004bae:	3a01      	subs	r2, #1
 8004bb0:	2a01      	cmp	r2, #1
 8004bb2:	f200 80ea 	bhi.w	8004d8a <_scanf_float+0x25a>
 8004bb6:	4545      	cmp	r5, r8
 8004bb8:	f200 80dc 	bhi.w	8004d74 <_scanf_float+0x244>
 8004bbc:	2601      	movs	r6, #1
 8004bbe:	4630      	mov	r0, r6
 8004bc0:	b007      	add	sp, #28
 8004bc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bc6:	2b2e      	cmp	r3, #46	; 0x2e
 8004bc8:	f000 809f 	beq.w	8004d0a <_scanf_float+0x1da>
 8004bcc:	2b30      	cmp	r3, #48	; 0x30
 8004bce:	d1e7      	bne.n	8004ba0 <_scanf_float+0x70>
 8004bd0:	6820      	ldr	r0, [r4, #0]
 8004bd2:	f410 7f80 	tst.w	r0, #256	; 0x100
 8004bd6:	d064      	beq.n	8004ca2 <_scanf_float+0x172>
 8004bd8:	9b01      	ldr	r3, [sp, #4]
 8004bda:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8004bde:	6020      	str	r0, [r4, #0]
 8004be0:	f109 0901 	add.w	r9, r9, #1
 8004be4:	b11b      	cbz	r3, 8004bee <_scanf_float+0xbe>
 8004be6:	3b01      	subs	r3, #1
 8004be8:	3101      	adds	r1, #1
 8004bea:	9301      	str	r3, [sp, #4]
 8004bec:	60a1      	str	r1, [r4, #8]
 8004bee:	68a3      	ldr	r3, [r4, #8]
 8004bf0:	3b01      	subs	r3, #1
 8004bf2:	60a3      	str	r3, [r4, #8]
 8004bf4:	6923      	ldr	r3, [r4, #16]
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	6123      	str	r3, [r4, #16]
 8004bfa:	6873      	ldr	r3, [r6, #4]
 8004bfc:	3b01      	subs	r3, #1
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	6073      	str	r3, [r6, #4]
 8004c02:	f340 80ac 	ble.w	8004d5e <_scanf_float+0x22e>
 8004c06:	6833      	ldr	r3, [r6, #0]
 8004c08:	3301      	adds	r3, #1
 8004c0a:	6033      	str	r3, [r6, #0]
 8004c0c:	e7b5      	b.n	8004b7a <_scanf_float+0x4a>
 8004c0e:	2b45      	cmp	r3, #69	; 0x45
 8004c10:	f000 8085 	beq.w	8004d1e <_scanf_float+0x1ee>
 8004c14:	2b46      	cmp	r3, #70	; 0x46
 8004c16:	d06a      	beq.n	8004cee <_scanf_float+0x1be>
 8004c18:	2b41      	cmp	r3, #65	; 0x41
 8004c1a:	d1c1      	bne.n	8004ba0 <_scanf_float+0x70>
 8004c1c:	2a01      	cmp	r2, #1
 8004c1e:	d1bf      	bne.n	8004ba0 <_scanf_float+0x70>
 8004c20:	2202      	movs	r2, #2
 8004c22:	e046      	b.n	8004cb2 <_scanf_float+0x182>
 8004c24:	2b65      	cmp	r3, #101	; 0x65
 8004c26:	d07a      	beq.n	8004d1e <_scanf_float+0x1ee>
 8004c28:	d818      	bhi.n	8004c5c <_scanf_float+0x12c>
 8004c2a:	2b54      	cmp	r3, #84	; 0x54
 8004c2c:	d066      	beq.n	8004cfc <_scanf_float+0x1cc>
 8004c2e:	d811      	bhi.n	8004c54 <_scanf_float+0x124>
 8004c30:	2b4e      	cmp	r3, #78	; 0x4e
 8004c32:	d1b5      	bne.n	8004ba0 <_scanf_float+0x70>
 8004c34:	2a00      	cmp	r2, #0
 8004c36:	d146      	bne.n	8004cc6 <_scanf_float+0x196>
 8004c38:	f1b9 0f00 	cmp.w	r9, #0
 8004c3c:	d145      	bne.n	8004cca <_scanf_float+0x19a>
 8004c3e:	6821      	ldr	r1, [r4, #0]
 8004c40:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8004c44:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8004c48:	d13f      	bne.n	8004cca <_scanf_float+0x19a>
 8004c4a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8004c4e:	6021      	str	r1, [r4, #0]
 8004c50:	2201      	movs	r2, #1
 8004c52:	e02e      	b.n	8004cb2 <_scanf_float+0x182>
 8004c54:	2b59      	cmp	r3, #89	; 0x59
 8004c56:	d01e      	beq.n	8004c96 <_scanf_float+0x166>
 8004c58:	2b61      	cmp	r3, #97	; 0x61
 8004c5a:	e7de      	b.n	8004c1a <_scanf_float+0xea>
 8004c5c:	2b6e      	cmp	r3, #110	; 0x6e
 8004c5e:	d0e9      	beq.n	8004c34 <_scanf_float+0x104>
 8004c60:	d815      	bhi.n	8004c8e <_scanf_float+0x15e>
 8004c62:	2b66      	cmp	r3, #102	; 0x66
 8004c64:	d043      	beq.n	8004cee <_scanf_float+0x1be>
 8004c66:	2b69      	cmp	r3, #105	; 0x69
 8004c68:	d19a      	bne.n	8004ba0 <_scanf_float+0x70>
 8004c6a:	f1bb 0f00 	cmp.w	fp, #0
 8004c6e:	d138      	bne.n	8004ce2 <_scanf_float+0x1b2>
 8004c70:	f1b9 0f00 	cmp.w	r9, #0
 8004c74:	d197      	bne.n	8004ba6 <_scanf_float+0x76>
 8004c76:	6821      	ldr	r1, [r4, #0]
 8004c78:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8004c7c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8004c80:	d195      	bne.n	8004bae <_scanf_float+0x7e>
 8004c82:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8004c86:	6021      	str	r1, [r4, #0]
 8004c88:	f04f 0b01 	mov.w	fp, #1
 8004c8c:	e011      	b.n	8004cb2 <_scanf_float+0x182>
 8004c8e:	2b74      	cmp	r3, #116	; 0x74
 8004c90:	d034      	beq.n	8004cfc <_scanf_float+0x1cc>
 8004c92:	2b79      	cmp	r3, #121	; 0x79
 8004c94:	d184      	bne.n	8004ba0 <_scanf_float+0x70>
 8004c96:	f1bb 0f07 	cmp.w	fp, #7
 8004c9a:	d181      	bne.n	8004ba0 <_scanf_float+0x70>
 8004c9c:	f04f 0b08 	mov.w	fp, #8
 8004ca0:	e007      	b.n	8004cb2 <_scanf_float+0x182>
 8004ca2:	eb12 0f0b 	cmn.w	r2, fp
 8004ca6:	f47f af7b 	bne.w	8004ba0 <_scanf_float+0x70>
 8004caa:	6821      	ldr	r1, [r4, #0]
 8004cac:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8004cb0:	6021      	str	r1, [r4, #0]
 8004cb2:	702b      	strb	r3, [r5, #0]
 8004cb4:	3501      	adds	r5, #1
 8004cb6:	e79a      	b.n	8004bee <_scanf_float+0xbe>
 8004cb8:	6821      	ldr	r1, [r4, #0]
 8004cba:	0608      	lsls	r0, r1, #24
 8004cbc:	f57f af70 	bpl.w	8004ba0 <_scanf_float+0x70>
 8004cc0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004cc4:	e7f4      	b.n	8004cb0 <_scanf_float+0x180>
 8004cc6:	2a02      	cmp	r2, #2
 8004cc8:	d047      	beq.n	8004d5a <_scanf_float+0x22a>
 8004cca:	f1bb 0f01 	cmp.w	fp, #1
 8004cce:	d003      	beq.n	8004cd8 <_scanf_float+0x1a8>
 8004cd0:	f1bb 0f04 	cmp.w	fp, #4
 8004cd4:	f47f af64 	bne.w	8004ba0 <_scanf_float+0x70>
 8004cd8:	f10b 0b01 	add.w	fp, fp, #1
 8004cdc:	fa5f fb8b 	uxtb.w	fp, fp
 8004ce0:	e7e7      	b.n	8004cb2 <_scanf_float+0x182>
 8004ce2:	f1bb 0f03 	cmp.w	fp, #3
 8004ce6:	d0f7      	beq.n	8004cd8 <_scanf_float+0x1a8>
 8004ce8:	f1bb 0f05 	cmp.w	fp, #5
 8004cec:	e7f2      	b.n	8004cd4 <_scanf_float+0x1a4>
 8004cee:	f1bb 0f02 	cmp.w	fp, #2
 8004cf2:	f47f af55 	bne.w	8004ba0 <_scanf_float+0x70>
 8004cf6:	f04f 0b03 	mov.w	fp, #3
 8004cfa:	e7da      	b.n	8004cb2 <_scanf_float+0x182>
 8004cfc:	f1bb 0f06 	cmp.w	fp, #6
 8004d00:	f47f af4e 	bne.w	8004ba0 <_scanf_float+0x70>
 8004d04:	f04f 0b07 	mov.w	fp, #7
 8004d08:	e7d3      	b.n	8004cb2 <_scanf_float+0x182>
 8004d0a:	6821      	ldr	r1, [r4, #0]
 8004d0c:	0588      	lsls	r0, r1, #22
 8004d0e:	f57f af47 	bpl.w	8004ba0 <_scanf_float+0x70>
 8004d12:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8004d16:	6021      	str	r1, [r4, #0]
 8004d18:	f8cd 9008 	str.w	r9, [sp, #8]
 8004d1c:	e7c9      	b.n	8004cb2 <_scanf_float+0x182>
 8004d1e:	6821      	ldr	r1, [r4, #0]
 8004d20:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8004d24:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8004d28:	d006      	beq.n	8004d38 <_scanf_float+0x208>
 8004d2a:	0548      	lsls	r0, r1, #21
 8004d2c:	f57f af38 	bpl.w	8004ba0 <_scanf_float+0x70>
 8004d30:	f1b9 0f00 	cmp.w	r9, #0
 8004d34:	f43f af3b 	beq.w	8004bae <_scanf_float+0x7e>
 8004d38:	0588      	lsls	r0, r1, #22
 8004d3a:	bf58      	it	pl
 8004d3c:	9802      	ldrpl	r0, [sp, #8]
 8004d3e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8004d42:	bf58      	it	pl
 8004d44:	eba9 0000 	subpl.w	r0, r9, r0
 8004d48:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8004d4c:	bf58      	it	pl
 8004d4e:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8004d52:	6021      	str	r1, [r4, #0]
 8004d54:	f04f 0900 	mov.w	r9, #0
 8004d58:	e7ab      	b.n	8004cb2 <_scanf_float+0x182>
 8004d5a:	2203      	movs	r2, #3
 8004d5c:	e7a9      	b.n	8004cb2 <_scanf_float+0x182>
 8004d5e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004d62:	9205      	str	r2, [sp, #20]
 8004d64:	4631      	mov	r1, r6
 8004d66:	4638      	mov	r0, r7
 8004d68:	4798      	blx	r3
 8004d6a:	9a05      	ldr	r2, [sp, #20]
 8004d6c:	2800      	cmp	r0, #0
 8004d6e:	f43f af04 	beq.w	8004b7a <_scanf_float+0x4a>
 8004d72:	e715      	b.n	8004ba0 <_scanf_float+0x70>
 8004d74:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004d78:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8004d7c:	4632      	mov	r2, r6
 8004d7e:	4638      	mov	r0, r7
 8004d80:	4798      	blx	r3
 8004d82:	6923      	ldr	r3, [r4, #16]
 8004d84:	3b01      	subs	r3, #1
 8004d86:	6123      	str	r3, [r4, #16]
 8004d88:	e715      	b.n	8004bb6 <_scanf_float+0x86>
 8004d8a:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8004d8e:	2b06      	cmp	r3, #6
 8004d90:	d80a      	bhi.n	8004da8 <_scanf_float+0x278>
 8004d92:	f1bb 0f02 	cmp.w	fp, #2
 8004d96:	d968      	bls.n	8004e6a <_scanf_float+0x33a>
 8004d98:	f1ab 0b03 	sub.w	fp, fp, #3
 8004d9c:	fa5f fb8b 	uxtb.w	fp, fp
 8004da0:	eba5 0b0b 	sub.w	fp, r5, fp
 8004da4:	455d      	cmp	r5, fp
 8004da6:	d14b      	bne.n	8004e40 <_scanf_float+0x310>
 8004da8:	6823      	ldr	r3, [r4, #0]
 8004daa:	05da      	lsls	r2, r3, #23
 8004dac:	d51f      	bpl.n	8004dee <_scanf_float+0x2be>
 8004dae:	055b      	lsls	r3, r3, #21
 8004db0:	d468      	bmi.n	8004e84 <_scanf_float+0x354>
 8004db2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8004db6:	6923      	ldr	r3, [r4, #16]
 8004db8:	2965      	cmp	r1, #101	; 0x65
 8004dba:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8004dbe:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 8004dc2:	6123      	str	r3, [r4, #16]
 8004dc4:	d00d      	beq.n	8004de2 <_scanf_float+0x2b2>
 8004dc6:	2945      	cmp	r1, #69	; 0x45
 8004dc8:	d00b      	beq.n	8004de2 <_scanf_float+0x2b2>
 8004dca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004dce:	4632      	mov	r2, r6
 8004dd0:	4638      	mov	r0, r7
 8004dd2:	4798      	blx	r3
 8004dd4:	6923      	ldr	r3, [r4, #16]
 8004dd6:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8004dda:	3b01      	subs	r3, #1
 8004ddc:	f1a5 0b02 	sub.w	fp, r5, #2
 8004de0:	6123      	str	r3, [r4, #16]
 8004de2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004de6:	4632      	mov	r2, r6
 8004de8:	4638      	mov	r0, r7
 8004dea:	4798      	blx	r3
 8004dec:	465d      	mov	r5, fp
 8004dee:	6826      	ldr	r6, [r4, #0]
 8004df0:	f016 0610 	ands.w	r6, r6, #16
 8004df4:	d17a      	bne.n	8004eec <_scanf_float+0x3bc>
 8004df6:	702e      	strb	r6, [r5, #0]
 8004df8:	6823      	ldr	r3, [r4, #0]
 8004dfa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004dfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e02:	d142      	bne.n	8004e8a <_scanf_float+0x35a>
 8004e04:	9b02      	ldr	r3, [sp, #8]
 8004e06:	eba9 0303 	sub.w	r3, r9, r3
 8004e0a:	425a      	negs	r2, r3
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d149      	bne.n	8004ea4 <_scanf_float+0x374>
 8004e10:	2200      	movs	r2, #0
 8004e12:	4641      	mov	r1, r8
 8004e14:	4638      	mov	r0, r7
 8004e16:	f000 ff1f 	bl	8005c58 <_strtod_r>
 8004e1a:	6825      	ldr	r5, [r4, #0]
 8004e1c:	f8da 3000 	ldr.w	r3, [sl]
 8004e20:	f015 0f02 	tst.w	r5, #2
 8004e24:	f103 0204 	add.w	r2, r3, #4
 8004e28:	ec59 8b10 	vmov	r8, r9, d0
 8004e2c:	f8ca 2000 	str.w	r2, [sl]
 8004e30:	d043      	beq.n	8004eba <_scanf_float+0x38a>
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	e9c3 8900 	strd	r8, r9, [r3]
 8004e38:	68e3      	ldr	r3, [r4, #12]
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	60e3      	str	r3, [r4, #12]
 8004e3e:	e6be      	b.n	8004bbe <_scanf_float+0x8e>
 8004e40:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004e44:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8004e48:	4632      	mov	r2, r6
 8004e4a:	4638      	mov	r0, r7
 8004e4c:	4798      	blx	r3
 8004e4e:	6923      	ldr	r3, [r4, #16]
 8004e50:	3b01      	subs	r3, #1
 8004e52:	6123      	str	r3, [r4, #16]
 8004e54:	e7a6      	b.n	8004da4 <_scanf_float+0x274>
 8004e56:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004e5a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8004e5e:	4632      	mov	r2, r6
 8004e60:	4638      	mov	r0, r7
 8004e62:	4798      	blx	r3
 8004e64:	6923      	ldr	r3, [r4, #16]
 8004e66:	3b01      	subs	r3, #1
 8004e68:	6123      	str	r3, [r4, #16]
 8004e6a:	4545      	cmp	r5, r8
 8004e6c:	d8f3      	bhi.n	8004e56 <_scanf_float+0x326>
 8004e6e:	e6a5      	b.n	8004bbc <_scanf_float+0x8c>
 8004e70:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004e74:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8004e78:	4632      	mov	r2, r6
 8004e7a:	4638      	mov	r0, r7
 8004e7c:	4798      	blx	r3
 8004e7e:	6923      	ldr	r3, [r4, #16]
 8004e80:	3b01      	subs	r3, #1
 8004e82:	6123      	str	r3, [r4, #16]
 8004e84:	4545      	cmp	r5, r8
 8004e86:	d8f3      	bhi.n	8004e70 <_scanf_float+0x340>
 8004e88:	e698      	b.n	8004bbc <_scanf_float+0x8c>
 8004e8a:	9b03      	ldr	r3, [sp, #12]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d0bf      	beq.n	8004e10 <_scanf_float+0x2e0>
 8004e90:	9904      	ldr	r1, [sp, #16]
 8004e92:	230a      	movs	r3, #10
 8004e94:	4632      	mov	r2, r6
 8004e96:	3101      	adds	r1, #1
 8004e98:	4638      	mov	r0, r7
 8004e9a:	f000 ff69 	bl	8005d70 <_strtol_r>
 8004e9e:	9b03      	ldr	r3, [sp, #12]
 8004ea0:	9d04      	ldr	r5, [sp, #16]
 8004ea2:	1ac2      	subs	r2, r0, r3
 8004ea4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8004ea8:	429d      	cmp	r5, r3
 8004eaa:	bf28      	it	cs
 8004eac:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8004eb0:	490f      	ldr	r1, [pc, #60]	; (8004ef0 <_scanf_float+0x3c0>)
 8004eb2:	4628      	mov	r0, r5
 8004eb4:	f000 f8a0 	bl	8004ff8 <siprintf>
 8004eb8:	e7aa      	b.n	8004e10 <_scanf_float+0x2e0>
 8004eba:	f015 0504 	ands.w	r5, r5, #4
 8004ebe:	d1b8      	bne.n	8004e32 <_scanf_float+0x302>
 8004ec0:	681f      	ldr	r7, [r3, #0]
 8004ec2:	ee10 2a10 	vmov	r2, s0
 8004ec6:	464b      	mov	r3, r9
 8004ec8:	ee10 0a10 	vmov	r0, s0
 8004ecc:	4649      	mov	r1, r9
 8004ece:	f7fb fe2d 	bl	8000b2c <__aeabi_dcmpun>
 8004ed2:	b128      	cbz	r0, 8004ee0 <_scanf_float+0x3b0>
 8004ed4:	4628      	mov	r0, r5
 8004ed6:	f000 f889 	bl	8004fec <nanf>
 8004eda:	ed87 0a00 	vstr	s0, [r7]
 8004ede:	e7ab      	b.n	8004e38 <_scanf_float+0x308>
 8004ee0:	4640      	mov	r0, r8
 8004ee2:	4649      	mov	r1, r9
 8004ee4:	f7fb fe80 	bl	8000be8 <__aeabi_d2f>
 8004ee8:	6038      	str	r0, [r7, #0]
 8004eea:	e7a5      	b.n	8004e38 <_scanf_float+0x308>
 8004eec:	2600      	movs	r6, #0
 8004eee:	e666      	b.n	8004bbe <_scanf_float+0x8e>
 8004ef0:	08008868 	.word	0x08008868

08004ef4 <iprintf>:
 8004ef4:	b40f      	push	{r0, r1, r2, r3}
 8004ef6:	4b0a      	ldr	r3, [pc, #40]	; (8004f20 <iprintf+0x2c>)
 8004ef8:	b513      	push	{r0, r1, r4, lr}
 8004efa:	681c      	ldr	r4, [r3, #0]
 8004efc:	b124      	cbz	r4, 8004f08 <iprintf+0x14>
 8004efe:	69a3      	ldr	r3, [r4, #24]
 8004f00:	b913      	cbnz	r3, 8004f08 <iprintf+0x14>
 8004f02:	4620      	mov	r0, r4
 8004f04:	f001 ff3c 	bl	8006d80 <__sinit>
 8004f08:	ab05      	add	r3, sp, #20
 8004f0a:	9a04      	ldr	r2, [sp, #16]
 8004f0c:	68a1      	ldr	r1, [r4, #8]
 8004f0e:	9301      	str	r3, [sp, #4]
 8004f10:	4620      	mov	r0, r4
 8004f12:	f003 f9a9 	bl	8008268 <_vfiprintf_r>
 8004f16:	b002      	add	sp, #8
 8004f18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f1c:	b004      	add	sp, #16
 8004f1e:	4770      	bx	lr
 8004f20:	2000000c 	.word	0x2000000c

08004f24 <_puts_r>:
 8004f24:	b570      	push	{r4, r5, r6, lr}
 8004f26:	460e      	mov	r6, r1
 8004f28:	4605      	mov	r5, r0
 8004f2a:	b118      	cbz	r0, 8004f34 <_puts_r+0x10>
 8004f2c:	6983      	ldr	r3, [r0, #24]
 8004f2e:	b90b      	cbnz	r3, 8004f34 <_puts_r+0x10>
 8004f30:	f001 ff26 	bl	8006d80 <__sinit>
 8004f34:	69ab      	ldr	r3, [r5, #24]
 8004f36:	68ac      	ldr	r4, [r5, #8]
 8004f38:	b913      	cbnz	r3, 8004f40 <_puts_r+0x1c>
 8004f3a:	4628      	mov	r0, r5
 8004f3c:	f001 ff20 	bl	8006d80 <__sinit>
 8004f40:	4b23      	ldr	r3, [pc, #140]	; (8004fd0 <_puts_r+0xac>)
 8004f42:	429c      	cmp	r4, r3
 8004f44:	d117      	bne.n	8004f76 <_puts_r+0x52>
 8004f46:	686c      	ldr	r4, [r5, #4]
 8004f48:	89a3      	ldrh	r3, [r4, #12]
 8004f4a:	071b      	lsls	r3, r3, #28
 8004f4c:	d51d      	bpl.n	8004f8a <_puts_r+0x66>
 8004f4e:	6923      	ldr	r3, [r4, #16]
 8004f50:	b1db      	cbz	r3, 8004f8a <_puts_r+0x66>
 8004f52:	3e01      	subs	r6, #1
 8004f54:	68a3      	ldr	r3, [r4, #8]
 8004f56:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004f5a:	3b01      	subs	r3, #1
 8004f5c:	60a3      	str	r3, [r4, #8]
 8004f5e:	b9e9      	cbnz	r1, 8004f9c <_puts_r+0x78>
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	da2e      	bge.n	8004fc2 <_puts_r+0x9e>
 8004f64:	4622      	mov	r2, r4
 8004f66:	210a      	movs	r1, #10
 8004f68:	4628      	mov	r0, r5
 8004f6a:	f000 ff13 	bl	8005d94 <__swbuf_r>
 8004f6e:	3001      	adds	r0, #1
 8004f70:	d011      	beq.n	8004f96 <_puts_r+0x72>
 8004f72:	200a      	movs	r0, #10
 8004f74:	e011      	b.n	8004f9a <_puts_r+0x76>
 8004f76:	4b17      	ldr	r3, [pc, #92]	; (8004fd4 <_puts_r+0xb0>)
 8004f78:	429c      	cmp	r4, r3
 8004f7a:	d101      	bne.n	8004f80 <_puts_r+0x5c>
 8004f7c:	68ac      	ldr	r4, [r5, #8]
 8004f7e:	e7e3      	b.n	8004f48 <_puts_r+0x24>
 8004f80:	4b15      	ldr	r3, [pc, #84]	; (8004fd8 <_puts_r+0xb4>)
 8004f82:	429c      	cmp	r4, r3
 8004f84:	bf08      	it	eq
 8004f86:	68ec      	ldreq	r4, [r5, #12]
 8004f88:	e7de      	b.n	8004f48 <_puts_r+0x24>
 8004f8a:	4621      	mov	r1, r4
 8004f8c:	4628      	mov	r0, r5
 8004f8e:	f000 ff53 	bl	8005e38 <__swsetup_r>
 8004f92:	2800      	cmp	r0, #0
 8004f94:	d0dd      	beq.n	8004f52 <_puts_r+0x2e>
 8004f96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f9a:	bd70      	pop	{r4, r5, r6, pc}
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	da04      	bge.n	8004faa <_puts_r+0x86>
 8004fa0:	69a2      	ldr	r2, [r4, #24]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	dc06      	bgt.n	8004fb4 <_puts_r+0x90>
 8004fa6:	290a      	cmp	r1, #10
 8004fa8:	d004      	beq.n	8004fb4 <_puts_r+0x90>
 8004faa:	6823      	ldr	r3, [r4, #0]
 8004fac:	1c5a      	adds	r2, r3, #1
 8004fae:	6022      	str	r2, [r4, #0]
 8004fb0:	7019      	strb	r1, [r3, #0]
 8004fb2:	e7cf      	b.n	8004f54 <_puts_r+0x30>
 8004fb4:	4622      	mov	r2, r4
 8004fb6:	4628      	mov	r0, r5
 8004fb8:	f000 feec 	bl	8005d94 <__swbuf_r>
 8004fbc:	3001      	adds	r0, #1
 8004fbe:	d1c9      	bne.n	8004f54 <_puts_r+0x30>
 8004fc0:	e7e9      	b.n	8004f96 <_puts_r+0x72>
 8004fc2:	6823      	ldr	r3, [r4, #0]
 8004fc4:	200a      	movs	r0, #10
 8004fc6:	1c5a      	adds	r2, r3, #1
 8004fc8:	6022      	str	r2, [r4, #0]
 8004fca:	7018      	strb	r0, [r3, #0]
 8004fcc:	e7e5      	b.n	8004f9a <_puts_r+0x76>
 8004fce:	bf00      	nop
 8004fd0:	080088f0 	.word	0x080088f0
 8004fd4:	08008910 	.word	0x08008910
 8004fd8:	080088d0 	.word	0x080088d0

08004fdc <puts>:
 8004fdc:	4b02      	ldr	r3, [pc, #8]	; (8004fe8 <puts+0xc>)
 8004fde:	4601      	mov	r1, r0
 8004fe0:	6818      	ldr	r0, [r3, #0]
 8004fe2:	f7ff bf9f 	b.w	8004f24 <_puts_r>
 8004fe6:	bf00      	nop
 8004fe8:	2000000c 	.word	0x2000000c

08004fec <nanf>:
 8004fec:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8004ff4 <nanf+0x8>
 8004ff0:	4770      	bx	lr
 8004ff2:	bf00      	nop
 8004ff4:	7fc00000 	.word	0x7fc00000

08004ff8 <siprintf>:
 8004ff8:	b40e      	push	{r1, r2, r3}
 8004ffa:	b500      	push	{lr}
 8004ffc:	b09c      	sub	sp, #112	; 0x70
 8004ffe:	ab1d      	add	r3, sp, #116	; 0x74
 8005000:	9002      	str	r0, [sp, #8]
 8005002:	9006      	str	r0, [sp, #24]
 8005004:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005008:	4809      	ldr	r0, [pc, #36]	; (8005030 <siprintf+0x38>)
 800500a:	9107      	str	r1, [sp, #28]
 800500c:	9104      	str	r1, [sp, #16]
 800500e:	4909      	ldr	r1, [pc, #36]	; (8005034 <siprintf+0x3c>)
 8005010:	f853 2b04 	ldr.w	r2, [r3], #4
 8005014:	9105      	str	r1, [sp, #20]
 8005016:	6800      	ldr	r0, [r0, #0]
 8005018:	9301      	str	r3, [sp, #4]
 800501a:	a902      	add	r1, sp, #8
 800501c:	f003 f802 	bl	8008024 <_svfiprintf_r>
 8005020:	9b02      	ldr	r3, [sp, #8]
 8005022:	2200      	movs	r2, #0
 8005024:	701a      	strb	r2, [r3, #0]
 8005026:	b01c      	add	sp, #112	; 0x70
 8005028:	f85d eb04 	ldr.w	lr, [sp], #4
 800502c:	b003      	add	sp, #12
 800502e:	4770      	bx	lr
 8005030:	2000000c 	.word	0x2000000c
 8005034:	ffff0208 	.word	0xffff0208

08005038 <sulp>:
 8005038:	b570      	push	{r4, r5, r6, lr}
 800503a:	4604      	mov	r4, r0
 800503c:	460d      	mov	r5, r1
 800503e:	ec45 4b10 	vmov	d0, r4, r5
 8005042:	4616      	mov	r6, r2
 8005044:	f002 fdaa 	bl	8007b9c <__ulp>
 8005048:	ec51 0b10 	vmov	r0, r1, d0
 800504c:	b17e      	cbz	r6, 800506e <sulp+0x36>
 800504e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005052:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005056:	2b00      	cmp	r3, #0
 8005058:	dd09      	ble.n	800506e <sulp+0x36>
 800505a:	051b      	lsls	r3, r3, #20
 800505c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005060:	2400      	movs	r4, #0
 8005062:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005066:	4622      	mov	r2, r4
 8005068:	462b      	mov	r3, r5
 800506a:	f7fb fac5 	bl	80005f8 <__aeabi_dmul>
 800506e:	bd70      	pop	{r4, r5, r6, pc}

08005070 <_strtod_l>:
 8005070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005074:	461f      	mov	r7, r3
 8005076:	b0a1      	sub	sp, #132	; 0x84
 8005078:	2300      	movs	r3, #0
 800507a:	4681      	mov	r9, r0
 800507c:	4638      	mov	r0, r7
 800507e:	460e      	mov	r6, r1
 8005080:	9217      	str	r2, [sp, #92]	; 0x5c
 8005082:	931c      	str	r3, [sp, #112]	; 0x70
 8005084:	f002 fa2f 	bl	80074e6 <__localeconv_l>
 8005088:	4680      	mov	r8, r0
 800508a:	6800      	ldr	r0, [r0, #0]
 800508c:	f7fb f8a0 	bl	80001d0 <strlen>
 8005090:	f04f 0a00 	mov.w	sl, #0
 8005094:	4604      	mov	r4, r0
 8005096:	f04f 0b00 	mov.w	fp, #0
 800509a:	961b      	str	r6, [sp, #108]	; 0x6c
 800509c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800509e:	781a      	ldrb	r2, [r3, #0]
 80050a0:	2a0d      	cmp	r2, #13
 80050a2:	d832      	bhi.n	800510a <_strtod_l+0x9a>
 80050a4:	2a09      	cmp	r2, #9
 80050a6:	d236      	bcs.n	8005116 <_strtod_l+0xa6>
 80050a8:	2a00      	cmp	r2, #0
 80050aa:	d03e      	beq.n	800512a <_strtod_l+0xba>
 80050ac:	2300      	movs	r3, #0
 80050ae:	930d      	str	r3, [sp, #52]	; 0x34
 80050b0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80050b2:	782b      	ldrb	r3, [r5, #0]
 80050b4:	2b30      	cmp	r3, #48	; 0x30
 80050b6:	f040 80ac 	bne.w	8005212 <_strtod_l+0x1a2>
 80050ba:	786b      	ldrb	r3, [r5, #1]
 80050bc:	2b58      	cmp	r3, #88	; 0x58
 80050be:	d001      	beq.n	80050c4 <_strtod_l+0x54>
 80050c0:	2b78      	cmp	r3, #120	; 0x78
 80050c2:	d167      	bne.n	8005194 <_strtod_l+0x124>
 80050c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80050c6:	9301      	str	r3, [sp, #4]
 80050c8:	ab1c      	add	r3, sp, #112	; 0x70
 80050ca:	9300      	str	r3, [sp, #0]
 80050cc:	9702      	str	r7, [sp, #8]
 80050ce:	ab1d      	add	r3, sp, #116	; 0x74
 80050d0:	4a88      	ldr	r2, [pc, #544]	; (80052f4 <_strtod_l+0x284>)
 80050d2:	a91b      	add	r1, sp, #108	; 0x6c
 80050d4:	4648      	mov	r0, r9
 80050d6:	f001 ff2c 	bl	8006f32 <__gethex>
 80050da:	f010 0407 	ands.w	r4, r0, #7
 80050de:	4606      	mov	r6, r0
 80050e0:	d005      	beq.n	80050ee <_strtod_l+0x7e>
 80050e2:	2c06      	cmp	r4, #6
 80050e4:	d12b      	bne.n	800513e <_strtod_l+0xce>
 80050e6:	3501      	adds	r5, #1
 80050e8:	2300      	movs	r3, #0
 80050ea:	951b      	str	r5, [sp, #108]	; 0x6c
 80050ec:	930d      	str	r3, [sp, #52]	; 0x34
 80050ee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	f040 859a 	bne.w	8005c2a <_strtod_l+0xbba>
 80050f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80050f8:	b1e3      	cbz	r3, 8005134 <_strtod_l+0xc4>
 80050fa:	4652      	mov	r2, sl
 80050fc:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005100:	ec43 2b10 	vmov	d0, r2, r3
 8005104:	b021      	add	sp, #132	; 0x84
 8005106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800510a:	2a2b      	cmp	r2, #43	; 0x2b
 800510c:	d015      	beq.n	800513a <_strtod_l+0xca>
 800510e:	2a2d      	cmp	r2, #45	; 0x2d
 8005110:	d004      	beq.n	800511c <_strtod_l+0xac>
 8005112:	2a20      	cmp	r2, #32
 8005114:	d1ca      	bne.n	80050ac <_strtod_l+0x3c>
 8005116:	3301      	adds	r3, #1
 8005118:	931b      	str	r3, [sp, #108]	; 0x6c
 800511a:	e7bf      	b.n	800509c <_strtod_l+0x2c>
 800511c:	2201      	movs	r2, #1
 800511e:	920d      	str	r2, [sp, #52]	; 0x34
 8005120:	1c5a      	adds	r2, r3, #1
 8005122:	921b      	str	r2, [sp, #108]	; 0x6c
 8005124:	785b      	ldrb	r3, [r3, #1]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d1c2      	bne.n	80050b0 <_strtod_l+0x40>
 800512a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800512c:	961b      	str	r6, [sp, #108]	; 0x6c
 800512e:	2b00      	cmp	r3, #0
 8005130:	f040 8579 	bne.w	8005c26 <_strtod_l+0xbb6>
 8005134:	4652      	mov	r2, sl
 8005136:	465b      	mov	r3, fp
 8005138:	e7e2      	b.n	8005100 <_strtod_l+0x90>
 800513a:	2200      	movs	r2, #0
 800513c:	e7ef      	b.n	800511e <_strtod_l+0xae>
 800513e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005140:	b13a      	cbz	r2, 8005152 <_strtod_l+0xe2>
 8005142:	2135      	movs	r1, #53	; 0x35
 8005144:	a81e      	add	r0, sp, #120	; 0x78
 8005146:	f002 fe21 	bl	8007d8c <__copybits>
 800514a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800514c:	4648      	mov	r0, r9
 800514e:	f002 fa8d 	bl	800766c <_Bfree>
 8005152:	3c01      	subs	r4, #1
 8005154:	2c04      	cmp	r4, #4
 8005156:	d806      	bhi.n	8005166 <_strtod_l+0xf6>
 8005158:	e8df f004 	tbb	[pc, r4]
 800515c:	1714030a 	.word	0x1714030a
 8005160:	0a          	.byte	0x0a
 8005161:	00          	.byte	0x00
 8005162:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8005166:	0730      	lsls	r0, r6, #28
 8005168:	d5c1      	bpl.n	80050ee <_strtod_l+0x7e>
 800516a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800516e:	e7be      	b.n	80050ee <_strtod_l+0x7e>
 8005170:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8005174:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8005176:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800517a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800517e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005182:	e7f0      	b.n	8005166 <_strtod_l+0xf6>
 8005184:	f8df b170 	ldr.w	fp, [pc, #368]	; 80052f8 <_strtod_l+0x288>
 8005188:	e7ed      	b.n	8005166 <_strtod_l+0xf6>
 800518a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800518e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8005192:	e7e8      	b.n	8005166 <_strtod_l+0xf6>
 8005194:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005196:	1c5a      	adds	r2, r3, #1
 8005198:	921b      	str	r2, [sp, #108]	; 0x6c
 800519a:	785b      	ldrb	r3, [r3, #1]
 800519c:	2b30      	cmp	r3, #48	; 0x30
 800519e:	d0f9      	beq.n	8005194 <_strtod_l+0x124>
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d0a4      	beq.n	80050ee <_strtod_l+0x7e>
 80051a4:	2301      	movs	r3, #1
 80051a6:	2500      	movs	r5, #0
 80051a8:	9306      	str	r3, [sp, #24]
 80051aa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80051ac:	9308      	str	r3, [sp, #32]
 80051ae:	9507      	str	r5, [sp, #28]
 80051b0:	9505      	str	r5, [sp, #20]
 80051b2:	220a      	movs	r2, #10
 80051b4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80051b6:	7807      	ldrb	r7, [r0, #0]
 80051b8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80051bc:	b2d9      	uxtb	r1, r3
 80051be:	2909      	cmp	r1, #9
 80051c0:	d929      	bls.n	8005216 <_strtod_l+0x1a6>
 80051c2:	4622      	mov	r2, r4
 80051c4:	f8d8 1000 	ldr.w	r1, [r8]
 80051c8:	f003 f9b7 	bl	800853a <strncmp>
 80051cc:	2800      	cmp	r0, #0
 80051ce:	d031      	beq.n	8005234 <_strtod_l+0x1c4>
 80051d0:	2000      	movs	r0, #0
 80051d2:	9c05      	ldr	r4, [sp, #20]
 80051d4:	9004      	str	r0, [sp, #16]
 80051d6:	463b      	mov	r3, r7
 80051d8:	4602      	mov	r2, r0
 80051da:	2b65      	cmp	r3, #101	; 0x65
 80051dc:	d001      	beq.n	80051e2 <_strtod_l+0x172>
 80051de:	2b45      	cmp	r3, #69	; 0x45
 80051e0:	d114      	bne.n	800520c <_strtod_l+0x19c>
 80051e2:	b924      	cbnz	r4, 80051ee <_strtod_l+0x17e>
 80051e4:	b910      	cbnz	r0, 80051ec <_strtod_l+0x17c>
 80051e6:	9b06      	ldr	r3, [sp, #24]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d09e      	beq.n	800512a <_strtod_l+0xba>
 80051ec:	2400      	movs	r4, #0
 80051ee:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80051f0:	1c73      	adds	r3, r6, #1
 80051f2:	931b      	str	r3, [sp, #108]	; 0x6c
 80051f4:	7873      	ldrb	r3, [r6, #1]
 80051f6:	2b2b      	cmp	r3, #43	; 0x2b
 80051f8:	d078      	beq.n	80052ec <_strtod_l+0x27c>
 80051fa:	2b2d      	cmp	r3, #45	; 0x2d
 80051fc:	d070      	beq.n	80052e0 <_strtod_l+0x270>
 80051fe:	f04f 0c00 	mov.w	ip, #0
 8005202:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8005206:	2f09      	cmp	r7, #9
 8005208:	d97c      	bls.n	8005304 <_strtod_l+0x294>
 800520a:	961b      	str	r6, [sp, #108]	; 0x6c
 800520c:	f04f 0e00 	mov.w	lr, #0
 8005210:	e09a      	b.n	8005348 <_strtod_l+0x2d8>
 8005212:	2300      	movs	r3, #0
 8005214:	e7c7      	b.n	80051a6 <_strtod_l+0x136>
 8005216:	9905      	ldr	r1, [sp, #20]
 8005218:	2908      	cmp	r1, #8
 800521a:	bfdd      	ittte	le
 800521c:	9907      	ldrle	r1, [sp, #28]
 800521e:	fb02 3301 	mlale	r3, r2, r1, r3
 8005222:	9307      	strle	r3, [sp, #28]
 8005224:	fb02 3505 	mlagt	r5, r2, r5, r3
 8005228:	9b05      	ldr	r3, [sp, #20]
 800522a:	3001      	adds	r0, #1
 800522c:	3301      	adds	r3, #1
 800522e:	9305      	str	r3, [sp, #20]
 8005230:	901b      	str	r0, [sp, #108]	; 0x6c
 8005232:	e7bf      	b.n	80051b4 <_strtod_l+0x144>
 8005234:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005236:	191a      	adds	r2, r3, r4
 8005238:	921b      	str	r2, [sp, #108]	; 0x6c
 800523a:	9a05      	ldr	r2, [sp, #20]
 800523c:	5d1b      	ldrb	r3, [r3, r4]
 800523e:	2a00      	cmp	r2, #0
 8005240:	d037      	beq.n	80052b2 <_strtod_l+0x242>
 8005242:	9c05      	ldr	r4, [sp, #20]
 8005244:	4602      	mov	r2, r0
 8005246:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800524a:	2909      	cmp	r1, #9
 800524c:	d913      	bls.n	8005276 <_strtod_l+0x206>
 800524e:	2101      	movs	r1, #1
 8005250:	9104      	str	r1, [sp, #16]
 8005252:	e7c2      	b.n	80051da <_strtod_l+0x16a>
 8005254:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005256:	1c5a      	adds	r2, r3, #1
 8005258:	921b      	str	r2, [sp, #108]	; 0x6c
 800525a:	785b      	ldrb	r3, [r3, #1]
 800525c:	3001      	adds	r0, #1
 800525e:	2b30      	cmp	r3, #48	; 0x30
 8005260:	d0f8      	beq.n	8005254 <_strtod_l+0x1e4>
 8005262:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8005266:	2a08      	cmp	r2, #8
 8005268:	f200 84e4 	bhi.w	8005c34 <_strtod_l+0xbc4>
 800526c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800526e:	9208      	str	r2, [sp, #32]
 8005270:	4602      	mov	r2, r0
 8005272:	2000      	movs	r0, #0
 8005274:	4604      	mov	r4, r0
 8005276:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800527a:	f100 0101 	add.w	r1, r0, #1
 800527e:	d012      	beq.n	80052a6 <_strtod_l+0x236>
 8005280:	440a      	add	r2, r1
 8005282:	eb00 0c04 	add.w	ip, r0, r4
 8005286:	4621      	mov	r1, r4
 8005288:	270a      	movs	r7, #10
 800528a:	458c      	cmp	ip, r1
 800528c:	d113      	bne.n	80052b6 <_strtod_l+0x246>
 800528e:	1821      	adds	r1, r4, r0
 8005290:	2908      	cmp	r1, #8
 8005292:	f104 0401 	add.w	r4, r4, #1
 8005296:	4404      	add	r4, r0
 8005298:	dc19      	bgt.n	80052ce <_strtod_l+0x25e>
 800529a:	9b07      	ldr	r3, [sp, #28]
 800529c:	210a      	movs	r1, #10
 800529e:	fb01 e303 	mla	r3, r1, r3, lr
 80052a2:	9307      	str	r3, [sp, #28]
 80052a4:	2100      	movs	r1, #0
 80052a6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80052a8:	1c58      	adds	r0, r3, #1
 80052aa:	901b      	str	r0, [sp, #108]	; 0x6c
 80052ac:	785b      	ldrb	r3, [r3, #1]
 80052ae:	4608      	mov	r0, r1
 80052b0:	e7c9      	b.n	8005246 <_strtod_l+0x1d6>
 80052b2:	9805      	ldr	r0, [sp, #20]
 80052b4:	e7d3      	b.n	800525e <_strtod_l+0x1ee>
 80052b6:	2908      	cmp	r1, #8
 80052b8:	f101 0101 	add.w	r1, r1, #1
 80052bc:	dc03      	bgt.n	80052c6 <_strtod_l+0x256>
 80052be:	9b07      	ldr	r3, [sp, #28]
 80052c0:	437b      	muls	r3, r7
 80052c2:	9307      	str	r3, [sp, #28]
 80052c4:	e7e1      	b.n	800528a <_strtod_l+0x21a>
 80052c6:	2910      	cmp	r1, #16
 80052c8:	bfd8      	it	le
 80052ca:	437d      	mulle	r5, r7
 80052cc:	e7dd      	b.n	800528a <_strtod_l+0x21a>
 80052ce:	2c10      	cmp	r4, #16
 80052d0:	bfdc      	itt	le
 80052d2:	210a      	movle	r1, #10
 80052d4:	fb01 e505 	mlale	r5, r1, r5, lr
 80052d8:	e7e4      	b.n	80052a4 <_strtod_l+0x234>
 80052da:	2301      	movs	r3, #1
 80052dc:	9304      	str	r3, [sp, #16]
 80052de:	e781      	b.n	80051e4 <_strtod_l+0x174>
 80052e0:	f04f 0c01 	mov.w	ip, #1
 80052e4:	1cb3      	adds	r3, r6, #2
 80052e6:	931b      	str	r3, [sp, #108]	; 0x6c
 80052e8:	78b3      	ldrb	r3, [r6, #2]
 80052ea:	e78a      	b.n	8005202 <_strtod_l+0x192>
 80052ec:	f04f 0c00 	mov.w	ip, #0
 80052f0:	e7f8      	b.n	80052e4 <_strtod_l+0x274>
 80052f2:	bf00      	nop
 80052f4:	08008870 	.word	0x08008870
 80052f8:	7ff00000 	.word	0x7ff00000
 80052fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80052fe:	1c5f      	adds	r7, r3, #1
 8005300:	971b      	str	r7, [sp, #108]	; 0x6c
 8005302:	785b      	ldrb	r3, [r3, #1]
 8005304:	2b30      	cmp	r3, #48	; 0x30
 8005306:	d0f9      	beq.n	80052fc <_strtod_l+0x28c>
 8005308:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800530c:	2f08      	cmp	r7, #8
 800530e:	f63f af7d 	bhi.w	800520c <_strtod_l+0x19c>
 8005312:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8005316:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005318:	930a      	str	r3, [sp, #40]	; 0x28
 800531a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800531c:	1c5f      	adds	r7, r3, #1
 800531e:	971b      	str	r7, [sp, #108]	; 0x6c
 8005320:	785b      	ldrb	r3, [r3, #1]
 8005322:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8005326:	f1b8 0f09 	cmp.w	r8, #9
 800532a:	d937      	bls.n	800539c <_strtod_l+0x32c>
 800532c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800532e:	1a7f      	subs	r7, r7, r1
 8005330:	2f08      	cmp	r7, #8
 8005332:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8005336:	dc37      	bgt.n	80053a8 <_strtod_l+0x338>
 8005338:	45be      	cmp	lr, r7
 800533a:	bfa8      	it	ge
 800533c:	46be      	movge	lr, r7
 800533e:	f1bc 0f00 	cmp.w	ip, #0
 8005342:	d001      	beq.n	8005348 <_strtod_l+0x2d8>
 8005344:	f1ce 0e00 	rsb	lr, lr, #0
 8005348:	2c00      	cmp	r4, #0
 800534a:	d151      	bne.n	80053f0 <_strtod_l+0x380>
 800534c:	2800      	cmp	r0, #0
 800534e:	f47f aece 	bne.w	80050ee <_strtod_l+0x7e>
 8005352:	9a06      	ldr	r2, [sp, #24]
 8005354:	2a00      	cmp	r2, #0
 8005356:	f47f aeca 	bne.w	80050ee <_strtod_l+0x7e>
 800535a:	9a04      	ldr	r2, [sp, #16]
 800535c:	2a00      	cmp	r2, #0
 800535e:	f47f aee4 	bne.w	800512a <_strtod_l+0xba>
 8005362:	2b4e      	cmp	r3, #78	; 0x4e
 8005364:	d027      	beq.n	80053b6 <_strtod_l+0x346>
 8005366:	dc21      	bgt.n	80053ac <_strtod_l+0x33c>
 8005368:	2b49      	cmp	r3, #73	; 0x49
 800536a:	f47f aede 	bne.w	800512a <_strtod_l+0xba>
 800536e:	49a0      	ldr	r1, [pc, #640]	; (80055f0 <_strtod_l+0x580>)
 8005370:	a81b      	add	r0, sp, #108	; 0x6c
 8005372:	f002 f811 	bl	8007398 <__match>
 8005376:	2800      	cmp	r0, #0
 8005378:	f43f aed7 	beq.w	800512a <_strtod_l+0xba>
 800537c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800537e:	499d      	ldr	r1, [pc, #628]	; (80055f4 <_strtod_l+0x584>)
 8005380:	3b01      	subs	r3, #1
 8005382:	a81b      	add	r0, sp, #108	; 0x6c
 8005384:	931b      	str	r3, [sp, #108]	; 0x6c
 8005386:	f002 f807 	bl	8007398 <__match>
 800538a:	b910      	cbnz	r0, 8005392 <_strtod_l+0x322>
 800538c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800538e:	3301      	adds	r3, #1
 8005390:	931b      	str	r3, [sp, #108]	; 0x6c
 8005392:	f8df b274 	ldr.w	fp, [pc, #628]	; 8005608 <_strtod_l+0x598>
 8005396:	f04f 0a00 	mov.w	sl, #0
 800539a:	e6a8      	b.n	80050ee <_strtod_l+0x7e>
 800539c:	210a      	movs	r1, #10
 800539e:	fb01 3e0e 	mla	lr, r1, lr, r3
 80053a2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80053a6:	e7b8      	b.n	800531a <_strtod_l+0x2aa>
 80053a8:	46be      	mov	lr, r7
 80053aa:	e7c8      	b.n	800533e <_strtod_l+0x2ce>
 80053ac:	2b69      	cmp	r3, #105	; 0x69
 80053ae:	d0de      	beq.n	800536e <_strtod_l+0x2fe>
 80053b0:	2b6e      	cmp	r3, #110	; 0x6e
 80053b2:	f47f aeba 	bne.w	800512a <_strtod_l+0xba>
 80053b6:	4990      	ldr	r1, [pc, #576]	; (80055f8 <_strtod_l+0x588>)
 80053b8:	a81b      	add	r0, sp, #108	; 0x6c
 80053ba:	f001 ffed 	bl	8007398 <__match>
 80053be:	2800      	cmp	r0, #0
 80053c0:	f43f aeb3 	beq.w	800512a <_strtod_l+0xba>
 80053c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	2b28      	cmp	r3, #40	; 0x28
 80053ca:	d10e      	bne.n	80053ea <_strtod_l+0x37a>
 80053cc:	aa1e      	add	r2, sp, #120	; 0x78
 80053ce:	498b      	ldr	r1, [pc, #556]	; (80055fc <_strtod_l+0x58c>)
 80053d0:	a81b      	add	r0, sp, #108	; 0x6c
 80053d2:	f001 fff5 	bl	80073c0 <__hexnan>
 80053d6:	2805      	cmp	r0, #5
 80053d8:	d107      	bne.n	80053ea <_strtod_l+0x37a>
 80053da:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80053dc:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 80053e0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80053e4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80053e8:	e681      	b.n	80050ee <_strtod_l+0x7e>
 80053ea:	f8df b224 	ldr.w	fp, [pc, #548]	; 8005610 <_strtod_l+0x5a0>
 80053ee:	e7d2      	b.n	8005396 <_strtod_l+0x326>
 80053f0:	ebae 0302 	sub.w	r3, lr, r2
 80053f4:	9306      	str	r3, [sp, #24]
 80053f6:	9b05      	ldr	r3, [sp, #20]
 80053f8:	9807      	ldr	r0, [sp, #28]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	bf08      	it	eq
 80053fe:	4623      	moveq	r3, r4
 8005400:	2c10      	cmp	r4, #16
 8005402:	9305      	str	r3, [sp, #20]
 8005404:	46a0      	mov	r8, r4
 8005406:	bfa8      	it	ge
 8005408:	f04f 0810 	movge.w	r8, #16
 800540c:	f7fb f87a 	bl	8000504 <__aeabi_ui2d>
 8005410:	2c09      	cmp	r4, #9
 8005412:	4682      	mov	sl, r0
 8005414:	468b      	mov	fp, r1
 8005416:	dc13      	bgt.n	8005440 <_strtod_l+0x3d0>
 8005418:	9b06      	ldr	r3, [sp, #24]
 800541a:	2b00      	cmp	r3, #0
 800541c:	f43f ae67 	beq.w	80050ee <_strtod_l+0x7e>
 8005420:	9b06      	ldr	r3, [sp, #24]
 8005422:	dd7a      	ble.n	800551a <_strtod_l+0x4aa>
 8005424:	2b16      	cmp	r3, #22
 8005426:	dc61      	bgt.n	80054ec <_strtod_l+0x47c>
 8005428:	4a75      	ldr	r2, [pc, #468]	; (8005600 <_strtod_l+0x590>)
 800542a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800542e:	e9de 0100 	ldrd	r0, r1, [lr]
 8005432:	4652      	mov	r2, sl
 8005434:	465b      	mov	r3, fp
 8005436:	f7fb f8df 	bl	80005f8 <__aeabi_dmul>
 800543a:	4682      	mov	sl, r0
 800543c:	468b      	mov	fp, r1
 800543e:	e656      	b.n	80050ee <_strtod_l+0x7e>
 8005440:	4b6f      	ldr	r3, [pc, #444]	; (8005600 <_strtod_l+0x590>)
 8005442:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005446:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800544a:	f7fb f8d5 	bl	80005f8 <__aeabi_dmul>
 800544e:	4606      	mov	r6, r0
 8005450:	4628      	mov	r0, r5
 8005452:	460f      	mov	r7, r1
 8005454:	f7fb f856 	bl	8000504 <__aeabi_ui2d>
 8005458:	4602      	mov	r2, r0
 800545a:	460b      	mov	r3, r1
 800545c:	4630      	mov	r0, r6
 800545e:	4639      	mov	r1, r7
 8005460:	f7fa ff14 	bl	800028c <__adddf3>
 8005464:	2c0f      	cmp	r4, #15
 8005466:	4682      	mov	sl, r0
 8005468:	468b      	mov	fp, r1
 800546a:	ddd5      	ble.n	8005418 <_strtod_l+0x3a8>
 800546c:	9b06      	ldr	r3, [sp, #24]
 800546e:	eba4 0808 	sub.w	r8, r4, r8
 8005472:	4498      	add	r8, r3
 8005474:	f1b8 0f00 	cmp.w	r8, #0
 8005478:	f340 8096 	ble.w	80055a8 <_strtod_l+0x538>
 800547c:	f018 030f 	ands.w	r3, r8, #15
 8005480:	d00a      	beq.n	8005498 <_strtod_l+0x428>
 8005482:	495f      	ldr	r1, [pc, #380]	; (8005600 <_strtod_l+0x590>)
 8005484:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005488:	4652      	mov	r2, sl
 800548a:	465b      	mov	r3, fp
 800548c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005490:	f7fb f8b2 	bl	80005f8 <__aeabi_dmul>
 8005494:	4682      	mov	sl, r0
 8005496:	468b      	mov	fp, r1
 8005498:	f038 080f 	bics.w	r8, r8, #15
 800549c:	d073      	beq.n	8005586 <_strtod_l+0x516>
 800549e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80054a2:	dd47      	ble.n	8005534 <_strtod_l+0x4c4>
 80054a4:	2400      	movs	r4, #0
 80054a6:	46a0      	mov	r8, r4
 80054a8:	9407      	str	r4, [sp, #28]
 80054aa:	9405      	str	r4, [sp, #20]
 80054ac:	2322      	movs	r3, #34	; 0x22
 80054ae:	f8df b158 	ldr.w	fp, [pc, #344]	; 8005608 <_strtod_l+0x598>
 80054b2:	f8c9 3000 	str.w	r3, [r9]
 80054b6:	f04f 0a00 	mov.w	sl, #0
 80054ba:	9b07      	ldr	r3, [sp, #28]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	f43f ae16 	beq.w	80050ee <_strtod_l+0x7e>
 80054c2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80054c4:	4648      	mov	r0, r9
 80054c6:	f002 f8d1 	bl	800766c <_Bfree>
 80054ca:	9905      	ldr	r1, [sp, #20]
 80054cc:	4648      	mov	r0, r9
 80054ce:	f002 f8cd 	bl	800766c <_Bfree>
 80054d2:	4641      	mov	r1, r8
 80054d4:	4648      	mov	r0, r9
 80054d6:	f002 f8c9 	bl	800766c <_Bfree>
 80054da:	9907      	ldr	r1, [sp, #28]
 80054dc:	4648      	mov	r0, r9
 80054de:	f002 f8c5 	bl	800766c <_Bfree>
 80054e2:	4621      	mov	r1, r4
 80054e4:	4648      	mov	r0, r9
 80054e6:	f002 f8c1 	bl	800766c <_Bfree>
 80054ea:	e600      	b.n	80050ee <_strtod_l+0x7e>
 80054ec:	9a06      	ldr	r2, [sp, #24]
 80054ee:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80054f2:	4293      	cmp	r3, r2
 80054f4:	dbba      	blt.n	800546c <_strtod_l+0x3fc>
 80054f6:	4d42      	ldr	r5, [pc, #264]	; (8005600 <_strtod_l+0x590>)
 80054f8:	f1c4 040f 	rsb	r4, r4, #15
 80054fc:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8005500:	4652      	mov	r2, sl
 8005502:	465b      	mov	r3, fp
 8005504:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005508:	f7fb f876 	bl	80005f8 <__aeabi_dmul>
 800550c:	9b06      	ldr	r3, [sp, #24]
 800550e:	1b1c      	subs	r4, r3, r4
 8005510:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8005514:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005518:	e78d      	b.n	8005436 <_strtod_l+0x3c6>
 800551a:	f113 0f16 	cmn.w	r3, #22
 800551e:	dba5      	blt.n	800546c <_strtod_l+0x3fc>
 8005520:	4a37      	ldr	r2, [pc, #220]	; (8005600 <_strtod_l+0x590>)
 8005522:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8005526:	e9d2 2300 	ldrd	r2, r3, [r2]
 800552a:	4650      	mov	r0, sl
 800552c:	4659      	mov	r1, fp
 800552e:	f7fb f98d 	bl	800084c <__aeabi_ddiv>
 8005532:	e782      	b.n	800543a <_strtod_l+0x3ca>
 8005534:	2300      	movs	r3, #0
 8005536:	4e33      	ldr	r6, [pc, #204]	; (8005604 <_strtod_l+0x594>)
 8005538:	ea4f 1828 	mov.w	r8, r8, asr #4
 800553c:	4650      	mov	r0, sl
 800553e:	4659      	mov	r1, fp
 8005540:	461d      	mov	r5, r3
 8005542:	f1b8 0f01 	cmp.w	r8, #1
 8005546:	dc21      	bgt.n	800558c <_strtod_l+0x51c>
 8005548:	b10b      	cbz	r3, 800554e <_strtod_l+0x4de>
 800554a:	4682      	mov	sl, r0
 800554c:	468b      	mov	fp, r1
 800554e:	4b2d      	ldr	r3, [pc, #180]	; (8005604 <_strtod_l+0x594>)
 8005550:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8005554:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8005558:	4652      	mov	r2, sl
 800555a:	465b      	mov	r3, fp
 800555c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8005560:	f7fb f84a 	bl	80005f8 <__aeabi_dmul>
 8005564:	4b28      	ldr	r3, [pc, #160]	; (8005608 <_strtod_l+0x598>)
 8005566:	460a      	mov	r2, r1
 8005568:	400b      	ands	r3, r1
 800556a:	4928      	ldr	r1, [pc, #160]	; (800560c <_strtod_l+0x59c>)
 800556c:	428b      	cmp	r3, r1
 800556e:	4682      	mov	sl, r0
 8005570:	d898      	bhi.n	80054a4 <_strtod_l+0x434>
 8005572:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005576:	428b      	cmp	r3, r1
 8005578:	bf86      	itte	hi
 800557a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8005614 <_strtod_l+0x5a4>
 800557e:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8005582:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8005586:	2300      	movs	r3, #0
 8005588:	9304      	str	r3, [sp, #16]
 800558a:	e077      	b.n	800567c <_strtod_l+0x60c>
 800558c:	f018 0f01 	tst.w	r8, #1
 8005590:	d006      	beq.n	80055a0 <_strtod_l+0x530>
 8005592:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8005596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800559a:	f7fb f82d 	bl	80005f8 <__aeabi_dmul>
 800559e:	2301      	movs	r3, #1
 80055a0:	3501      	adds	r5, #1
 80055a2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80055a6:	e7cc      	b.n	8005542 <_strtod_l+0x4d2>
 80055a8:	d0ed      	beq.n	8005586 <_strtod_l+0x516>
 80055aa:	f1c8 0800 	rsb	r8, r8, #0
 80055ae:	f018 020f 	ands.w	r2, r8, #15
 80055b2:	d00a      	beq.n	80055ca <_strtod_l+0x55a>
 80055b4:	4b12      	ldr	r3, [pc, #72]	; (8005600 <_strtod_l+0x590>)
 80055b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80055ba:	4650      	mov	r0, sl
 80055bc:	4659      	mov	r1, fp
 80055be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c2:	f7fb f943 	bl	800084c <__aeabi_ddiv>
 80055c6:	4682      	mov	sl, r0
 80055c8:	468b      	mov	fp, r1
 80055ca:	ea5f 1828 	movs.w	r8, r8, asr #4
 80055ce:	d0da      	beq.n	8005586 <_strtod_l+0x516>
 80055d0:	f1b8 0f1f 	cmp.w	r8, #31
 80055d4:	dd20      	ble.n	8005618 <_strtod_l+0x5a8>
 80055d6:	2400      	movs	r4, #0
 80055d8:	46a0      	mov	r8, r4
 80055da:	9407      	str	r4, [sp, #28]
 80055dc:	9405      	str	r4, [sp, #20]
 80055de:	2322      	movs	r3, #34	; 0x22
 80055e0:	f04f 0a00 	mov.w	sl, #0
 80055e4:	f04f 0b00 	mov.w	fp, #0
 80055e8:	f8c9 3000 	str.w	r3, [r9]
 80055ec:	e765      	b.n	80054ba <_strtod_l+0x44a>
 80055ee:	bf00      	nop
 80055f0:	08008839 	.word	0x08008839
 80055f4:	080088c3 	.word	0x080088c3
 80055f8:	08008841 	.word	0x08008841
 80055fc:	08008884 	.word	0x08008884
 8005600:	08008968 	.word	0x08008968
 8005604:	08008940 	.word	0x08008940
 8005608:	7ff00000 	.word	0x7ff00000
 800560c:	7ca00000 	.word	0x7ca00000
 8005610:	fff80000 	.word	0xfff80000
 8005614:	7fefffff 	.word	0x7fefffff
 8005618:	f018 0310 	ands.w	r3, r8, #16
 800561c:	bf18      	it	ne
 800561e:	236a      	movne	r3, #106	; 0x6a
 8005620:	4da0      	ldr	r5, [pc, #640]	; (80058a4 <_strtod_l+0x834>)
 8005622:	9304      	str	r3, [sp, #16]
 8005624:	4650      	mov	r0, sl
 8005626:	4659      	mov	r1, fp
 8005628:	2300      	movs	r3, #0
 800562a:	f1b8 0f00 	cmp.w	r8, #0
 800562e:	f300 810a 	bgt.w	8005846 <_strtod_l+0x7d6>
 8005632:	b10b      	cbz	r3, 8005638 <_strtod_l+0x5c8>
 8005634:	4682      	mov	sl, r0
 8005636:	468b      	mov	fp, r1
 8005638:	9b04      	ldr	r3, [sp, #16]
 800563a:	b1bb      	cbz	r3, 800566c <_strtod_l+0x5fc>
 800563c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8005640:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005644:	2b00      	cmp	r3, #0
 8005646:	4659      	mov	r1, fp
 8005648:	dd10      	ble.n	800566c <_strtod_l+0x5fc>
 800564a:	2b1f      	cmp	r3, #31
 800564c:	f340 8107 	ble.w	800585e <_strtod_l+0x7ee>
 8005650:	2b34      	cmp	r3, #52	; 0x34
 8005652:	bfde      	ittt	le
 8005654:	3b20      	suble	r3, #32
 8005656:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 800565a:	fa02 f303 	lslle.w	r3, r2, r3
 800565e:	f04f 0a00 	mov.w	sl, #0
 8005662:	bfcc      	ite	gt
 8005664:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8005668:	ea03 0b01 	andle.w	fp, r3, r1
 800566c:	2200      	movs	r2, #0
 800566e:	2300      	movs	r3, #0
 8005670:	4650      	mov	r0, sl
 8005672:	4659      	mov	r1, fp
 8005674:	f7fb fa28 	bl	8000ac8 <__aeabi_dcmpeq>
 8005678:	2800      	cmp	r0, #0
 800567a:	d1ac      	bne.n	80055d6 <_strtod_l+0x566>
 800567c:	9b07      	ldr	r3, [sp, #28]
 800567e:	9300      	str	r3, [sp, #0]
 8005680:	9a05      	ldr	r2, [sp, #20]
 8005682:	9908      	ldr	r1, [sp, #32]
 8005684:	4623      	mov	r3, r4
 8005686:	4648      	mov	r0, r9
 8005688:	f002 f842 	bl	8007710 <__s2b>
 800568c:	9007      	str	r0, [sp, #28]
 800568e:	2800      	cmp	r0, #0
 8005690:	f43f af08 	beq.w	80054a4 <_strtod_l+0x434>
 8005694:	9a06      	ldr	r2, [sp, #24]
 8005696:	9b06      	ldr	r3, [sp, #24]
 8005698:	2a00      	cmp	r2, #0
 800569a:	f1c3 0300 	rsb	r3, r3, #0
 800569e:	bfa8      	it	ge
 80056a0:	2300      	movge	r3, #0
 80056a2:	930e      	str	r3, [sp, #56]	; 0x38
 80056a4:	2400      	movs	r4, #0
 80056a6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80056aa:	9316      	str	r3, [sp, #88]	; 0x58
 80056ac:	46a0      	mov	r8, r4
 80056ae:	9b07      	ldr	r3, [sp, #28]
 80056b0:	4648      	mov	r0, r9
 80056b2:	6859      	ldr	r1, [r3, #4]
 80056b4:	f001 ffa6 	bl	8007604 <_Balloc>
 80056b8:	9005      	str	r0, [sp, #20]
 80056ba:	2800      	cmp	r0, #0
 80056bc:	f43f aef6 	beq.w	80054ac <_strtod_l+0x43c>
 80056c0:	9b07      	ldr	r3, [sp, #28]
 80056c2:	691a      	ldr	r2, [r3, #16]
 80056c4:	3202      	adds	r2, #2
 80056c6:	f103 010c 	add.w	r1, r3, #12
 80056ca:	0092      	lsls	r2, r2, #2
 80056cc:	300c      	adds	r0, #12
 80056ce:	f7fe fdbf 	bl	8004250 <memcpy>
 80056d2:	aa1e      	add	r2, sp, #120	; 0x78
 80056d4:	a91d      	add	r1, sp, #116	; 0x74
 80056d6:	ec4b ab10 	vmov	d0, sl, fp
 80056da:	4648      	mov	r0, r9
 80056dc:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80056e0:	f002 fad2 	bl	8007c88 <__d2b>
 80056e4:	901c      	str	r0, [sp, #112]	; 0x70
 80056e6:	2800      	cmp	r0, #0
 80056e8:	f43f aee0 	beq.w	80054ac <_strtod_l+0x43c>
 80056ec:	2101      	movs	r1, #1
 80056ee:	4648      	mov	r0, r9
 80056f0:	f002 f89a 	bl	8007828 <__i2b>
 80056f4:	4680      	mov	r8, r0
 80056f6:	2800      	cmp	r0, #0
 80056f8:	f43f aed8 	beq.w	80054ac <_strtod_l+0x43c>
 80056fc:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80056fe:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005700:	2e00      	cmp	r6, #0
 8005702:	bfab      	itete	ge
 8005704:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8005706:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8005708:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800570a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800570c:	bfac      	ite	ge
 800570e:	18f7      	addge	r7, r6, r3
 8005710:	1b9d      	sublt	r5, r3, r6
 8005712:	9b04      	ldr	r3, [sp, #16]
 8005714:	1af6      	subs	r6, r6, r3
 8005716:	4416      	add	r6, r2
 8005718:	4b63      	ldr	r3, [pc, #396]	; (80058a8 <_strtod_l+0x838>)
 800571a:	3e01      	subs	r6, #1
 800571c:	429e      	cmp	r6, r3
 800571e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005722:	f280 80af 	bge.w	8005884 <_strtod_l+0x814>
 8005726:	1b9b      	subs	r3, r3, r6
 8005728:	2b1f      	cmp	r3, #31
 800572a:	eba2 0203 	sub.w	r2, r2, r3
 800572e:	f04f 0101 	mov.w	r1, #1
 8005732:	f300 809b 	bgt.w	800586c <_strtod_l+0x7fc>
 8005736:	fa01 f303 	lsl.w	r3, r1, r3
 800573a:	930f      	str	r3, [sp, #60]	; 0x3c
 800573c:	2300      	movs	r3, #0
 800573e:	930a      	str	r3, [sp, #40]	; 0x28
 8005740:	18be      	adds	r6, r7, r2
 8005742:	9b04      	ldr	r3, [sp, #16]
 8005744:	42b7      	cmp	r7, r6
 8005746:	4415      	add	r5, r2
 8005748:	441d      	add	r5, r3
 800574a:	463b      	mov	r3, r7
 800574c:	bfa8      	it	ge
 800574e:	4633      	movge	r3, r6
 8005750:	42ab      	cmp	r3, r5
 8005752:	bfa8      	it	ge
 8005754:	462b      	movge	r3, r5
 8005756:	2b00      	cmp	r3, #0
 8005758:	bfc2      	ittt	gt
 800575a:	1af6      	subgt	r6, r6, r3
 800575c:	1aed      	subgt	r5, r5, r3
 800575e:	1aff      	subgt	r7, r7, r3
 8005760:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005762:	b1bb      	cbz	r3, 8005794 <_strtod_l+0x724>
 8005764:	4641      	mov	r1, r8
 8005766:	461a      	mov	r2, r3
 8005768:	4648      	mov	r0, r9
 800576a:	f002 f8fd 	bl	8007968 <__pow5mult>
 800576e:	4680      	mov	r8, r0
 8005770:	2800      	cmp	r0, #0
 8005772:	f43f ae9b 	beq.w	80054ac <_strtod_l+0x43c>
 8005776:	4601      	mov	r1, r0
 8005778:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800577a:	4648      	mov	r0, r9
 800577c:	f002 f85d 	bl	800783a <__multiply>
 8005780:	900c      	str	r0, [sp, #48]	; 0x30
 8005782:	2800      	cmp	r0, #0
 8005784:	f43f ae92 	beq.w	80054ac <_strtod_l+0x43c>
 8005788:	991c      	ldr	r1, [sp, #112]	; 0x70
 800578a:	4648      	mov	r0, r9
 800578c:	f001 ff6e 	bl	800766c <_Bfree>
 8005790:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005792:	931c      	str	r3, [sp, #112]	; 0x70
 8005794:	2e00      	cmp	r6, #0
 8005796:	dc7a      	bgt.n	800588e <_strtod_l+0x81e>
 8005798:	9b06      	ldr	r3, [sp, #24]
 800579a:	2b00      	cmp	r3, #0
 800579c:	dd08      	ble.n	80057b0 <_strtod_l+0x740>
 800579e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80057a0:	9905      	ldr	r1, [sp, #20]
 80057a2:	4648      	mov	r0, r9
 80057a4:	f002 f8e0 	bl	8007968 <__pow5mult>
 80057a8:	9005      	str	r0, [sp, #20]
 80057aa:	2800      	cmp	r0, #0
 80057ac:	f43f ae7e 	beq.w	80054ac <_strtod_l+0x43c>
 80057b0:	2d00      	cmp	r5, #0
 80057b2:	dd08      	ble.n	80057c6 <_strtod_l+0x756>
 80057b4:	462a      	mov	r2, r5
 80057b6:	9905      	ldr	r1, [sp, #20]
 80057b8:	4648      	mov	r0, r9
 80057ba:	f002 f923 	bl	8007a04 <__lshift>
 80057be:	9005      	str	r0, [sp, #20]
 80057c0:	2800      	cmp	r0, #0
 80057c2:	f43f ae73 	beq.w	80054ac <_strtod_l+0x43c>
 80057c6:	2f00      	cmp	r7, #0
 80057c8:	dd08      	ble.n	80057dc <_strtod_l+0x76c>
 80057ca:	4641      	mov	r1, r8
 80057cc:	463a      	mov	r2, r7
 80057ce:	4648      	mov	r0, r9
 80057d0:	f002 f918 	bl	8007a04 <__lshift>
 80057d4:	4680      	mov	r8, r0
 80057d6:	2800      	cmp	r0, #0
 80057d8:	f43f ae68 	beq.w	80054ac <_strtod_l+0x43c>
 80057dc:	9a05      	ldr	r2, [sp, #20]
 80057de:	991c      	ldr	r1, [sp, #112]	; 0x70
 80057e0:	4648      	mov	r0, r9
 80057e2:	f002 f97d 	bl	8007ae0 <__mdiff>
 80057e6:	4604      	mov	r4, r0
 80057e8:	2800      	cmp	r0, #0
 80057ea:	f43f ae5f 	beq.w	80054ac <_strtod_l+0x43c>
 80057ee:	68c3      	ldr	r3, [r0, #12]
 80057f0:	930c      	str	r3, [sp, #48]	; 0x30
 80057f2:	2300      	movs	r3, #0
 80057f4:	60c3      	str	r3, [r0, #12]
 80057f6:	4641      	mov	r1, r8
 80057f8:	f002 f958 	bl	8007aac <__mcmp>
 80057fc:	2800      	cmp	r0, #0
 80057fe:	da55      	bge.n	80058ac <_strtod_l+0x83c>
 8005800:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005802:	b9e3      	cbnz	r3, 800583e <_strtod_l+0x7ce>
 8005804:	f1ba 0f00 	cmp.w	sl, #0
 8005808:	d119      	bne.n	800583e <_strtod_l+0x7ce>
 800580a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800580e:	b9b3      	cbnz	r3, 800583e <_strtod_l+0x7ce>
 8005810:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005814:	0d1b      	lsrs	r3, r3, #20
 8005816:	051b      	lsls	r3, r3, #20
 8005818:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800581c:	d90f      	bls.n	800583e <_strtod_l+0x7ce>
 800581e:	6963      	ldr	r3, [r4, #20]
 8005820:	b913      	cbnz	r3, 8005828 <_strtod_l+0x7b8>
 8005822:	6923      	ldr	r3, [r4, #16]
 8005824:	2b01      	cmp	r3, #1
 8005826:	dd0a      	ble.n	800583e <_strtod_l+0x7ce>
 8005828:	4621      	mov	r1, r4
 800582a:	2201      	movs	r2, #1
 800582c:	4648      	mov	r0, r9
 800582e:	f002 f8e9 	bl	8007a04 <__lshift>
 8005832:	4641      	mov	r1, r8
 8005834:	4604      	mov	r4, r0
 8005836:	f002 f939 	bl	8007aac <__mcmp>
 800583a:	2800      	cmp	r0, #0
 800583c:	dc67      	bgt.n	800590e <_strtod_l+0x89e>
 800583e:	9b04      	ldr	r3, [sp, #16]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d171      	bne.n	8005928 <_strtod_l+0x8b8>
 8005844:	e63d      	b.n	80054c2 <_strtod_l+0x452>
 8005846:	f018 0f01 	tst.w	r8, #1
 800584a:	d004      	beq.n	8005856 <_strtod_l+0x7e6>
 800584c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005850:	f7fa fed2 	bl	80005f8 <__aeabi_dmul>
 8005854:	2301      	movs	r3, #1
 8005856:	ea4f 0868 	mov.w	r8, r8, asr #1
 800585a:	3508      	adds	r5, #8
 800585c:	e6e5      	b.n	800562a <_strtod_l+0x5ba>
 800585e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005862:	fa02 f303 	lsl.w	r3, r2, r3
 8005866:	ea03 0a0a 	and.w	sl, r3, sl
 800586a:	e6ff      	b.n	800566c <_strtod_l+0x5fc>
 800586c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8005870:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8005874:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8005878:	36e2      	adds	r6, #226	; 0xe2
 800587a:	fa01 f306 	lsl.w	r3, r1, r6
 800587e:	930a      	str	r3, [sp, #40]	; 0x28
 8005880:	910f      	str	r1, [sp, #60]	; 0x3c
 8005882:	e75d      	b.n	8005740 <_strtod_l+0x6d0>
 8005884:	2300      	movs	r3, #0
 8005886:	930a      	str	r3, [sp, #40]	; 0x28
 8005888:	2301      	movs	r3, #1
 800588a:	930f      	str	r3, [sp, #60]	; 0x3c
 800588c:	e758      	b.n	8005740 <_strtod_l+0x6d0>
 800588e:	4632      	mov	r2, r6
 8005890:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005892:	4648      	mov	r0, r9
 8005894:	f002 f8b6 	bl	8007a04 <__lshift>
 8005898:	901c      	str	r0, [sp, #112]	; 0x70
 800589a:	2800      	cmp	r0, #0
 800589c:	f47f af7c 	bne.w	8005798 <_strtod_l+0x728>
 80058a0:	e604      	b.n	80054ac <_strtod_l+0x43c>
 80058a2:	bf00      	nop
 80058a4:	08008898 	.word	0x08008898
 80058a8:	fffffc02 	.word	0xfffffc02
 80058ac:	465d      	mov	r5, fp
 80058ae:	f040 8086 	bne.w	80059be <_strtod_l+0x94e>
 80058b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80058b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80058b8:	b32a      	cbz	r2, 8005906 <_strtod_l+0x896>
 80058ba:	4aaf      	ldr	r2, [pc, #700]	; (8005b78 <_strtod_l+0xb08>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d153      	bne.n	8005968 <_strtod_l+0x8f8>
 80058c0:	9b04      	ldr	r3, [sp, #16]
 80058c2:	4650      	mov	r0, sl
 80058c4:	b1d3      	cbz	r3, 80058fc <_strtod_l+0x88c>
 80058c6:	4aad      	ldr	r2, [pc, #692]	; (8005b7c <_strtod_l+0xb0c>)
 80058c8:	402a      	ands	r2, r5
 80058ca:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80058ce:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80058d2:	d816      	bhi.n	8005902 <_strtod_l+0x892>
 80058d4:	0d12      	lsrs	r2, r2, #20
 80058d6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80058da:	fa01 f303 	lsl.w	r3, r1, r3
 80058de:	4298      	cmp	r0, r3
 80058e0:	d142      	bne.n	8005968 <_strtod_l+0x8f8>
 80058e2:	4ba7      	ldr	r3, [pc, #668]	; (8005b80 <_strtod_l+0xb10>)
 80058e4:	429d      	cmp	r5, r3
 80058e6:	d102      	bne.n	80058ee <_strtod_l+0x87e>
 80058e8:	3001      	adds	r0, #1
 80058ea:	f43f addf 	beq.w	80054ac <_strtod_l+0x43c>
 80058ee:	4ba3      	ldr	r3, [pc, #652]	; (8005b7c <_strtod_l+0xb0c>)
 80058f0:	402b      	ands	r3, r5
 80058f2:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80058f6:	f04f 0a00 	mov.w	sl, #0
 80058fa:	e7a0      	b.n	800583e <_strtod_l+0x7ce>
 80058fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005900:	e7ed      	b.n	80058de <_strtod_l+0x86e>
 8005902:	460b      	mov	r3, r1
 8005904:	e7eb      	b.n	80058de <_strtod_l+0x86e>
 8005906:	bb7b      	cbnz	r3, 8005968 <_strtod_l+0x8f8>
 8005908:	f1ba 0f00 	cmp.w	sl, #0
 800590c:	d12c      	bne.n	8005968 <_strtod_l+0x8f8>
 800590e:	9904      	ldr	r1, [sp, #16]
 8005910:	4a9a      	ldr	r2, [pc, #616]	; (8005b7c <_strtod_l+0xb0c>)
 8005912:	465b      	mov	r3, fp
 8005914:	b1f1      	cbz	r1, 8005954 <_strtod_l+0x8e4>
 8005916:	ea02 010b 	and.w	r1, r2, fp
 800591a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800591e:	dc19      	bgt.n	8005954 <_strtod_l+0x8e4>
 8005920:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005924:	f77f ae5b 	ble.w	80055de <_strtod_l+0x56e>
 8005928:	4a96      	ldr	r2, [pc, #600]	; (8005b84 <_strtod_l+0xb14>)
 800592a:	2300      	movs	r3, #0
 800592c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8005930:	4650      	mov	r0, sl
 8005932:	4659      	mov	r1, fp
 8005934:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8005938:	f7fa fe5e 	bl	80005f8 <__aeabi_dmul>
 800593c:	4682      	mov	sl, r0
 800593e:	468b      	mov	fp, r1
 8005940:	2900      	cmp	r1, #0
 8005942:	f47f adbe 	bne.w	80054c2 <_strtod_l+0x452>
 8005946:	2800      	cmp	r0, #0
 8005948:	f47f adbb 	bne.w	80054c2 <_strtod_l+0x452>
 800594c:	2322      	movs	r3, #34	; 0x22
 800594e:	f8c9 3000 	str.w	r3, [r9]
 8005952:	e5b6      	b.n	80054c2 <_strtod_l+0x452>
 8005954:	4013      	ands	r3, r2
 8005956:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800595a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800595e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8005962:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8005966:	e76a      	b.n	800583e <_strtod_l+0x7ce>
 8005968:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800596a:	b193      	cbz	r3, 8005992 <_strtod_l+0x922>
 800596c:	422b      	tst	r3, r5
 800596e:	f43f af66 	beq.w	800583e <_strtod_l+0x7ce>
 8005972:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005974:	9a04      	ldr	r2, [sp, #16]
 8005976:	4650      	mov	r0, sl
 8005978:	4659      	mov	r1, fp
 800597a:	b173      	cbz	r3, 800599a <_strtod_l+0x92a>
 800597c:	f7ff fb5c 	bl	8005038 <sulp>
 8005980:	4602      	mov	r2, r0
 8005982:	460b      	mov	r3, r1
 8005984:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005988:	f7fa fc80 	bl	800028c <__adddf3>
 800598c:	4682      	mov	sl, r0
 800598e:	468b      	mov	fp, r1
 8005990:	e755      	b.n	800583e <_strtod_l+0x7ce>
 8005992:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005994:	ea13 0f0a 	tst.w	r3, sl
 8005998:	e7e9      	b.n	800596e <_strtod_l+0x8fe>
 800599a:	f7ff fb4d 	bl	8005038 <sulp>
 800599e:	4602      	mov	r2, r0
 80059a0:	460b      	mov	r3, r1
 80059a2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80059a6:	f7fa fc6f 	bl	8000288 <__aeabi_dsub>
 80059aa:	2200      	movs	r2, #0
 80059ac:	2300      	movs	r3, #0
 80059ae:	4682      	mov	sl, r0
 80059b0:	468b      	mov	fp, r1
 80059b2:	f7fb f889 	bl	8000ac8 <__aeabi_dcmpeq>
 80059b6:	2800      	cmp	r0, #0
 80059b8:	f47f ae11 	bne.w	80055de <_strtod_l+0x56e>
 80059bc:	e73f      	b.n	800583e <_strtod_l+0x7ce>
 80059be:	4641      	mov	r1, r8
 80059c0:	4620      	mov	r0, r4
 80059c2:	f002 f9b0 	bl	8007d26 <__ratio>
 80059c6:	ec57 6b10 	vmov	r6, r7, d0
 80059ca:	2200      	movs	r2, #0
 80059cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80059d0:	ee10 0a10 	vmov	r0, s0
 80059d4:	4639      	mov	r1, r7
 80059d6:	f7fb f88b 	bl	8000af0 <__aeabi_dcmple>
 80059da:	2800      	cmp	r0, #0
 80059dc:	d077      	beq.n	8005ace <_strtod_l+0xa5e>
 80059de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d04a      	beq.n	8005a7a <_strtod_l+0xa0a>
 80059e4:	4b68      	ldr	r3, [pc, #416]	; (8005b88 <_strtod_l+0xb18>)
 80059e6:	2200      	movs	r2, #0
 80059e8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80059ec:	4f66      	ldr	r7, [pc, #408]	; (8005b88 <_strtod_l+0xb18>)
 80059ee:	2600      	movs	r6, #0
 80059f0:	4b62      	ldr	r3, [pc, #392]	; (8005b7c <_strtod_l+0xb0c>)
 80059f2:	402b      	ands	r3, r5
 80059f4:	930f      	str	r3, [sp, #60]	; 0x3c
 80059f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80059f8:	4b64      	ldr	r3, [pc, #400]	; (8005b8c <_strtod_l+0xb1c>)
 80059fa:	429a      	cmp	r2, r3
 80059fc:	f040 80ce 	bne.w	8005b9c <_strtod_l+0xb2c>
 8005a00:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005a04:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005a08:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8005a0c:	ec4b ab10 	vmov	d0, sl, fp
 8005a10:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8005a14:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005a18:	f002 f8c0 	bl	8007b9c <__ulp>
 8005a1c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005a20:	ec53 2b10 	vmov	r2, r3, d0
 8005a24:	f7fa fde8 	bl	80005f8 <__aeabi_dmul>
 8005a28:	4652      	mov	r2, sl
 8005a2a:	465b      	mov	r3, fp
 8005a2c:	f7fa fc2e 	bl	800028c <__adddf3>
 8005a30:	460b      	mov	r3, r1
 8005a32:	4952      	ldr	r1, [pc, #328]	; (8005b7c <_strtod_l+0xb0c>)
 8005a34:	4a56      	ldr	r2, [pc, #344]	; (8005b90 <_strtod_l+0xb20>)
 8005a36:	4019      	ands	r1, r3
 8005a38:	4291      	cmp	r1, r2
 8005a3a:	4682      	mov	sl, r0
 8005a3c:	d95b      	bls.n	8005af6 <_strtod_l+0xa86>
 8005a3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a40:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d103      	bne.n	8005a50 <_strtod_l+0x9e0>
 8005a48:	9b08      	ldr	r3, [sp, #32]
 8005a4a:	3301      	adds	r3, #1
 8005a4c:	f43f ad2e 	beq.w	80054ac <_strtod_l+0x43c>
 8005a50:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8005b80 <_strtod_l+0xb10>
 8005a54:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8005a58:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005a5a:	4648      	mov	r0, r9
 8005a5c:	f001 fe06 	bl	800766c <_Bfree>
 8005a60:	9905      	ldr	r1, [sp, #20]
 8005a62:	4648      	mov	r0, r9
 8005a64:	f001 fe02 	bl	800766c <_Bfree>
 8005a68:	4641      	mov	r1, r8
 8005a6a:	4648      	mov	r0, r9
 8005a6c:	f001 fdfe 	bl	800766c <_Bfree>
 8005a70:	4621      	mov	r1, r4
 8005a72:	4648      	mov	r0, r9
 8005a74:	f001 fdfa 	bl	800766c <_Bfree>
 8005a78:	e619      	b.n	80056ae <_strtod_l+0x63e>
 8005a7a:	f1ba 0f00 	cmp.w	sl, #0
 8005a7e:	d11a      	bne.n	8005ab6 <_strtod_l+0xa46>
 8005a80:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005a84:	b9eb      	cbnz	r3, 8005ac2 <_strtod_l+0xa52>
 8005a86:	2200      	movs	r2, #0
 8005a88:	4b3f      	ldr	r3, [pc, #252]	; (8005b88 <_strtod_l+0xb18>)
 8005a8a:	4630      	mov	r0, r6
 8005a8c:	4639      	mov	r1, r7
 8005a8e:	f7fb f825 	bl	8000adc <__aeabi_dcmplt>
 8005a92:	b9c8      	cbnz	r0, 8005ac8 <_strtod_l+0xa58>
 8005a94:	4630      	mov	r0, r6
 8005a96:	4639      	mov	r1, r7
 8005a98:	2200      	movs	r2, #0
 8005a9a:	4b3e      	ldr	r3, [pc, #248]	; (8005b94 <_strtod_l+0xb24>)
 8005a9c:	f7fa fdac 	bl	80005f8 <__aeabi_dmul>
 8005aa0:	4606      	mov	r6, r0
 8005aa2:	460f      	mov	r7, r1
 8005aa4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8005aa8:	9618      	str	r6, [sp, #96]	; 0x60
 8005aaa:	9319      	str	r3, [sp, #100]	; 0x64
 8005aac:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8005ab0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005ab4:	e79c      	b.n	80059f0 <_strtod_l+0x980>
 8005ab6:	f1ba 0f01 	cmp.w	sl, #1
 8005aba:	d102      	bne.n	8005ac2 <_strtod_l+0xa52>
 8005abc:	2d00      	cmp	r5, #0
 8005abe:	f43f ad8e 	beq.w	80055de <_strtod_l+0x56e>
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	4b34      	ldr	r3, [pc, #208]	; (8005b98 <_strtod_l+0xb28>)
 8005ac6:	e78f      	b.n	80059e8 <_strtod_l+0x978>
 8005ac8:	2600      	movs	r6, #0
 8005aca:	4f32      	ldr	r7, [pc, #200]	; (8005b94 <_strtod_l+0xb24>)
 8005acc:	e7ea      	b.n	8005aa4 <_strtod_l+0xa34>
 8005ace:	4b31      	ldr	r3, [pc, #196]	; (8005b94 <_strtod_l+0xb24>)
 8005ad0:	4630      	mov	r0, r6
 8005ad2:	4639      	mov	r1, r7
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	f7fa fd8f 	bl	80005f8 <__aeabi_dmul>
 8005ada:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005adc:	4606      	mov	r6, r0
 8005ade:	460f      	mov	r7, r1
 8005ae0:	b933      	cbnz	r3, 8005af0 <_strtod_l+0xa80>
 8005ae2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005ae6:	9010      	str	r0, [sp, #64]	; 0x40
 8005ae8:	9311      	str	r3, [sp, #68]	; 0x44
 8005aea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005aee:	e7df      	b.n	8005ab0 <_strtod_l+0xa40>
 8005af0:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8005af4:	e7f9      	b.n	8005aea <_strtod_l+0xa7a>
 8005af6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8005afa:	9b04      	ldr	r3, [sp, #16]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d1ab      	bne.n	8005a58 <_strtod_l+0x9e8>
 8005b00:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005b04:	0d1b      	lsrs	r3, r3, #20
 8005b06:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005b08:	051b      	lsls	r3, r3, #20
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	465d      	mov	r5, fp
 8005b0e:	d1a3      	bne.n	8005a58 <_strtod_l+0x9e8>
 8005b10:	4639      	mov	r1, r7
 8005b12:	4630      	mov	r0, r6
 8005b14:	f7fb f820 	bl	8000b58 <__aeabi_d2iz>
 8005b18:	f7fa fd04 	bl	8000524 <__aeabi_i2d>
 8005b1c:	460b      	mov	r3, r1
 8005b1e:	4602      	mov	r2, r0
 8005b20:	4639      	mov	r1, r7
 8005b22:	4630      	mov	r0, r6
 8005b24:	f7fa fbb0 	bl	8000288 <__aeabi_dsub>
 8005b28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b2a:	4606      	mov	r6, r0
 8005b2c:	460f      	mov	r7, r1
 8005b2e:	b933      	cbnz	r3, 8005b3e <_strtod_l+0xace>
 8005b30:	f1ba 0f00 	cmp.w	sl, #0
 8005b34:	d103      	bne.n	8005b3e <_strtod_l+0xace>
 8005b36:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8005b3a:	2d00      	cmp	r5, #0
 8005b3c:	d06d      	beq.n	8005c1a <_strtod_l+0xbaa>
 8005b3e:	a30a      	add	r3, pc, #40	; (adr r3, 8005b68 <_strtod_l+0xaf8>)
 8005b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b44:	4630      	mov	r0, r6
 8005b46:	4639      	mov	r1, r7
 8005b48:	f7fa ffc8 	bl	8000adc <__aeabi_dcmplt>
 8005b4c:	2800      	cmp	r0, #0
 8005b4e:	f47f acb8 	bne.w	80054c2 <_strtod_l+0x452>
 8005b52:	a307      	add	r3, pc, #28	; (adr r3, 8005b70 <_strtod_l+0xb00>)
 8005b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b58:	4630      	mov	r0, r6
 8005b5a:	4639      	mov	r1, r7
 8005b5c:	f7fa ffdc 	bl	8000b18 <__aeabi_dcmpgt>
 8005b60:	2800      	cmp	r0, #0
 8005b62:	f43f af79 	beq.w	8005a58 <_strtod_l+0x9e8>
 8005b66:	e4ac      	b.n	80054c2 <_strtod_l+0x452>
 8005b68:	94a03595 	.word	0x94a03595
 8005b6c:	3fdfffff 	.word	0x3fdfffff
 8005b70:	35afe535 	.word	0x35afe535
 8005b74:	3fe00000 	.word	0x3fe00000
 8005b78:	000fffff 	.word	0x000fffff
 8005b7c:	7ff00000 	.word	0x7ff00000
 8005b80:	7fefffff 	.word	0x7fefffff
 8005b84:	39500000 	.word	0x39500000
 8005b88:	3ff00000 	.word	0x3ff00000
 8005b8c:	7fe00000 	.word	0x7fe00000
 8005b90:	7c9fffff 	.word	0x7c9fffff
 8005b94:	3fe00000 	.word	0x3fe00000
 8005b98:	bff00000 	.word	0xbff00000
 8005b9c:	9b04      	ldr	r3, [sp, #16]
 8005b9e:	b333      	cbz	r3, 8005bee <_strtod_l+0xb7e>
 8005ba0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005ba2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005ba6:	d822      	bhi.n	8005bee <_strtod_l+0xb7e>
 8005ba8:	a327      	add	r3, pc, #156	; (adr r3, 8005c48 <_strtod_l+0xbd8>)
 8005baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bae:	4630      	mov	r0, r6
 8005bb0:	4639      	mov	r1, r7
 8005bb2:	f7fa ff9d 	bl	8000af0 <__aeabi_dcmple>
 8005bb6:	b1a0      	cbz	r0, 8005be2 <_strtod_l+0xb72>
 8005bb8:	4639      	mov	r1, r7
 8005bba:	4630      	mov	r0, r6
 8005bbc:	f7fa fff4 	bl	8000ba8 <__aeabi_d2uiz>
 8005bc0:	2800      	cmp	r0, #0
 8005bc2:	bf08      	it	eq
 8005bc4:	2001      	moveq	r0, #1
 8005bc6:	f7fa fc9d 	bl	8000504 <__aeabi_ui2d>
 8005bca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005bcc:	4606      	mov	r6, r0
 8005bce:	460f      	mov	r7, r1
 8005bd0:	bb03      	cbnz	r3, 8005c14 <_strtod_l+0xba4>
 8005bd2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005bd6:	9012      	str	r0, [sp, #72]	; 0x48
 8005bd8:	9313      	str	r3, [sp, #76]	; 0x4c
 8005bda:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8005bde:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005be2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005be4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005be6:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8005bea:	1a9b      	subs	r3, r3, r2
 8005bec:	930b      	str	r3, [sp, #44]	; 0x2c
 8005bee:	ed9d 0b08 	vldr	d0, [sp, #32]
 8005bf2:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8005bf6:	f001 ffd1 	bl	8007b9c <__ulp>
 8005bfa:	4650      	mov	r0, sl
 8005bfc:	ec53 2b10 	vmov	r2, r3, d0
 8005c00:	4659      	mov	r1, fp
 8005c02:	f7fa fcf9 	bl	80005f8 <__aeabi_dmul>
 8005c06:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005c0a:	f7fa fb3f 	bl	800028c <__adddf3>
 8005c0e:	4682      	mov	sl, r0
 8005c10:	468b      	mov	fp, r1
 8005c12:	e772      	b.n	8005afa <_strtod_l+0xa8a>
 8005c14:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8005c18:	e7df      	b.n	8005bda <_strtod_l+0xb6a>
 8005c1a:	a30d      	add	r3, pc, #52	; (adr r3, 8005c50 <_strtod_l+0xbe0>)
 8005c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c20:	f7fa ff5c 	bl	8000adc <__aeabi_dcmplt>
 8005c24:	e79c      	b.n	8005b60 <_strtod_l+0xaf0>
 8005c26:	2300      	movs	r3, #0
 8005c28:	930d      	str	r3, [sp, #52]	; 0x34
 8005c2a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005c2c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005c2e:	6013      	str	r3, [r2, #0]
 8005c30:	f7ff ba61 	b.w	80050f6 <_strtod_l+0x86>
 8005c34:	2b65      	cmp	r3, #101	; 0x65
 8005c36:	f04f 0200 	mov.w	r2, #0
 8005c3a:	f43f ab4e 	beq.w	80052da <_strtod_l+0x26a>
 8005c3e:	2101      	movs	r1, #1
 8005c40:	4614      	mov	r4, r2
 8005c42:	9104      	str	r1, [sp, #16]
 8005c44:	f7ff bacb 	b.w	80051de <_strtod_l+0x16e>
 8005c48:	ffc00000 	.word	0xffc00000
 8005c4c:	41dfffff 	.word	0x41dfffff
 8005c50:	94a03595 	.word	0x94a03595
 8005c54:	3fcfffff 	.word	0x3fcfffff

08005c58 <_strtod_r>:
 8005c58:	4b05      	ldr	r3, [pc, #20]	; (8005c70 <_strtod_r+0x18>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	b410      	push	{r4}
 8005c5e:	6a1b      	ldr	r3, [r3, #32]
 8005c60:	4c04      	ldr	r4, [pc, #16]	; (8005c74 <_strtod_r+0x1c>)
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	bf08      	it	eq
 8005c66:	4623      	moveq	r3, r4
 8005c68:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c6c:	f7ff ba00 	b.w	8005070 <_strtod_l>
 8005c70:	2000000c 	.word	0x2000000c
 8005c74:	20000070 	.word	0x20000070

08005c78 <_strtol_l.isra.0>:
 8005c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c7c:	4680      	mov	r8, r0
 8005c7e:	4689      	mov	r9, r1
 8005c80:	4692      	mov	sl, r2
 8005c82:	461e      	mov	r6, r3
 8005c84:	460f      	mov	r7, r1
 8005c86:	463d      	mov	r5, r7
 8005c88:	9808      	ldr	r0, [sp, #32]
 8005c8a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005c8e:	f001 fc27 	bl	80074e0 <__locale_ctype_ptr_l>
 8005c92:	4420      	add	r0, r4
 8005c94:	7843      	ldrb	r3, [r0, #1]
 8005c96:	f013 0308 	ands.w	r3, r3, #8
 8005c9a:	d132      	bne.n	8005d02 <_strtol_l.isra.0+0x8a>
 8005c9c:	2c2d      	cmp	r4, #45	; 0x2d
 8005c9e:	d132      	bne.n	8005d06 <_strtol_l.isra.0+0x8e>
 8005ca0:	787c      	ldrb	r4, [r7, #1]
 8005ca2:	1cbd      	adds	r5, r7, #2
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	2e00      	cmp	r6, #0
 8005ca8:	d05d      	beq.n	8005d66 <_strtol_l.isra.0+0xee>
 8005caa:	2e10      	cmp	r6, #16
 8005cac:	d109      	bne.n	8005cc2 <_strtol_l.isra.0+0x4a>
 8005cae:	2c30      	cmp	r4, #48	; 0x30
 8005cb0:	d107      	bne.n	8005cc2 <_strtol_l.isra.0+0x4a>
 8005cb2:	782b      	ldrb	r3, [r5, #0]
 8005cb4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005cb8:	2b58      	cmp	r3, #88	; 0x58
 8005cba:	d14f      	bne.n	8005d5c <_strtol_l.isra.0+0xe4>
 8005cbc:	786c      	ldrb	r4, [r5, #1]
 8005cbe:	2610      	movs	r6, #16
 8005cc0:	3502      	adds	r5, #2
 8005cc2:	2a00      	cmp	r2, #0
 8005cc4:	bf14      	ite	ne
 8005cc6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8005cca:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8005cce:	2700      	movs	r7, #0
 8005cd0:	fbb1 fcf6 	udiv	ip, r1, r6
 8005cd4:	4638      	mov	r0, r7
 8005cd6:	fb06 1e1c 	mls	lr, r6, ip, r1
 8005cda:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8005cde:	2b09      	cmp	r3, #9
 8005ce0:	d817      	bhi.n	8005d12 <_strtol_l.isra.0+0x9a>
 8005ce2:	461c      	mov	r4, r3
 8005ce4:	42a6      	cmp	r6, r4
 8005ce6:	dd23      	ble.n	8005d30 <_strtol_l.isra.0+0xb8>
 8005ce8:	1c7b      	adds	r3, r7, #1
 8005cea:	d007      	beq.n	8005cfc <_strtol_l.isra.0+0x84>
 8005cec:	4584      	cmp	ip, r0
 8005cee:	d31c      	bcc.n	8005d2a <_strtol_l.isra.0+0xb2>
 8005cf0:	d101      	bne.n	8005cf6 <_strtol_l.isra.0+0x7e>
 8005cf2:	45a6      	cmp	lr, r4
 8005cf4:	db19      	blt.n	8005d2a <_strtol_l.isra.0+0xb2>
 8005cf6:	fb00 4006 	mla	r0, r0, r6, r4
 8005cfa:	2701      	movs	r7, #1
 8005cfc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005d00:	e7eb      	b.n	8005cda <_strtol_l.isra.0+0x62>
 8005d02:	462f      	mov	r7, r5
 8005d04:	e7bf      	b.n	8005c86 <_strtol_l.isra.0+0xe>
 8005d06:	2c2b      	cmp	r4, #43	; 0x2b
 8005d08:	bf04      	itt	eq
 8005d0a:	1cbd      	addeq	r5, r7, #2
 8005d0c:	787c      	ldrbeq	r4, [r7, #1]
 8005d0e:	461a      	mov	r2, r3
 8005d10:	e7c9      	b.n	8005ca6 <_strtol_l.isra.0+0x2e>
 8005d12:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8005d16:	2b19      	cmp	r3, #25
 8005d18:	d801      	bhi.n	8005d1e <_strtol_l.isra.0+0xa6>
 8005d1a:	3c37      	subs	r4, #55	; 0x37
 8005d1c:	e7e2      	b.n	8005ce4 <_strtol_l.isra.0+0x6c>
 8005d1e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8005d22:	2b19      	cmp	r3, #25
 8005d24:	d804      	bhi.n	8005d30 <_strtol_l.isra.0+0xb8>
 8005d26:	3c57      	subs	r4, #87	; 0x57
 8005d28:	e7dc      	b.n	8005ce4 <_strtol_l.isra.0+0x6c>
 8005d2a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005d2e:	e7e5      	b.n	8005cfc <_strtol_l.isra.0+0x84>
 8005d30:	1c7b      	adds	r3, r7, #1
 8005d32:	d108      	bne.n	8005d46 <_strtol_l.isra.0+0xce>
 8005d34:	2322      	movs	r3, #34	; 0x22
 8005d36:	f8c8 3000 	str.w	r3, [r8]
 8005d3a:	4608      	mov	r0, r1
 8005d3c:	f1ba 0f00 	cmp.w	sl, #0
 8005d40:	d107      	bne.n	8005d52 <_strtol_l.isra.0+0xda>
 8005d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d46:	b102      	cbz	r2, 8005d4a <_strtol_l.isra.0+0xd2>
 8005d48:	4240      	negs	r0, r0
 8005d4a:	f1ba 0f00 	cmp.w	sl, #0
 8005d4e:	d0f8      	beq.n	8005d42 <_strtol_l.isra.0+0xca>
 8005d50:	b10f      	cbz	r7, 8005d56 <_strtol_l.isra.0+0xde>
 8005d52:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8005d56:	f8ca 9000 	str.w	r9, [sl]
 8005d5a:	e7f2      	b.n	8005d42 <_strtol_l.isra.0+0xca>
 8005d5c:	2430      	movs	r4, #48	; 0x30
 8005d5e:	2e00      	cmp	r6, #0
 8005d60:	d1af      	bne.n	8005cc2 <_strtol_l.isra.0+0x4a>
 8005d62:	2608      	movs	r6, #8
 8005d64:	e7ad      	b.n	8005cc2 <_strtol_l.isra.0+0x4a>
 8005d66:	2c30      	cmp	r4, #48	; 0x30
 8005d68:	d0a3      	beq.n	8005cb2 <_strtol_l.isra.0+0x3a>
 8005d6a:	260a      	movs	r6, #10
 8005d6c:	e7a9      	b.n	8005cc2 <_strtol_l.isra.0+0x4a>
	...

08005d70 <_strtol_r>:
 8005d70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005d72:	4c06      	ldr	r4, [pc, #24]	; (8005d8c <_strtol_r+0x1c>)
 8005d74:	4d06      	ldr	r5, [pc, #24]	; (8005d90 <_strtol_r+0x20>)
 8005d76:	6824      	ldr	r4, [r4, #0]
 8005d78:	6a24      	ldr	r4, [r4, #32]
 8005d7a:	2c00      	cmp	r4, #0
 8005d7c:	bf08      	it	eq
 8005d7e:	462c      	moveq	r4, r5
 8005d80:	9400      	str	r4, [sp, #0]
 8005d82:	f7ff ff79 	bl	8005c78 <_strtol_l.isra.0>
 8005d86:	b003      	add	sp, #12
 8005d88:	bd30      	pop	{r4, r5, pc}
 8005d8a:	bf00      	nop
 8005d8c:	2000000c 	.word	0x2000000c
 8005d90:	20000070 	.word	0x20000070

08005d94 <__swbuf_r>:
 8005d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d96:	460e      	mov	r6, r1
 8005d98:	4614      	mov	r4, r2
 8005d9a:	4605      	mov	r5, r0
 8005d9c:	b118      	cbz	r0, 8005da6 <__swbuf_r+0x12>
 8005d9e:	6983      	ldr	r3, [r0, #24]
 8005da0:	b90b      	cbnz	r3, 8005da6 <__swbuf_r+0x12>
 8005da2:	f000 ffed 	bl	8006d80 <__sinit>
 8005da6:	4b21      	ldr	r3, [pc, #132]	; (8005e2c <__swbuf_r+0x98>)
 8005da8:	429c      	cmp	r4, r3
 8005daa:	d12a      	bne.n	8005e02 <__swbuf_r+0x6e>
 8005dac:	686c      	ldr	r4, [r5, #4]
 8005dae:	69a3      	ldr	r3, [r4, #24]
 8005db0:	60a3      	str	r3, [r4, #8]
 8005db2:	89a3      	ldrh	r3, [r4, #12]
 8005db4:	071a      	lsls	r2, r3, #28
 8005db6:	d52e      	bpl.n	8005e16 <__swbuf_r+0x82>
 8005db8:	6923      	ldr	r3, [r4, #16]
 8005dba:	b363      	cbz	r3, 8005e16 <__swbuf_r+0x82>
 8005dbc:	6923      	ldr	r3, [r4, #16]
 8005dbe:	6820      	ldr	r0, [r4, #0]
 8005dc0:	1ac0      	subs	r0, r0, r3
 8005dc2:	6963      	ldr	r3, [r4, #20]
 8005dc4:	b2f6      	uxtb	r6, r6
 8005dc6:	4283      	cmp	r3, r0
 8005dc8:	4637      	mov	r7, r6
 8005dca:	dc04      	bgt.n	8005dd6 <__swbuf_r+0x42>
 8005dcc:	4621      	mov	r1, r4
 8005dce:	4628      	mov	r0, r5
 8005dd0:	f000 ff6c 	bl	8006cac <_fflush_r>
 8005dd4:	bb28      	cbnz	r0, 8005e22 <__swbuf_r+0x8e>
 8005dd6:	68a3      	ldr	r3, [r4, #8]
 8005dd8:	3b01      	subs	r3, #1
 8005dda:	60a3      	str	r3, [r4, #8]
 8005ddc:	6823      	ldr	r3, [r4, #0]
 8005dde:	1c5a      	adds	r2, r3, #1
 8005de0:	6022      	str	r2, [r4, #0]
 8005de2:	701e      	strb	r6, [r3, #0]
 8005de4:	6963      	ldr	r3, [r4, #20]
 8005de6:	3001      	adds	r0, #1
 8005de8:	4283      	cmp	r3, r0
 8005dea:	d004      	beq.n	8005df6 <__swbuf_r+0x62>
 8005dec:	89a3      	ldrh	r3, [r4, #12]
 8005dee:	07db      	lsls	r3, r3, #31
 8005df0:	d519      	bpl.n	8005e26 <__swbuf_r+0x92>
 8005df2:	2e0a      	cmp	r6, #10
 8005df4:	d117      	bne.n	8005e26 <__swbuf_r+0x92>
 8005df6:	4621      	mov	r1, r4
 8005df8:	4628      	mov	r0, r5
 8005dfa:	f000 ff57 	bl	8006cac <_fflush_r>
 8005dfe:	b190      	cbz	r0, 8005e26 <__swbuf_r+0x92>
 8005e00:	e00f      	b.n	8005e22 <__swbuf_r+0x8e>
 8005e02:	4b0b      	ldr	r3, [pc, #44]	; (8005e30 <__swbuf_r+0x9c>)
 8005e04:	429c      	cmp	r4, r3
 8005e06:	d101      	bne.n	8005e0c <__swbuf_r+0x78>
 8005e08:	68ac      	ldr	r4, [r5, #8]
 8005e0a:	e7d0      	b.n	8005dae <__swbuf_r+0x1a>
 8005e0c:	4b09      	ldr	r3, [pc, #36]	; (8005e34 <__swbuf_r+0xa0>)
 8005e0e:	429c      	cmp	r4, r3
 8005e10:	bf08      	it	eq
 8005e12:	68ec      	ldreq	r4, [r5, #12]
 8005e14:	e7cb      	b.n	8005dae <__swbuf_r+0x1a>
 8005e16:	4621      	mov	r1, r4
 8005e18:	4628      	mov	r0, r5
 8005e1a:	f000 f80d 	bl	8005e38 <__swsetup_r>
 8005e1e:	2800      	cmp	r0, #0
 8005e20:	d0cc      	beq.n	8005dbc <__swbuf_r+0x28>
 8005e22:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005e26:	4638      	mov	r0, r7
 8005e28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e2a:	bf00      	nop
 8005e2c:	080088f0 	.word	0x080088f0
 8005e30:	08008910 	.word	0x08008910
 8005e34:	080088d0 	.word	0x080088d0

08005e38 <__swsetup_r>:
 8005e38:	4b32      	ldr	r3, [pc, #200]	; (8005f04 <__swsetup_r+0xcc>)
 8005e3a:	b570      	push	{r4, r5, r6, lr}
 8005e3c:	681d      	ldr	r5, [r3, #0]
 8005e3e:	4606      	mov	r6, r0
 8005e40:	460c      	mov	r4, r1
 8005e42:	b125      	cbz	r5, 8005e4e <__swsetup_r+0x16>
 8005e44:	69ab      	ldr	r3, [r5, #24]
 8005e46:	b913      	cbnz	r3, 8005e4e <__swsetup_r+0x16>
 8005e48:	4628      	mov	r0, r5
 8005e4a:	f000 ff99 	bl	8006d80 <__sinit>
 8005e4e:	4b2e      	ldr	r3, [pc, #184]	; (8005f08 <__swsetup_r+0xd0>)
 8005e50:	429c      	cmp	r4, r3
 8005e52:	d10f      	bne.n	8005e74 <__swsetup_r+0x3c>
 8005e54:	686c      	ldr	r4, [r5, #4]
 8005e56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e5a:	b29a      	uxth	r2, r3
 8005e5c:	0715      	lsls	r5, r2, #28
 8005e5e:	d42c      	bmi.n	8005eba <__swsetup_r+0x82>
 8005e60:	06d0      	lsls	r0, r2, #27
 8005e62:	d411      	bmi.n	8005e88 <__swsetup_r+0x50>
 8005e64:	2209      	movs	r2, #9
 8005e66:	6032      	str	r2, [r6, #0]
 8005e68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e6c:	81a3      	strh	r3, [r4, #12]
 8005e6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e72:	e03e      	b.n	8005ef2 <__swsetup_r+0xba>
 8005e74:	4b25      	ldr	r3, [pc, #148]	; (8005f0c <__swsetup_r+0xd4>)
 8005e76:	429c      	cmp	r4, r3
 8005e78:	d101      	bne.n	8005e7e <__swsetup_r+0x46>
 8005e7a:	68ac      	ldr	r4, [r5, #8]
 8005e7c:	e7eb      	b.n	8005e56 <__swsetup_r+0x1e>
 8005e7e:	4b24      	ldr	r3, [pc, #144]	; (8005f10 <__swsetup_r+0xd8>)
 8005e80:	429c      	cmp	r4, r3
 8005e82:	bf08      	it	eq
 8005e84:	68ec      	ldreq	r4, [r5, #12]
 8005e86:	e7e6      	b.n	8005e56 <__swsetup_r+0x1e>
 8005e88:	0751      	lsls	r1, r2, #29
 8005e8a:	d512      	bpl.n	8005eb2 <__swsetup_r+0x7a>
 8005e8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e8e:	b141      	cbz	r1, 8005ea2 <__swsetup_r+0x6a>
 8005e90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e94:	4299      	cmp	r1, r3
 8005e96:	d002      	beq.n	8005e9e <__swsetup_r+0x66>
 8005e98:	4630      	mov	r0, r6
 8005e9a:	f001 ffc1 	bl	8007e20 <_free_r>
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	6363      	str	r3, [r4, #52]	; 0x34
 8005ea2:	89a3      	ldrh	r3, [r4, #12]
 8005ea4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005ea8:	81a3      	strh	r3, [r4, #12]
 8005eaa:	2300      	movs	r3, #0
 8005eac:	6063      	str	r3, [r4, #4]
 8005eae:	6923      	ldr	r3, [r4, #16]
 8005eb0:	6023      	str	r3, [r4, #0]
 8005eb2:	89a3      	ldrh	r3, [r4, #12]
 8005eb4:	f043 0308 	orr.w	r3, r3, #8
 8005eb8:	81a3      	strh	r3, [r4, #12]
 8005eba:	6923      	ldr	r3, [r4, #16]
 8005ebc:	b94b      	cbnz	r3, 8005ed2 <__swsetup_r+0x9a>
 8005ebe:	89a3      	ldrh	r3, [r4, #12]
 8005ec0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005ec4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ec8:	d003      	beq.n	8005ed2 <__swsetup_r+0x9a>
 8005eca:	4621      	mov	r1, r4
 8005ecc:	4630      	mov	r0, r6
 8005ece:	f001 fb3f 	bl	8007550 <__smakebuf_r>
 8005ed2:	89a2      	ldrh	r2, [r4, #12]
 8005ed4:	f012 0301 	ands.w	r3, r2, #1
 8005ed8:	d00c      	beq.n	8005ef4 <__swsetup_r+0xbc>
 8005eda:	2300      	movs	r3, #0
 8005edc:	60a3      	str	r3, [r4, #8]
 8005ede:	6963      	ldr	r3, [r4, #20]
 8005ee0:	425b      	negs	r3, r3
 8005ee2:	61a3      	str	r3, [r4, #24]
 8005ee4:	6923      	ldr	r3, [r4, #16]
 8005ee6:	b953      	cbnz	r3, 8005efe <__swsetup_r+0xc6>
 8005ee8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005eec:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005ef0:	d1ba      	bne.n	8005e68 <__swsetup_r+0x30>
 8005ef2:	bd70      	pop	{r4, r5, r6, pc}
 8005ef4:	0792      	lsls	r2, r2, #30
 8005ef6:	bf58      	it	pl
 8005ef8:	6963      	ldrpl	r3, [r4, #20]
 8005efa:	60a3      	str	r3, [r4, #8]
 8005efc:	e7f2      	b.n	8005ee4 <__swsetup_r+0xac>
 8005efe:	2000      	movs	r0, #0
 8005f00:	e7f7      	b.n	8005ef2 <__swsetup_r+0xba>
 8005f02:	bf00      	nop
 8005f04:	2000000c 	.word	0x2000000c
 8005f08:	080088f0 	.word	0x080088f0
 8005f0c:	08008910 	.word	0x08008910
 8005f10:	080088d0 	.word	0x080088d0

08005f14 <quorem>:
 8005f14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f18:	6903      	ldr	r3, [r0, #16]
 8005f1a:	690c      	ldr	r4, [r1, #16]
 8005f1c:	42a3      	cmp	r3, r4
 8005f1e:	4680      	mov	r8, r0
 8005f20:	f2c0 8082 	blt.w	8006028 <quorem+0x114>
 8005f24:	3c01      	subs	r4, #1
 8005f26:	f101 0714 	add.w	r7, r1, #20
 8005f2a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005f2e:	f100 0614 	add.w	r6, r0, #20
 8005f32:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005f36:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005f3a:	eb06 030c 	add.w	r3, r6, ip
 8005f3e:	3501      	adds	r5, #1
 8005f40:	eb07 090c 	add.w	r9, r7, ip
 8005f44:	9301      	str	r3, [sp, #4]
 8005f46:	fbb0 f5f5 	udiv	r5, r0, r5
 8005f4a:	b395      	cbz	r5, 8005fb2 <quorem+0x9e>
 8005f4c:	f04f 0a00 	mov.w	sl, #0
 8005f50:	4638      	mov	r0, r7
 8005f52:	46b6      	mov	lr, r6
 8005f54:	46d3      	mov	fp, sl
 8005f56:	f850 2b04 	ldr.w	r2, [r0], #4
 8005f5a:	b293      	uxth	r3, r2
 8005f5c:	fb05 a303 	mla	r3, r5, r3, sl
 8005f60:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	ebab 0303 	sub.w	r3, fp, r3
 8005f6a:	0c12      	lsrs	r2, r2, #16
 8005f6c:	f8de b000 	ldr.w	fp, [lr]
 8005f70:	fb05 a202 	mla	r2, r5, r2, sl
 8005f74:	fa13 f38b 	uxtah	r3, r3, fp
 8005f78:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005f7c:	fa1f fb82 	uxth.w	fp, r2
 8005f80:	f8de 2000 	ldr.w	r2, [lr]
 8005f84:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005f88:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f92:	4581      	cmp	r9, r0
 8005f94:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005f98:	f84e 3b04 	str.w	r3, [lr], #4
 8005f9c:	d2db      	bcs.n	8005f56 <quorem+0x42>
 8005f9e:	f856 300c 	ldr.w	r3, [r6, ip]
 8005fa2:	b933      	cbnz	r3, 8005fb2 <quorem+0x9e>
 8005fa4:	9b01      	ldr	r3, [sp, #4]
 8005fa6:	3b04      	subs	r3, #4
 8005fa8:	429e      	cmp	r6, r3
 8005faa:	461a      	mov	r2, r3
 8005fac:	d330      	bcc.n	8006010 <quorem+0xfc>
 8005fae:	f8c8 4010 	str.w	r4, [r8, #16]
 8005fb2:	4640      	mov	r0, r8
 8005fb4:	f001 fd7a 	bl	8007aac <__mcmp>
 8005fb8:	2800      	cmp	r0, #0
 8005fba:	db25      	blt.n	8006008 <quorem+0xf4>
 8005fbc:	3501      	adds	r5, #1
 8005fbe:	4630      	mov	r0, r6
 8005fc0:	f04f 0c00 	mov.w	ip, #0
 8005fc4:	f857 2b04 	ldr.w	r2, [r7], #4
 8005fc8:	f8d0 e000 	ldr.w	lr, [r0]
 8005fcc:	b293      	uxth	r3, r2
 8005fce:	ebac 0303 	sub.w	r3, ip, r3
 8005fd2:	0c12      	lsrs	r2, r2, #16
 8005fd4:	fa13 f38e 	uxtah	r3, r3, lr
 8005fd8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005fdc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005fe6:	45b9      	cmp	r9, r7
 8005fe8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005fec:	f840 3b04 	str.w	r3, [r0], #4
 8005ff0:	d2e8      	bcs.n	8005fc4 <quorem+0xb0>
 8005ff2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8005ff6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005ffa:	b92a      	cbnz	r2, 8006008 <quorem+0xf4>
 8005ffc:	3b04      	subs	r3, #4
 8005ffe:	429e      	cmp	r6, r3
 8006000:	461a      	mov	r2, r3
 8006002:	d30b      	bcc.n	800601c <quorem+0x108>
 8006004:	f8c8 4010 	str.w	r4, [r8, #16]
 8006008:	4628      	mov	r0, r5
 800600a:	b003      	add	sp, #12
 800600c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006010:	6812      	ldr	r2, [r2, #0]
 8006012:	3b04      	subs	r3, #4
 8006014:	2a00      	cmp	r2, #0
 8006016:	d1ca      	bne.n	8005fae <quorem+0x9a>
 8006018:	3c01      	subs	r4, #1
 800601a:	e7c5      	b.n	8005fa8 <quorem+0x94>
 800601c:	6812      	ldr	r2, [r2, #0]
 800601e:	3b04      	subs	r3, #4
 8006020:	2a00      	cmp	r2, #0
 8006022:	d1ef      	bne.n	8006004 <quorem+0xf0>
 8006024:	3c01      	subs	r4, #1
 8006026:	e7ea      	b.n	8005ffe <quorem+0xea>
 8006028:	2000      	movs	r0, #0
 800602a:	e7ee      	b.n	800600a <quorem+0xf6>
 800602c:	0000      	movs	r0, r0
	...

08006030 <_dtoa_r>:
 8006030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006034:	ec57 6b10 	vmov	r6, r7, d0
 8006038:	b097      	sub	sp, #92	; 0x5c
 800603a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800603c:	9106      	str	r1, [sp, #24]
 800603e:	4604      	mov	r4, r0
 8006040:	920b      	str	r2, [sp, #44]	; 0x2c
 8006042:	9312      	str	r3, [sp, #72]	; 0x48
 8006044:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006048:	e9cd 6700 	strd	r6, r7, [sp]
 800604c:	b93d      	cbnz	r5, 800605e <_dtoa_r+0x2e>
 800604e:	2010      	movs	r0, #16
 8006050:	f001 fabe 	bl	80075d0 <malloc>
 8006054:	6260      	str	r0, [r4, #36]	; 0x24
 8006056:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800605a:	6005      	str	r5, [r0, #0]
 800605c:	60c5      	str	r5, [r0, #12]
 800605e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006060:	6819      	ldr	r1, [r3, #0]
 8006062:	b151      	cbz	r1, 800607a <_dtoa_r+0x4a>
 8006064:	685a      	ldr	r2, [r3, #4]
 8006066:	604a      	str	r2, [r1, #4]
 8006068:	2301      	movs	r3, #1
 800606a:	4093      	lsls	r3, r2
 800606c:	608b      	str	r3, [r1, #8]
 800606e:	4620      	mov	r0, r4
 8006070:	f001 fafc 	bl	800766c <_Bfree>
 8006074:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006076:	2200      	movs	r2, #0
 8006078:	601a      	str	r2, [r3, #0]
 800607a:	1e3b      	subs	r3, r7, #0
 800607c:	bfbb      	ittet	lt
 800607e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006082:	9301      	strlt	r3, [sp, #4]
 8006084:	2300      	movge	r3, #0
 8006086:	2201      	movlt	r2, #1
 8006088:	bfac      	ite	ge
 800608a:	f8c8 3000 	strge.w	r3, [r8]
 800608e:	f8c8 2000 	strlt.w	r2, [r8]
 8006092:	4baf      	ldr	r3, [pc, #700]	; (8006350 <_dtoa_r+0x320>)
 8006094:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006098:	ea33 0308 	bics.w	r3, r3, r8
 800609c:	d114      	bne.n	80060c8 <_dtoa_r+0x98>
 800609e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80060a0:	f242 730f 	movw	r3, #9999	; 0x270f
 80060a4:	6013      	str	r3, [r2, #0]
 80060a6:	9b00      	ldr	r3, [sp, #0]
 80060a8:	b923      	cbnz	r3, 80060b4 <_dtoa_r+0x84>
 80060aa:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80060ae:	2800      	cmp	r0, #0
 80060b0:	f000 8542 	beq.w	8006b38 <_dtoa_r+0xb08>
 80060b4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80060b6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8006364 <_dtoa_r+0x334>
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	f000 8544 	beq.w	8006b48 <_dtoa_r+0xb18>
 80060c0:	f10b 0303 	add.w	r3, fp, #3
 80060c4:	f000 bd3e 	b.w	8006b44 <_dtoa_r+0xb14>
 80060c8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80060cc:	2200      	movs	r2, #0
 80060ce:	2300      	movs	r3, #0
 80060d0:	4630      	mov	r0, r6
 80060d2:	4639      	mov	r1, r7
 80060d4:	f7fa fcf8 	bl	8000ac8 <__aeabi_dcmpeq>
 80060d8:	4681      	mov	r9, r0
 80060da:	b168      	cbz	r0, 80060f8 <_dtoa_r+0xc8>
 80060dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80060de:	2301      	movs	r3, #1
 80060e0:	6013      	str	r3, [r2, #0]
 80060e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	f000 8524 	beq.w	8006b32 <_dtoa_r+0xb02>
 80060ea:	4b9a      	ldr	r3, [pc, #616]	; (8006354 <_dtoa_r+0x324>)
 80060ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80060ee:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 80060f2:	6013      	str	r3, [r2, #0]
 80060f4:	f000 bd28 	b.w	8006b48 <_dtoa_r+0xb18>
 80060f8:	aa14      	add	r2, sp, #80	; 0x50
 80060fa:	a915      	add	r1, sp, #84	; 0x54
 80060fc:	ec47 6b10 	vmov	d0, r6, r7
 8006100:	4620      	mov	r0, r4
 8006102:	f001 fdc1 	bl	8007c88 <__d2b>
 8006106:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800610a:	9004      	str	r0, [sp, #16]
 800610c:	2d00      	cmp	r5, #0
 800610e:	d07c      	beq.n	800620a <_dtoa_r+0x1da>
 8006110:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006114:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8006118:	46b2      	mov	sl, r6
 800611a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800611e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006122:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8006126:	2200      	movs	r2, #0
 8006128:	4b8b      	ldr	r3, [pc, #556]	; (8006358 <_dtoa_r+0x328>)
 800612a:	4650      	mov	r0, sl
 800612c:	4659      	mov	r1, fp
 800612e:	f7fa f8ab 	bl	8000288 <__aeabi_dsub>
 8006132:	a381      	add	r3, pc, #516	; (adr r3, 8006338 <_dtoa_r+0x308>)
 8006134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006138:	f7fa fa5e 	bl	80005f8 <__aeabi_dmul>
 800613c:	a380      	add	r3, pc, #512	; (adr r3, 8006340 <_dtoa_r+0x310>)
 800613e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006142:	f7fa f8a3 	bl	800028c <__adddf3>
 8006146:	4606      	mov	r6, r0
 8006148:	4628      	mov	r0, r5
 800614a:	460f      	mov	r7, r1
 800614c:	f7fa f9ea 	bl	8000524 <__aeabi_i2d>
 8006150:	a37d      	add	r3, pc, #500	; (adr r3, 8006348 <_dtoa_r+0x318>)
 8006152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006156:	f7fa fa4f 	bl	80005f8 <__aeabi_dmul>
 800615a:	4602      	mov	r2, r0
 800615c:	460b      	mov	r3, r1
 800615e:	4630      	mov	r0, r6
 8006160:	4639      	mov	r1, r7
 8006162:	f7fa f893 	bl	800028c <__adddf3>
 8006166:	4606      	mov	r6, r0
 8006168:	460f      	mov	r7, r1
 800616a:	f7fa fcf5 	bl	8000b58 <__aeabi_d2iz>
 800616e:	2200      	movs	r2, #0
 8006170:	4682      	mov	sl, r0
 8006172:	2300      	movs	r3, #0
 8006174:	4630      	mov	r0, r6
 8006176:	4639      	mov	r1, r7
 8006178:	f7fa fcb0 	bl	8000adc <__aeabi_dcmplt>
 800617c:	b148      	cbz	r0, 8006192 <_dtoa_r+0x162>
 800617e:	4650      	mov	r0, sl
 8006180:	f7fa f9d0 	bl	8000524 <__aeabi_i2d>
 8006184:	4632      	mov	r2, r6
 8006186:	463b      	mov	r3, r7
 8006188:	f7fa fc9e 	bl	8000ac8 <__aeabi_dcmpeq>
 800618c:	b908      	cbnz	r0, 8006192 <_dtoa_r+0x162>
 800618e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006192:	f1ba 0f16 	cmp.w	sl, #22
 8006196:	d859      	bhi.n	800624c <_dtoa_r+0x21c>
 8006198:	4970      	ldr	r1, [pc, #448]	; (800635c <_dtoa_r+0x32c>)
 800619a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800619e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80061a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80061a6:	f7fa fcb7 	bl	8000b18 <__aeabi_dcmpgt>
 80061aa:	2800      	cmp	r0, #0
 80061ac:	d050      	beq.n	8006250 <_dtoa_r+0x220>
 80061ae:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80061b2:	2300      	movs	r3, #0
 80061b4:	930f      	str	r3, [sp, #60]	; 0x3c
 80061b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80061b8:	1b5d      	subs	r5, r3, r5
 80061ba:	f1b5 0801 	subs.w	r8, r5, #1
 80061be:	bf49      	itett	mi
 80061c0:	f1c5 0301 	rsbmi	r3, r5, #1
 80061c4:	2300      	movpl	r3, #0
 80061c6:	9305      	strmi	r3, [sp, #20]
 80061c8:	f04f 0800 	movmi.w	r8, #0
 80061cc:	bf58      	it	pl
 80061ce:	9305      	strpl	r3, [sp, #20]
 80061d0:	f1ba 0f00 	cmp.w	sl, #0
 80061d4:	db3e      	blt.n	8006254 <_dtoa_r+0x224>
 80061d6:	2300      	movs	r3, #0
 80061d8:	44d0      	add	r8, sl
 80061da:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80061de:	9307      	str	r3, [sp, #28]
 80061e0:	9b06      	ldr	r3, [sp, #24]
 80061e2:	2b09      	cmp	r3, #9
 80061e4:	f200 8090 	bhi.w	8006308 <_dtoa_r+0x2d8>
 80061e8:	2b05      	cmp	r3, #5
 80061ea:	bfc4      	itt	gt
 80061ec:	3b04      	subgt	r3, #4
 80061ee:	9306      	strgt	r3, [sp, #24]
 80061f0:	9b06      	ldr	r3, [sp, #24]
 80061f2:	f1a3 0302 	sub.w	r3, r3, #2
 80061f6:	bfcc      	ite	gt
 80061f8:	2500      	movgt	r5, #0
 80061fa:	2501      	movle	r5, #1
 80061fc:	2b03      	cmp	r3, #3
 80061fe:	f200 808f 	bhi.w	8006320 <_dtoa_r+0x2f0>
 8006202:	e8df f003 	tbb	[pc, r3]
 8006206:	7f7d      	.short	0x7f7d
 8006208:	7131      	.short	0x7131
 800620a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800620e:	441d      	add	r5, r3
 8006210:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8006214:	2820      	cmp	r0, #32
 8006216:	dd13      	ble.n	8006240 <_dtoa_r+0x210>
 8006218:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800621c:	9b00      	ldr	r3, [sp, #0]
 800621e:	fa08 f800 	lsl.w	r8, r8, r0
 8006222:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8006226:	fa23 f000 	lsr.w	r0, r3, r0
 800622a:	ea48 0000 	orr.w	r0, r8, r0
 800622e:	f7fa f969 	bl	8000504 <__aeabi_ui2d>
 8006232:	2301      	movs	r3, #1
 8006234:	4682      	mov	sl, r0
 8006236:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800623a:	3d01      	subs	r5, #1
 800623c:	9313      	str	r3, [sp, #76]	; 0x4c
 800623e:	e772      	b.n	8006126 <_dtoa_r+0xf6>
 8006240:	9b00      	ldr	r3, [sp, #0]
 8006242:	f1c0 0020 	rsb	r0, r0, #32
 8006246:	fa03 f000 	lsl.w	r0, r3, r0
 800624a:	e7f0      	b.n	800622e <_dtoa_r+0x1fe>
 800624c:	2301      	movs	r3, #1
 800624e:	e7b1      	b.n	80061b4 <_dtoa_r+0x184>
 8006250:	900f      	str	r0, [sp, #60]	; 0x3c
 8006252:	e7b0      	b.n	80061b6 <_dtoa_r+0x186>
 8006254:	9b05      	ldr	r3, [sp, #20]
 8006256:	eba3 030a 	sub.w	r3, r3, sl
 800625a:	9305      	str	r3, [sp, #20]
 800625c:	f1ca 0300 	rsb	r3, sl, #0
 8006260:	9307      	str	r3, [sp, #28]
 8006262:	2300      	movs	r3, #0
 8006264:	930e      	str	r3, [sp, #56]	; 0x38
 8006266:	e7bb      	b.n	80061e0 <_dtoa_r+0x1b0>
 8006268:	2301      	movs	r3, #1
 800626a:	930a      	str	r3, [sp, #40]	; 0x28
 800626c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800626e:	2b00      	cmp	r3, #0
 8006270:	dd59      	ble.n	8006326 <_dtoa_r+0x2f6>
 8006272:	9302      	str	r3, [sp, #8]
 8006274:	4699      	mov	r9, r3
 8006276:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006278:	2200      	movs	r2, #0
 800627a:	6072      	str	r2, [r6, #4]
 800627c:	2204      	movs	r2, #4
 800627e:	f102 0014 	add.w	r0, r2, #20
 8006282:	4298      	cmp	r0, r3
 8006284:	6871      	ldr	r1, [r6, #4]
 8006286:	d953      	bls.n	8006330 <_dtoa_r+0x300>
 8006288:	4620      	mov	r0, r4
 800628a:	f001 f9bb 	bl	8007604 <_Balloc>
 800628e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006290:	6030      	str	r0, [r6, #0]
 8006292:	f1b9 0f0e 	cmp.w	r9, #14
 8006296:	f8d3 b000 	ldr.w	fp, [r3]
 800629a:	f200 80e6 	bhi.w	800646a <_dtoa_r+0x43a>
 800629e:	2d00      	cmp	r5, #0
 80062a0:	f000 80e3 	beq.w	800646a <_dtoa_r+0x43a>
 80062a4:	ed9d 7b00 	vldr	d7, [sp]
 80062a8:	f1ba 0f00 	cmp.w	sl, #0
 80062ac:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80062b0:	dd74      	ble.n	800639c <_dtoa_r+0x36c>
 80062b2:	4a2a      	ldr	r2, [pc, #168]	; (800635c <_dtoa_r+0x32c>)
 80062b4:	f00a 030f 	and.w	r3, sl, #15
 80062b8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80062bc:	ed93 7b00 	vldr	d7, [r3]
 80062c0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80062c4:	06f0      	lsls	r0, r6, #27
 80062c6:	ed8d 7b08 	vstr	d7, [sp, #32]
 80062ca:	d565      	bpl.n	8006398 <_dtoa_r+0x368>
 80062cc:	4b24      	ldr	r3, [pc, #144]	; (8006360 <_dtoa_r+0x330>)
 80062ce:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80062d2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80062d6:	f7fa fab9 	bl	800084c <__aeabi_ddiv>
 80062da:	e9cd 0100 	strd	r0, r1, [sp]
 80062de:	f006 060f 	and.w	r6, r6, #15
 80062e2:	2503      	movs	r5, #3
 80062e4:	4f1e      	ldr	r7, [pc, #120]	; (8006360 <_dtoa_r+0x330>)
 80062e6:	e04c      	b.n	8006382 <_dtoa_r+0x352>
 80062e8:	2301      	movs	r3, #1
 80062ea:	930a      	str	r3, [sp, #40]	; 0x28
 80062ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062ee:	4453      	add	r3, sl
 80062f0:	f103 0901 	add.w	r9, r3, #1
 80062f4:	9302      	str	r3, [sp, #8]
 80062f6:	464b      	mov	r3, r9
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	bfb8      	it	lt
 80062fc:	2301      	movlt	r3, #1
 80062fe:	e7ba      	b.n	8006276 <_dtoa_r+0x246>
 8006300:	2300      	movs	r3, #0
 8006302:	e7b2      	b.n	800626a <_dtoa_r+0x23a>
 8006304:	2300      	movs	r3, #0
 8006306:	e7f0      	b.n	80062ea <_dtoa_r+0x2ba>
 8006308:	2501      	movs	r5, #1
 800630a:	2300      	movs	r3, #0
 800630c:	9306      	str	r3, [sp, #24]
 800630e:	950a      	str	r5, [sp, #40]	; 0x28
 8006310:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006314:	9302      	str	r3, [sp, #8]
 8006316:	4699      	mov	r9, r3
 8006318:	2200      	movs	r2, #0
 800631a:	2312      	movs	r3, #18
 800631c:	920b      	str	r2, [sp, #44]	; 0x2c
 800631e:	e7aa      	b.n	8006276 <_dtoa_r+0x246>
 8006320:	2301      	movs	r3, #1
 8006322:	930a      	str	r3, [sp, #40]	; 0x28
 8006324:	e7f4      	b.n	8006310 <_dtoa_r+0x2e0>
 8006326:	2301      	movs	r3, #1
 8006328:	9302      	str	r3, [sp, #8]
 800632a:	4699      	mov	r9, r3
 800632c:	461a      	mov	r2, r3
 800632e:	e7f5      	b.n	800631c <_dtoa_r+0x2ec>
 8006330:	3101      	adds	r1, #1
 8006332:	6071      	str	r1, [r6, #4]
 8006334:	0052      	lsls	r2, r2, #1
 8006336:	e7a2      	b.n	800627e <_dtoa_r+0x24e>
 8006338:	636f4361 	.word	0x636f4361
 800633c:	3fd287a7 	.word	0x3fd287a7
 8006340:	8b60c8b3 	.word	0x8b60c8b3
 8006344:	3fc68a28 	.word	0x3fc68a28
 8006348:	509f79fb 	.word	0x509f79fb
 800634c:	3fd34413 	.word	0x3fd34413
 8006350:	7ff00000 	.word	0x7ff00000
 8006354:	08008845 	.word	0x08008845
 8006358:	3ff80000 	.word	0x3ff80000
 800635c:	08008968 	.word	0x08008968
 8006360:	08008940 	.word	0x08008940
 8006364:	080088c9 	.word	0x080088c9
 8006368:	07f1      	lsls	r1, r6, #31
 800636a:	d508      	bpl.n	800637e <_dtoa_r+0x34e>
 800636c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006370:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006374:	f7fa f940 	bl	80005f8 <__aeabi_dmul>
 8006378:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800637c:	3501      	adds	r5, #1
 800637e:	1076      	asrs	r6, r6, #1
 8006380:	3708      	adds	r7, #8
 8006382:	2e00      	cmp	r6, #0
 8006384:	d1f0      	bne.n	8006368 <_dtoa_r+0x338>
 8006386:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800638a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800638e:	f7fa fa5d 	bl	800084c <__aeabi_ddiv>
 8006392:	e9cd 0100 	strd	r0, r1, [sp]
 8006396:	e01a      	b.n	80063ce <_dtoa_r+0x39e>
 8006398:	2502      	movs	r5, #2
 800639a:	e7a3      	b.n	80062e4 <_dtoa_r+0x2b4>
 800639c:	f000 80a0 	beq.w	80064e0 <_dtoa_r+0x4b0>
 80063a0:	f1ca 0600 	rsb	r6, sl, #0
 80063a4:	4b9f      	ldr	r3, [pc, #636]	; (8006624 <_dtoa_r+0x5f4>)
 80063a6:	4fa0      	ldr	r7, [pc, #640]	; (8006628 <_dtoa_r+0x5f8>)
 80063a8:	f006 020f 	and.w	r2, r6, #15
 80063ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80063b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063b4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80063b8:	f7fa f91e 	bl	80005f8 <__aeabi_dmul>
 80063bc:	e9cd 0100 	strd	r0, r1, [sp]
 80063c0:	1136      	asrs	r6, r6, #4
 80063c2:	2300      	movs	r3, #0
 80063c4:	2502      	movs	r5, #2
 80063c6:	2e00      	cmp	r6, #0
 80063c8:	d17f      	bne.n	80064ca <_dtoa_r+0x49a>
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d1e1      	bne.n	8006392 <_dtoa_r+0x362>
 80063ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	f000 8087 	beq.w	80064e4 <_dtoa_r+0x4b4>
 80063d6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80063da:	2200      	movs	r2, #0
 80063dc:	4b93      	ldr	r3, [pc, #588]	; (800662c <_dtoa_r+0x5fc>)
 80063de:	4630      	mov	r0, r6
 80063e0:	4639      	mov	r1, r7
 80063e2:	f7fa fb7b 	bl	8000adc <__aeabi_dcmplt>
 80063e6:	2800      	cmp	r0, #0
 80063e8:	d07c      	beq.n	80064e4 <_dtoa_r+0x4b4>
 80063ea:	f1b9 0f00 	cmp.w	r9, #0
 80063ee:	d079      	beq.n	80064e4 <_dtoa_r+0x4b4>
 80063f0:	9b02      	ldr	r3, [sp, #8]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	dd35      	ble.n	8006462 <_dtoa_r+0x432>
 80063f6:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80063fa:	9308      	str	r3, [sp, #32]
 80063fc:	4639      	mov	r1, r7
 80063fe:	2200      	movs	r2, #0
 8006400:	4b8b      	ldr	r3, [pc, #556]	; (8006630 <_dtoa_r+0x600>)
 8006402:	4630      	mov	r0, r6
 8006404:	f7fa f8f8 	bl	80005f8 <__aeabi_dmul>
 8006408:	e9cd 0100 	strd	r0, r1, [sp]
 800640c:	9f02      	ldr	r7, [sp, #8]
 800640e:	3501      	adds	r5, #1
 8006410:	4628      	mov	r0, r5
 8006412:	f7fa f887 	bl	8000524 <__aeabi_i2d>
 8006416:	e9dd 2300 	ldrd	r2, r3, [sp]
 800641a:	f7fa f8ed 	bl	80005f8 <__aeabi_dmul>
 800641e:	2200      	movs	r2, #0
 8006420:	4b84      	ldr	r3, [pc, #528]	; (8006634 <_dtoa_r+0x604>)
 8006422:	f7f9 ff33 	bl	800028c <__adddf3>
 8006426:	4605      	mov	r5, r0
 8006428:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800642c:	2f00      	cmp	r7, #0
 800642e:	d15d      	bne.n	80064ec <_dtoa_r+0x4bc>
 8006430:	2200      	movs	r2, #0
 8006432:	4b81      	ldr	r3, [pc, #516]	; (8006638 <_dtoa_r+0x608>)
 8006434:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006438:	f7f9 ff26 	bl	8000288 <__aeabi_dsub>
 800643c:	462a      	mov	r2, r5
 800643e:	4633      	mov	r3, r6
 8006440:	e9cd 0100 	strd	r0, r1, [sp]
 8006444:	f7fa fb68 	bl	8000b18 <__aeabi_dcmpgt>
 8006448:	2800      	cmp	r0, #0
 800644a:	f040 8288 	bne.w	800695e <_dtoa_r+0x92e>
 800644e:	462a      	mov	r2, r5
 8006450:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006454:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006458:	f7fa fb40 	bl	8000adc <__aeabi_dcmplt>
 800645c:	2800      	cmp	r0, #0
 800645e:	f040 827c 	bne.w	800695a <_dtoa_r+0x92a>
 8006462:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006466:	e9cd 2300 	strd	r2, r3, [sp]
 800646a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800646c:	2b00      	cmp	r3, #0
 800646e:	f2c0 8150 	blt.w	8006712 <_dtoa_r+0x6e2>
 8006472:	f1ba 0f0e 	cmp.w	sl, #14
 8006476:	f300 814c 	bgt.w	8006712 <_dtoa_r+0x6e2>
 800647a:	4b6a      	ldr	r3, [pc, #424]	; (8006624 <_dtoa_r+0x5f4>)
 800647c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006480:	ed93 7b00 	vldr	d7, [r3]
 8006484:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006486:	2b00      	cmp	r3, #0
 8006488:	ed8d 7b02 	vstr	d7, [sp, #8]
 800648c:	f280 80d8 	bge.w	8006640 <_dtoa_r+0x610>
 8006490:	f1b9 0f00 	cmp.w	r9, #0
 8006494:	f300 80d4 	bgt.w	8006640 <_dtoa_r+0x610>
 8006498:	f040 825e 	bne.w	8006958 <_dtoa_r+0x928>
 800649c:	2200      	movs	r2, #0
 800649e:	4b66      	ldr	r3, [pc, #408]	; (8006638 <_dtoa_r+0x608>)
 80064a0:	ec51 0b17 	vmov	r0, r1, d7
 80064a4:	f7fa f8a8 	bl	80005f8 <__aeabi_dmul>
 80064a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80064ac:	f7fa fb2a 	bl	8000b04 <__aeabi_dcmpge>
 80064b0:	464f      	mov	r7, r9
 80064b2:	464e      	mov	r6, r9
 80064b4:	2800      	cmp	r0, #0
 80064b6:	f040 8234 	bne.w	8006922 <_dtoa_r+0x8f2>
 80064ba:	2331      	movs	r3, #49	; 0x31
 80064bc:	f10b 0501 	add.w	r5, fp, #1
 80064c0:	f88b 3000 	strb.w	r3, [fp]
 80064c4:	f10a 0a01 	add.w	sl, sl, #1
 80064c8:	e22f      	b.n	800692a <_dtoa_r+0x8fa>
 80064ca:	07f2      	lsls	r2, r6, #31
 80064cc:	d505      	bpl.n	80064da <_dtoa_r+0x4aa>
 80064ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064d2:	f7fa f891 	bl	80005f8 <__aeabi_dmul>
 80064d6:	3501      	adds	r5, #1
 80064d8:	2301      	movs	r3, #1
 80064da:	1076      	asrs	r6, r6, #1
 80064dc:	3708      	adds	r7, #8
 80064de:	e772      	b.n	80063c6 <_dtoa_r+0x396>
 80064e0:	2502      	movs	r5, #2
 80064e2:	e774      	b.n	80063ce <_dtoa_r+0x39e>
 80064e4:	f8cd a020 	str.w	sl, [sp, #32]
 80064e8:	464f      	mov	r7, r9
 80064ea:	e791      	b.n	8006410 <_dtoa_r+0x3e0>
 80064ec:	4b4d      	ldr	r3, [pc, #308]	; (8006624 <_dtoa_r+0x5f4>)
 80064ee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80064f2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80064f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d047      	beq.n	800658c <_dtoa_r+0x55c>
 80064fc:	4602      	mov	r2, r0
 80064fe:	460b      	mov	r3, r1
 8006500:	2000      	movs	r0, #0
 8006502:	494e      	ldr	r1, [pc, #312]	; (800663c <_dtoa_r+0x60c>)
 8006504:	f7fa f9a2 	bl	800084c <__aeabi_ddiv>
 8006508:	462a      	mov	r2, r5
 800650a:	4633      	mov	r3, r6
 800650c:	f7f9 febc 	bl	8000288 <__aeabi_dsub>
 8006510:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006514:	465d      	mov	r5, fp
 8006516:	e9dd 0100 	ldrd	r0, r1, [sp]
 800651a:	f7fa fb1d 	bl	8000b58 <__aeabi_d2iz>
 800651e:	4606      	mov	r6, r0
 8006520:	f7fa f800 	bl	8000524 <__aeabi_i2d>
 8006524:	4602      	mov	r2, r0
 8006526:	460b      	mov	r3, r1
 8006528:	e9dd 0100 	ldrd	r0, r1, [sp]
 800652c:	f7f9 feac 	bl	8000288 <__aeabi_dsub>
 8006530:	3630      	adds	r6, #48	; 0x30
 8006532:	f805 6b01 	strb.w	r6, [r5], #1
 8006536:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800653a:	e9cd 0100 	strd	r0, r1, [sp]
 800653e:	f7fa facd 	bl	8000adc <__aeabi_dcmplt>
 8006542:	2800      	cmp	r0, #0
 8006544:	d163      	bne.n	800660e <_dtoa_r+0x5de>
 8006546:	e9dd 2300 	ldrd	r2, r3, [sp]
 800654a:	2000      	movs	r0, #0
 800654c:	4937      	ldr	r1, [pc, #220]	; (800662c <_dtoa_r+0x5fc>)
 800654e:	f7f9 fe9b 	bl	8000288 <__aeabi_dsub>
 8006552:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006556:	f7fa fac1 	bl	8000adc <__aeabi_dcmplt>
 800655a:	2800      	cmp	r0, #0
 800655c:	f040 80b7 	bne.w	80066ce <_dtoa_r+0x69e>
 8006560:	eba5 030b 	sub.w	r3, r5, fp
 8006564:	429f      	cmp	r7, r3
 8006566:	f77f af7c 	ble.w	8006462 <_dtoa_r+0x432>
 800656a:	2200      	movs	r2, #0
 800656c:	4b30      	ldr	r3, [pc, #192]	; (8006630 <_dtoa_r+0x600>)
 800656e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006572:	f7fa f841 	bl	80005f8 <__aeabi_dmul>
 8006576:	2200      	movs	r2, #0
 8006578:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800657c:	4b2c      	ldr	r3, [pc, #176]	; (8006630 <_dtoa_r+0x600>)
 800657e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006582:	f7fa f839 	bl	80005f8 <__aeabi_dmul>
 8006586:	e9cd 0100 	strd	r0, r1, [sp]
 800658a:	e7c4      	b.n	8006516 <_dtoa_r+0x4e6>
 800658c:	462a      	mov	r2, r5
 800658e:	4633      	mov	r3, r6
 8006590:	f7fa f832 	bl	80005f8 <__aeabi_dmul>
 8006594:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006598:	eb0b 0507 	add.w	r5, fp, r7
 800659c:	465e      	mov	r6, fp
 800659e:	e9dd 0100 	ldrd	r0, r1, [sp]
 80065a2:	f7fa fad9 	bl	8000b58 <__aeabi_d2iz>
 80065a6:	4607      	mov	r7, r0
 80065a8:	f7f9 ffbc 	bl	8000524 <__aeabi_i2d>
 80065ac:	3730      	adds	r7, #48	; 0x30
 80065ae:	4602      	mov	r2, r0
 80065b0:	460b      	mov	r3, r1
 80065b2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80065b6:	f7f9 fe67 	bl	8000288 <__aeabi_dsub>
 80065ba:	f806 7b01 	strb.w	r7, [r6], #1
 80065be:	42ae      	cmp	r6, r5
 80065c0:	e9cd 0100 	strd	r0, r1, [sp]
 80065c4:	f04f 0200 	mov.w	r2, #0
 80065c8:	d126      	bne.n	8006618 <_dtoa_r+0x5e8>
 80065ca:	4b1c      	ldr	r3, [pc, #112]	; (800663c <_dtoa_r+0x60c>)
 80065cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80065d0:	f7f9 fe5c 	bl	800028c <__adddf3>
 80065d4:	4602      	mov	r2, r0
 80065d6:	460b      	mov	r3, r1
 80065d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80065dc:	f7fa fa9c 	bl	8000b18 <__aeabi_dcmpgt>
 80065e0:	2800      	cmp	r0, #0
 80065e2:	d174      	bne.n	80066ce <_dtoa_r+0x69e>
 80065e4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80065e8:	2000      	movs	r0, #0
 80065ea:	4914      	ldr	r1, [pc, #80]	; (800663c <_dtoa_r+0x60c>)
 80065ec:	f7f9 fe4c 	bl	8000288 <__aeabi_dsub>
 80065f0:	4602      	mov	r2, r0
 80065f2:	460b      	mov	r3, r1
 80065f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80065f8:	f7fa fa70 	bl	8000adc <__aeabi_dcmplt>
 80065fc:	2800      	cmp	r0, #0
 80065fe:	f43f af30 	beq.w	8006462 <_dtoa_r+0x432>
 8006602:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006606:	2b30      	cmp	r3, #48	; 0x30
 8006608:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800660c:	d002      	beq.n	8006614 <_dtoa_r+0x5e4>
 800660e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8006612:	e04a      	b.n	80066aa <_dtoa_r+0x67a>
 8006614:	4615      	mov	r5, r2
 8006616:	e7f4      	b.n	8006602 <_dtoa_r+0x5d2>
 8006618:	4b05      	ldr	r3, [pc, #20]	; (8006630 <_dtoa_r+0x600>)
 800661a:	f7f9 ffed 	bl	80005f8 <__aeabi_dmul>
 800661e:	e9cd 0100 	strd	r0, r1, [sp]
 8006622:	e7bc      	b.n	800659e <_dtoa_r+0x56e>
 8006624:	08008968 	.word	0x08008968
 8006628:	08008940 	.word	0x08008940
 800662c:	3ff00000 	.word	0x3ff00000
 8006630:	40240000 	.word	0x40240000
 8006634:	401c0000 	.word	0x401c0000
 8006638:	40140000 	.word	0x40140000
 800663c:	3fe00000 	.word	0x3fe00000
 8006640:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006644:	465d      	mov	r5, fp
 8006646:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800664a:	4630      	mov	r0, r6
 800664c:	4639      	mov	r1, r7
 800664e:	f7fa f8fd 	bl	800084c <__aeabi_ddiv>
 8006652:	f7fa fa81 	bl	8000b58 <__aeabi_d2iz>
 8006656:	4680      	mov	r8, r0
 8006658:	f7f9 ff64 	bl	8000524 <__aeabi_i2d>
 800665c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006660:	f7f9 ffca 	bl	80005f8 <__aeabi_dmul>
 8006664:	4602      	mov	r2, r0
 8006666:	460b      	mov	r3, r1
 8006668:	4630      	mov	r0, r6
 800666a:	4639      	mov	r1, r7
 800666c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8006670:	f7f9 fe0a 	bl	8000288 <__aeabi_dsub>
 8006674:	f805 6b01 	strb.w	r6, [r5], #1
 8006678:	eba5 060b 	sub.w	r6, r5, fp
 800667c:	45b1      	cmp	r9, r6
 800667e:	4602      	mov	r2, r0
 8006680:	460b      	mov	r3, r1
 8006682:	d139      	bne.n	80066f8 <_dtoa_r+0x6c8>
 8006684:	f7f9 fe02 	bl	800028c <__adddf3>
 8006688:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800668c:	4606      	mov	r6, r0
 800668e:	460f      	mov	r7, r1
 8006690:	f7fa fa42 	bl	8000b18 <__aeabi_dcmpgt>
 8006694:	b9c8      	cbnz	r0, 80066ca <_dtoa_r+0x69a>
 8006696:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800669a:	4630      	mov	r0, r6
 800669c:	4639      	mov	r1, r7
 800669e:	f7fa fa13 	bl	8000ac8 <__aeabi_dcmpeq>
 80066a2:	b110      	cbz	r0, 80066aa <_dtoa_r+0x67a>
 80066a4:	f018 0f01 	tst.w	r8, #1
 80066a8:	d10f      	bne.n	80066ca <_dtoa_r+0x69a>
 80066aa:	9904      	ldr	r1, [sp, #16]
 80066ac:	4620      	mov	r0, r4
 80066ae:	f000 ffdd 	bl	800766c <_Bfree>
 80066b2:	2300      	movs	r3, #0
 80066b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80066b6:	702b      	strb	r3, [r5, #0]
 80066b8:	f10a 0301 	add.w	r3, sl, #1
 80066bc:	6013      	str	r3, [r2, #0]
 80066be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	f000 8241 	beq.w	8006b48 <_dtoa_r+0xb18>
 80066c6:	601d      	str	r5, [r3, #0]
 80066c8:	e23e      	b.n	8006b48 <_dtoa_r+0xb18>
 80066ca:	f8cd a020 	str.w	sl, [sp, #32]
 80066ce:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80066d2:	2a39      	cmp	r2, #57	; 0x39
 80066d4:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 80066d8:	d108      	bne.n	80066ec <_dtoa_r+0x6bc>
 80066da:	459b      	cmp	fp, r3
 80066dc:	d10a      	bne.n	80066f4 <_dtoa_r+0x6c4>
 80066de:	9b08      	ldr	r3, [sp, #32]
 80066e0:	3301      	adds	r3, #1
 80066e2:	9308      	str	r3, [sp, #32]
 80066e4:	2330      	movs	r3, #48	; 0x30
 80066e6:	f88b 3000 	strb.w	r3, [fp]
 80066ea:	465b      	mov	r3, fp
 80066ec:	781a      	ldrb	r2, [r3, #0]
 80066ee:	3201      	adds	r2, #1
 80066f0:	701a      	strb	r2, [r3, #0]
 80066f2:	e78c      	b.n	800660e <_dtoa_r+0x5de>
 80066f4:	461d      	mov	r5, r3
 80066f6:	e7ea      	b.n	80066ce <_dtoa_r+0x69e>
 80066f8:	2200      	movs	r2, #0
 80066fa:	4b9b      	ldr	r3, [pc, #620]	; (8006968 <_dtoa_r+0x938>)
 80066fc:	f7f9 ff7c 	bl	80005f8 <__aeabi_dmul>
 8006700:	2200      	movs	r2, #0
 8006702:	2300      	movs	r3, #0
 8006704:	4606      	mov	r6, r0
 8006706:	460f      	mov	r7, r1
 8006708:	f7fa f9de 	bl	8000ac8 <__aeabi_dcmpeq>
 800670c:	2800      	cmp	r0, #0
 800670e:	d09a      	beq.n	8006646 <_dtoa_r+0x616>
 8006710:	e7cb      	b.n	80066aa <_dtoa_r+0x67a>
 8006712:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006714:	2a00      	cmp	r2, #0
 8006716:	f000 808b 	beq.w	8006830 <_dtoa_r+0x800>
 800671a:	9a06      	ldr	r2, [sp, #24]
 800671c:	2a01      	cmp	r2, #1
 800671e:	dc6e      	bgt.n	80067fe <_dtoa_r+0x7ce>
 8006720:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006722:	2a00      	cmp	r2, #0
 8006724:	d067      	beq.n	80067f6 <_dtoa_r+0x7c6>
 8006726:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800672a:	9f07      	ldr	r7, [sp, #28]
 800672c:	9d05      	ldr	r5, [sp, #20]
 800672e:	9a05      	ldr	r2, [sp, #20]
 8006730:	2101      	movs	r1, #1
 8006732:	441a      	add	r2, r3
 8006734:	4620      	mov	r0, r4
 8006736:	9205      	str	r2, [sp, #20]
 8006738:	4498      	add	r8, r3
 800673a:	f001 f875 	bl	8007828 <__i2b>
 800673e:	4606      	mov	r6, r0
 8006740:	2d00      	cmp	r5, #0
 8006742:	dd0c      	ble.n	800675e <_dtoa_r+0x72e>
 8006744:	f1b8 0f00 	cmp.w	r8, #0
 8006748:	dd09      	ble.n	800675e <_dtoa_r+0x72e>
 800674a:	4545      	cmp	r5, r8
 800674c:	9a05      	ldr	r2, [sp, #20]
 800674e:	462b      	mov	r3, r5
 8006750:	bfa8      	it	ge
 8006752:	4643      	movge	r3, r8
 8006754:	1ad2      	subs	r2, r2, r3
 8006756:	9205      	str	r2, [sp, #20]
 8006758:	1aed      	subs	r5, r5, r3
 800675a:	eba8 0803 	sub.w	r8, r8, r3
 800675e:	9b07      	ldr	r3, [sp, #28]
 8006760:	b1eb      	cbz	r3, 800679e <_dtoa_r+0x76e>
 8006762:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006764:	2b00      	cmp	r3, #0
 8006766:	d067      	beq.n	8006838 <_dtoa_r+0x808>
 8006768:	b18f      	cbz	r7, 800678e <_dtoa_r+0x75e>
 800676a:	4631      	mov	r1, r6
 800676c:	463a      	mov	r2, r7
 800676e:	4620      	mov	r0, r4
 8006770:	f001 f8fa 	bl	8007968 <__pow5mult>
 8006774:	9a04      	ldr	r2, [sp, #16]
 8006776:	4601      	mov	r1, r0
 8006778:	4606      	mov	r6, r0
 800677a:	4620      	mov	r0, r4
 800677c:	f001 f85d 	bl	800783a <__multiply>
 8006780:	9904      	ldr	r1, [sp, #16]
 8006782:	9008      	str	r0, [sp, #32]
 8006784:	4620      	mov	r0, r4
 8006786:	f000 ff71 	bl	800766c <_Bfree>
 800678a:	9b08      	ldr	r3, [sp, #32]
 800678c:	9304      	str	r3, [sp, #16]
 800678e:	9b07      	ldr	r3, [sp, #28]
 8006790:	1bda      	subs	r2, r3, r7
 8006792:	d004      	beq.n	800679e <_dtoa_r+0x76e>
 8006794:	9904      	ldr	r1, [sp, #16]
 8006796:	4620      	mov	r0, r4
 8006798:	f001 f8e6 	bl	8007968 <__pow5mult>
 800679c:	9004      	str	r0, [sp, #16]
 800679e:	2101      	movs	r1, #1
 80067a0:	4620      	mov	r0, r4
 80067a2:	f001 f841 	bl	8007828 <__i2b>
 80067a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80067a8:	4607      	mov	r7, r0
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	f000 81d0 	beq.w	8006b50 <_dtoa_r+0xb20>
 80067b0:	461a      	mov	r2, r3
 80067b2:	4601      	mov	r1, r0
 80067b4:	4620      	mov	r0, r4
 80067b6:	f001 f8d7 	bl	8007968 <__pow5mult>
 80067ba:	9b06      	ldr	r3, [sp, #24]
 80067bc:	2b01      	cmp	r3, #1
 80067be:	4607      	mov	r7, r0
 80067c0:	dc40      	bgt.n	8006844 <_dtoa_r+0x814>
 80067c2:	9b00      	ldr	r3, [sp, #0]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d139      	bne.n	800683c <_dtoa_r+0x80c>
 80067c8:	9b01      	ldr	r3, [sp, #4]
 80067ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d136      	bne.n	8006840 <_dtoa_r+0x810>
 80067d2:	9b01      	ldr	r3, [sp, #4]
 80067d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80067d8:	0d1b      	lsrs	r3, r3, #20
 80067da:	051b      	lsls	r3, r3, #20
 80067dc:	b12b      	cbz	r3, 80067ea <_dtoa_r+0x7ba>
 80067de:	9b05      	ldr	r3, [sp, #20]
 80067e0:	3301      	adds	r3, #1
 80067e2:	9305      	str	r3, [sp, #20]
 80067e4:	f108 0801 	add.w	r8, r8, #1
 80067e8:	2301      	movs	r3, #1
 80067ea:	9307      	str	r3, [sp, #28]
 80067ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d12a      	bne.n	8006848 <_dtoa_r+0x818>
 80067f2:	2001      	movs	r0, #1
 80067f4:	e030      	b.n	8006858 <_dtoa_r+0x828>
 80067f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80067f8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80067fc:	e795      	b.n	800672a <_dtoa_r+0x6fa>
 80067fe:	9b07      	ldr	r3, [sp, #28]
 8006800:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 8006804:	42bb      	cmp	r3, r7
 8006806:	bfbf      	itttt	lt
 8006808:	9b07      	ldrlt	r3, [sp, #28]
 800680a:	9707      	strlt	r7, [sp, #28]
 800680c:	1afa      	sublt	r2, r7, r3
 800680e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006810:	bfbb      	ittet	lt
 8006812:	189b      	addlt	r3, r3, r2
 8006814:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006816:	1bdf      	subge	r7, r3, r7
 8006818:	2700      	movlt	r7, #0
 800681a:	f1b9 0f00 	cmp.w	r9, #0
 800681e:	bfb5      	itete	lt
 8006820:	9b05      	ldrlt	r3, [sp, #20]
 8006822:	9d05      	ldrge	r5, [sp, #20]
 8006824:	eba3 0509 	sublt.w	r5, r3, r9
 8006828:	464b      	movge	r3, r9
 800682a:	bfb8      	it	lt
 800682c:	2300      	movlt	r3, #0
 800682e:	e77e      	b.n	800672e <_dtoa_r+0x6fe>
 8006830:	9f07      	ldr	r7, [sp, #28]
 8006832:	9d05      	ldr	r5, [sp, #20]
 8006834:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8006836:	e783      	b.n	8006740 <_dtoa_r+0x710>
 8006838:	9a07      	ldr	r2, [sp, #28]
 800683a:	e7ab      	b.n	8006794 <_dtoa_r+0x764>
 800683c:	2300      	movs	r3, #0
 800683e:	e7d4      	b.n	80067ea <_dtoa_r+0x7ba>
 8006840:	9b00      	ldr	r3, [sp, #0]
 8006842:	e7d2      	b.n	80067ea <_dtoa_r+0x7ba>
 8006844:	2300      	movs	r3, #0
 8006846:	9307      	str	r3, [sp, #28]
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800684e:	6918      	ldr	r0, [r3, #16]
 8006850:	f000 ff9c 	bl	800778c <__hi0bits>
 8006854:	f1c0 0020 	rsb	r0, r0, #32
 8006858:	4440      	add	r0, r8
 800685a:	f010 001f 	ands.w	r0, r0, #31
 800685e:	d047      	beq.n	80068f0 <_dtoa_r+0x8c0>
 8006860:	f1c0 0320 	rsb	r3, r0, #32
 8006864:	2b04      	cmp	r3, #4
 8006866:	dd3b      	ble.n	80068e0 <_dtoa_r+0x8b0>
 8006868:	9b05      	ldr	r3, [sp, #20]
 800686a:	f1c0 001c 	rsb	r0, r0, #28
 800686e:	4403      	add	r3, r0
 8006870:	9305      	str	r3, [sp, #20]
 8006872:	4405      	add	r5, r0
 8006874:	4480      	add	r8, r0
 8006876:	9b05      	ldr	r3, [sp, #20]
 8006878:	2b00      	cmp	r3, #0
 800687a:	dd05      	ble.n	8006888 <_dtoa_r+0x858>
 800687c:	461a      	mov	r2, r3
 800687e:	9904      	ldr	r1, [sp, #16]
 8006880:	4620      	mov	r0, r4
 8006882:	f001 f8bf 	bl	8007a04 <__lshift>
 8006886:	9004      	str	r0, [sp, #16]
 8006888:	f1b8 0f00 	cmp.w	r8, #0
 800688c:	dd05      	ble.n	800689a <_dtoa_r+0x86a>
 800688e:	4639      	mov	r1, r7
 8006890:	4642      	mov	r2, r8
 8006892:	4620      	mov	r0, r4
 8006894:	f001 f8b6 	bl	8007a04 <__lshift>
 8006898:	4607      	mov	r7, r0
 800689a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800689c:	b353      	cbz	r3, 80068f4 <_dtoa_r+0x8c4>
 800689e:	4639      	mov	r1, r7
 80068a0:	9804      	ldr	r0, [sp, #16]
 80068a2:	f001 f903 	bl	8007aac <__mcmp>
 80068a6:	2800      	cmp	r0, #0
 80068a8:	da24      	bge.n	80068f4 <_dtoa_r+0x8c4>
 80068aa:	2300      	movs	r3, #0
 80068ac:	220a      	movs	r2, #10
 80068ae:	9904      	ldr	r1, [sp, #16]
 80068b0:	4620      	mov	r0, r4
 80068b2:	f000 fef2 	bl	800769a <__multadd>
 80068b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068b8:	9004      	str	r0, [sp, #16]
 80068ba:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80068be:	2b00      	cmp	r3, #0
 80068c0:	f000 814d 	beq.w	8006b5e <_dtoa_r+0xb2e>
 80068c4:	2300      	movs	r3, #0
 80068c6:	4631      	mov	r1, r6
 80068c8:	220a      	movs	r2, #10
 80068ca:	4620      	mov	r0, r4
 80068cc:	f000 fee5 	bl	800769a <__multadd>
 80068d0:	9b02      	ldr	r3, [sp, #8]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	4606      	mov	r6, r0
 80068d6:	dc4f      	bgt.n	8006978 <_dtoa_r+0x948>
 80068d8:	9b06      	ldr	r3, [sp, #24]
 80068da:	2b02      	cmp	r3, #2
 80068dc:	dd4c      	ble.n	8006978 <_dtoa_r+0x948>
 80068de:	e011      	b.n	8006904 <_dtoa_r+0x8d4>
 80068e0:	d0c9      	beq.n	8006876 <_dtoa_r+0x846>
 80068e2:	9a05      	ldr	r2, [sp, #20]
 80068e4:	331c      	adds	r3, #28
 80068e6:	441a      	add	r2, r3
 80068e8:	9205      	str	r2, [sp, #20]
 80068ea:	441d      	add	r5, r3
 80068ec:	4498      	add	r8, r3
 80068ee:	e7c2      	b.n	8006876 <_dtoa_r+0x846>
 80068f0:	4603      	mov	r3, r0
 80068f2:	e7f6      	b.n	80068e2 <_dtoa_r+0x8b2>
 80068f4:	f1b9 0f00 	cmp.w	r9, #0
 80068f8:	dc38      	bgt.n	800696c <_dtoa_r+0x93c>
 80068fa:	9b06      	ldr	r3, [sp, #24]
 80068fc:	2b02      	cmp	r3, #2
 80068fe:	dd35      	ble.n	800696c <_dtoa_r+0x93c>
 8006900:	f8cd 9008 	str.w	r9, [sp, #8]
 8006904:	9b02      	ldr	r3, [sp, #8]
 8006906:	b963      	cbnz	r3, 8006922 <_dtoa_r+0x8f2>
 8006908:	4639      	mov	r1, r7
 800690a:	2205      	movs	r2, #5
 800690c:	4620      	mov	r0, r4
 800690e:	f000 fec4 	bl	800769a <__multadd>
 8006912:	4601      	mov	r1, r0
 8006914:	4607      	mov	r7, r0
 8006916:	9804      	ldr	r0, [sp, #16]
 8006918:	f001 f8c8 	bl	8007aac <__mcmp>
 800691c:	2800      	cmp	r0, #0
 800691e:	f73f adcc 	bgt.w	80064ba <_dtoa_r+0x48a>
 8006922:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006924:	465d      	mov	r5, fp
 8006926:	ea6f 0a03 	mvn.w	sl, r3
 800692a:	f04f 0900 	mov.w	r9, #0
 800692e:	4639      	mov	r1, r7
 8006930:	4620      	mov	r0, r4
 8006932:	f000 fe9b 	bl	800766c <_Bfree>
 8006936:	2e00      	cmp	r6, #0
 8006938:	f43f aeb7 	beq.w	80066aa <_dtoa_r+0x67a>
 800693c:	f1b9 0f00 	cmp.w	r9, #0
 8006940:	d005      	beq.n	800694e <_dtoa_r+0x91e>
 8006942:	45b1      	cmp	r9, r6
 8006944:	d003      	beq.n	800694e <_dtoa_r+0x91e>
 8006946:	4649      	mov	r1, r9
 8006948:	4620      	mov	r0, r4
 800694a:	f000 fe8f 	bl	800766c <_Bfree>
 800694e:	4631      	mov	r1, r6
 8006950:	4620      	mov	r0, r4
 8006952:	f000 fe8b 	bl	800766c <_Bfree>
 8006956:	e6a8      	b.n	80066aa <_dtoa_r+0x67a>
 8006958:	2700      	movs	r7, #0
 800695a:	463e      	mov	r6, r7
 800695c:	e7e1      	b.n	8006922 <_dtoa_r+0x8f2>
 800695e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8006962:	463e      	mov	r6, r7
 8006964:	e5a9      	b.n	80064ba <_dtoa_r+0x48a>
 8006966:	bf00      	nop
 8006968:	40240000 	.word	0x40240000
 800696c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800696e:	f8cd 9008 	str.w	r9, [sp, #8]
 8006972:	2b00      	cmp	r3, #0
 8006974:	f000 80fa 	beq.w	8006b6c <_dtoa_r+0xb3c>
 8006978:	2d00      	cmp	r5, #0
 800697a:	dd05      	ble.n	8006988 <_dtoa_r+0x958>
 800697c:	4631      	mov	r1, r6
 800697e:	462a      	mov	r2, r5
 8006980:	4620      	mov	r0, r4
 8006982:	f001 f83f 	bl	8007a04 <__lshift>
 8006986:	4606      	mov	r6, r0
 8006988:	9b07      	ldr	r3, [sp, #28]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d04c      	beq.n	8006a28 <_dtoa_r+0x9f8>
 800698e:	6871      	ldr	r1, [r6, #4]
 8006990:	4620      	mov	r0, r4
 8006992:	f000 fe37 	bl	8007604 <_Balloc>
 8006996:	6932      	ldr	r2, [r6, #16]
 8006998:	3202      	adds	r2, #2
 800699a:	4605      	mov	r5, r0
 800699c:	0092      	lsls	r2, r2, #2
 800699e:	f106 010c 	add.w	r1, r6, #12
 80069a2:	300c      	adds	r0, #12
 80069a4:	f7fd fc54 	bl	8004250 <memcpy>
 80069a8:	2201      	movs	r2, #1
 80069aa:	4629      	mov	r1, r5
 80069ac:	4620      	mov	r0, r4
 80069ae:	f001 f829 	bl	8007a04 <__lshift>
 80069b2:	9b00      	ldr	r3, [sp, #0]
 80069b4:	f8cd b014 	str.w	fp, [sp, #20]
 80069b8:	f003 0301 	and.w	r3, r3, #1
 80069bc:	46b1      	mov	r9, r6
 80069be:	9307      	str	r3, [sp, #28]
 80069c0:	4606      	mov	r6, r0
 80069c2:	4639      	mov	r1, r7
 80069c4:	9804      	ldr	r0, [sp, #16]
 80069c6:	f7ff faa5 	bl	8005f14 <quorem>
 80069ca:	4649      	mov	r1, r9
 80069cc:	4605      	mov	r5, r0
 80069ce:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80069d2:	9804      	ldr	r0, [sp, #16]
 80069d4:	f001 f86a 	bl	8007aac <__mcmp>
 80069d8:	4632      	mov	r2, r6
 80069da:	9000      	str	r0, [sp, #0]
 80069dc:	4639      	mov	r1, r7
 80069de:	4620      	mov	r0, r4
 80069e0:	f001 f87e 	bl	8007ae0 <__mdiff>
 80069e4:	68c3      	ldr	r3, [r0, #12]
 80069e6:	4602      	mov	r2, r0
 80069e8:	bb03      	cbnz	r3, 8006a2c <_dtoa_r+0x9fc>
 80069ea:	4601      	mov	r1, r0
 80069ec:	9008      	str	r0, [sp, #32]
 80069ee:	9804      	ldr	r0, [sp, #16]
 80069f0:	f001 f85c 	bl	8007aac <__mcmp>
 80069f4:	9a08      	ldr	r2, [sp, #32]
 80069f6:	4603      	mov	r3, r0
 80069f8:	4611      	mov	r1, r2
 80069fa:	4620      	mov	r0, r4
 80069fc:	9308      	str	r3, [sp, #32]
 80069fe:	f000 fe35 	bl	800766c <_Bfree>
 8006a02:	9b08      	ldr	r3, [sp, #32]
 8006a04:	b9a3      	cbnz	r3, 8006a30 <_dtoa_r+0xa00>
 8006a06:	9a06      	ldr	r2, [sp, #24]
 8006a08:	b992      	cbnz	r2, 8006a30 <_dtoa_r+0xa00>
 8006a0a:	9a07      	ldr	r2, [sp, #28]
 8006a0c:	b982      	cbnz	r2, 8006a30 <_dtoa_r+0xa00>
 8006a0e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006a12:	d029      	beq.n	8006a68 <_dtoa_r+0xa38>
 8006a14:	9b00      	ldr	r3, [sp, #0]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	dd01      	ble.n	8006a1e <_dtoa_r+0x9ee>
 8006a1a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8006a1e:	9b05      	ldr	r3, [sp, #20]
 8006a20:	1c5d      	adds	r5, r3, #1
 8006a22:	f883 8000 	strb.w	r8, [r3]
 8006a26:	e782      	b.n	800692e <_dtoa_r+0x8fe>
 8006a28:	4630      	mov	r0, r6
 8006a2a:	e7c2      	b.n	80069b2 <_dtoa_r+0x982>
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	e7e3      	b.n	80069f8 <_dtoa_r+0x9c8>
 8006a30:	9a00      	ldr	r2, [sp, #0]
 8006a32:	2a00      	cmp	r2, #0
 8006a34:	db04      	blt.n	8006a40 <_dtoa_r+0xa10>
 8006a36:	d125      	bne.n	8006a84 <_dtoa_r+0xa54>
 8006a38:	9a06      	ldr	r2, [sp, #24]
 8006a3a:	bb1a      	cbnz	r2, 8006a84 <_dtoa_r+0xa54>
 8006a3c:	9a07      	ldr	r2, [sp, #28]
 8006a3e:	bb0a      	cbnz	r2, 8006a84 <_dtoa_r+0xa54>
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	ddec      	ble.n	8006a1e <_dtoa_r+0x9ee>
 8006a44:	2201      	movs	r2, #1
 8006a46:	9904      	ldr	r1, [sp, #16]
 8006a48:	4620      	mov	r0, r4
 8006a4a:	f000 ffdb 	bl	8007a04 <__lshift>
 8006a4e:	4639      	mov	r1, r7
 8006a50:	9004      	str	r0, [sp, #16]
 8006a52:	f001 f82b 	bl	8007aac <__mcmp>
 8006a56:	2800      	cmp	r0, #0
 8006a58:	dc03      	bgt.n	8006a62 <_dtoa_r+0xa32>
 8006a5a:	d1e0      	bne.n	8006a1e <_dtoa_r+0x9ee>
 8006a5c:	f018 0f01 	tst.w	r8, #1
 8006a60:	d0dd      	beq.n	8006a1e <_dtoa_r+0x9ee>
 8006a62:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006a66:	d1d8      	bne.n	8006a1a <_dtoa_r+0x9ea>
 8006a68:	9b05      	ldr	r3, [sp, #20]
 8006a6a:	9a05      	ldr	r2, [sp, #20]
 8006a6c:	1c5d      	adds	r5, r3, #1
 8006a6e:	2339      	movs	r3, #57	; 0x39
 8006a70:	7013      	strb	r3, [r2, #0]
 8006a72:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006a76:	2b39      	cmp	r3, #57	; 0x39
 8006a78:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8006a7c:	d04f      	beq.n	8006b1e <_dtoa_r+0xaee>
 8006a7e:	3301      	adds	r3, #1
 8006a80:	7013      	strb	r3, [r2, #0]
 8006a82:	e754      	b.n	800692e <_dtoa_r+0x8fe>
 8006a84:	9a05      	ldr	r2, [sp, #20]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	f102 0501 	add.w	r5, r2, #1
 8006a8c:	dd06      	ble.n	8006a9c <_dtoa_r+0xa6c>
 8006a8e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006a92:	d0e9      	beq.n	8006a68 <_dtoa_r+0xa38>
 8006a94:	f108 0801 	add.w	r8, r8, #1
 8006a98:	9b05      	ldr	r3, [sp, #20]
 8006a9a:	e7c2      	b.n	8006a22 <_dtoa_r+0x9f2>
 8006a9c:	9a02      	ldr	r2, [sp, #8]
 8006a9e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8006aa2:	eba5 030b 	sub.w	r3, r5, fp
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d021      	beq.n	8006aee <_dtoa_r+0xabe>
 8006aaa:	2300      	movs	r3, #0
 8006aac:	220a      	movs	r2, #10
 8006aae:	9904      	ldr	r1, [sp, #16]
 8006ab0:	4620      	mov	r0, r4
 8006ab2:	f000 fdf2 	bl	800769a <__multadd>
 8006ab6:	45b1      	cmp	r9, r6
 8006ab8:	9004      	str	r0, [sp, #16]
 8006aba:	f04f 0300 	mov.w	r3, #0
 8006abe:	f04f 020a 	mov.w	r2, #10
 8006ac2:	4649      	mov	r1, r9
 8006ac4:	4620      	mov	r0, r4
 8006ac6:	d105      	bne.n	8006ad4 <_dtoa_r+0xaa4>
 8006ac8:	f000 fde7 	bl	800769a <__multadd>
 8006acc:	4681      	mov	r9, r0
 8006ace:	4606      	mov	r6, r0
 8006ad0:	9505      	str	r5, [sp, #20]
 8006ad2:	e776      	b.n	80069c2 <_dtoa_r+0x992>
 8006ad4:	f000 fde1 	bl	800769a <__multadd>
 8006ad8:	4631      	mov	r1, r6
 8006ada:	4681      	mov	r9, r0
 8006adc:	2300      	movs	r3, #0
 8006ade:	220a      	movs	r2, #10
 8006ae0:	4620      	mov	r0, r4
 8006ae2:	f000 fdda 	bl	800769a <__multadd>
 8006ae6:	4606      	mov	r6, r0
 8006ae8:	e7f2      	b.n	8006ad0 <_dtoa_r+0xaa0>
 8006aea:	f04f 0900 	mov.w	r9, #0
 8006aee:	2201      	movs	r2, #1
 8006af0:	9904      	ldr	r1, [sp, #16]
 8006af2:	4620      	mov	r0, r4
 8006af4:	f000 ff86 	bl	8007a04 <__lshift>
 8006af8:	4639      	mov	r1, r7
 8006afa:	9004      	str	r0, [sp, #16]
 8006afc:	f000 ffd6 	bl	8007aac <__mcmp>
 8006b00:	2800      	cmp	r0, #0
 8006b02:	dcb6      	bgt.n	8006a72 <_dtoa_r+0xa42>
 8006b04:	d102      	bne.n	8006b0c <_dtoa_r+0xadc>
 8006b06:	f018 0f01 	tst.w	r8, #1
 8006b0a:	d1b2      	bne.n	8006a72 <_dtoa_r+0xa42>
 8006b0c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006b10:	2b30      	cmp	r3, #48	; 0x30
 8006b12:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8006b16:	f47f af0a 	bne.w	800692e <_dtoa_r+0x8fe>
 8006b1a:	4615      	mov	r5, r2
 8006b1c:	e7f6      	b.n	8006b0c <_dtoa_r+0xadc>
 8006b1e:	4593      	cmp	fp, r2
 8006b20:	d105      	bne.n	8006b2e <_dtoa_r+0xafe>
 8006b22:	2331      	movs	r3, #49	; 0x31
 8006b24:	f10a 0a01 	add.w	sl, sl, #1
 8006b28:	f88b 3000 	strb.w	r3, [fp]
 8006b2c:	e6ff      	b.n	800692e <_dtoa_r+0x8fe>
 8006b2e:	4615      	mov	r5, r2
 8006b30:	e79f      	b.n	8006a72 <_dtoa_r+0xa42>
 8006b32:	f8df b064 	ldr.w	fp, [pc, #100]	; 8006b98 <_dtoa_r+0xb68>
 8006b36:	e007      	b.n	8006b48 <_dtoa_r+0xb18>
 8006b38:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b3a:	f8df b060 	ldr.w	fp, [pc, #96]	; 8006b9c <_dtoa_r+0xb6c>
 8006b3e:	b11b      	cbz	r3, 8006b48 <_dtoa_r+0xb18>
 8006b40:	f10b 0308 	add.w	r3, fp, #8
 8006b44:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006b46:	6013      	str	r3, [r2, #0]
 8006b48:	4658      	mov	r0, fp
 8006b4a:	b017      	add	sp, #92	; 0x5c
 8006b4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b50:	9b06      	ldr	r3, [sp, #24]
 8006b52:	2b01      	cmp	r3, #1
 8006b54:	f77f ae35 	ble.w	80067c2 <_dtoa_r+0x792>
 8006b58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006b5a:	9307      	str	r3, [sp, #28]
 8006b5c:	e649      	b.n	80067f2 <_dtoa_r+0x7c2>
 8006b5e:	9b02      	ldr	r3, [sp, #8]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	dc03      	bgt.n	8006b6c <_dtoa_r+0xb3c>
 8006b64:	9b06      	ldr	r3, [sp, #24]
 8006b66:	2b02      	cmp	r3, #2
 8006b68:	f73f aecc 	bgt.w	8006904 <_dtoa_r+0x8d4>
 8006b6c:	465d      	mov	r5, fp
 8006b6e:	4639      	mov	r1, r7
 8006b70:	9804      	ldr	r0, [sp, #16]
 8006b72:	f7ff f9cf 	bl	8005f14 <quorem>
 8006b76:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006b7a:	f805 8b01 	strb.w	r8, [r5], #1
 8006b7e:	9a02      	ldr	r2, [sp, #8]
 8006b80:	eba5 030b 	sub.w	r3, r5, fp
 8006b84:	429a      	cmp	r2, r3
 8006b86:	ddb0      	ble.n	8006aea <_dtoa_r+0xaba>
 8006b88:	2300      	movs	r3, #0
 8006b8a:	220a      	movs	r2, #10
 8006b8c:	9904      	ldr	r1, [sp, #16]
 8006b8e:	4620      	mov	r0, r4
 8006b90:	f000 fd83 	bl	800769a <__multadd>
 8006b94:	9004      	str	r0, [sp, #16]
 8006b96:	e7ea      	b.n	8006b6e <_dtoa_r+0xb3e>
 8006b98:	08008844 	.word	0x08008844
 8006b9c:	080088c0 	.word	0x080088c0

08006ba0 <__sflush_r>:
 8006ba0:	898a      	ldrh	r2, [r1, #12]
 8006ba2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ba6:	4605      	mov	r5, r0
 8006ba8:	0710      	lsls	r0, r2, #28
 8006baa:	460c      	mov	r4, r1
 8006bac:	d458      	bmi.n	8006c60 <__sflush_r+0xc0>
 8006bae:	684b      	ldr	r3, [r1, #4]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	dc05      	bgt.n	8006bc0 <__sflush_r+0x20>
 8006bb4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	dc02      	bgt.n	8006bc0 <__sflush_r+0x20>
 8006bba:	2000      	movs	r0, #0
 8006bbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bc0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006bc2:	2e00      	cmp	r6, #0
 8006bc4:	d0f9      	beq.n	8006bba <__sflush_r+0x1a>
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006bcc:	682f      	ldr	r7, [r5, #0]
 8006bce:	6a21      	ldr	r1, [r4, #32]
 8006bd0:	602b      	str	r3, [r5, #0]
 8006bd2:	d032      	beq.n	8006c3a <__sflush_r+0x9a>
 8006bd4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006bd6:	89a3      	ldrh	r3, [r4, #12]
 8006bd8:	075a      	lsls	r2, r3, #29
 8006bda:	d505      	bpl.n	8006be8 <__sflush_r+0x48>
 8006bdc:	6863      	ldr	r3, [r4, #4]
 8006bde:	1ac0      	subs	r0, r0, r3
 8006be0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006be2:	b10b      	cbz	r3, 8006be8 <__sflush_r+0x48>
 8006be4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006be6:	1ac0      	subs	r0, r0, r3
 8006be8:	2300      	movs	r3, #0
 8006bea:	4602      	mov	r2, r0
 8006bec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006bee:	6a21      	ldr	r1, [r4, #32]
 8006bf0:	4628      	mov	r0, r5
 8006bf2:	47b0      	blx	r6
 8006bf4:	1c43      	adds	r3, r0, #1
 8006bf6:	89a3      	ldrh	r3, [r4, #12]
 8006bf8:	d106      	bne.n	8006c08 <__sflush_r+0x68>
 8006bfa:	6829      	ldr	r1, [r5, #0]
 8006bfc:	291d      	cmp	r1, #29
 8006bfe:	d848      	bhi.n	8006c92 <__sflush_r+0xf2>
 8006c00:	4a29      	ldr	r2, [pc, #164]	; (8006ca8 <__sflush_r+0x108>)
 8006c02:	40ca      	lsrs	r2, r1
 8006c04:	07d6      	lsls	r6, r2, #31
 8006c06:	d544      	bpl.n	8006c92 <__sflush_r+0xf2>
 8006c08:	2200      	movs	r2, #0
 8006c0a:	6062      	str	r2, [r4, #4]
 8006c0c:	04d9      	lsls	r1, r3, #19
 8006c0e:	6922      	ldr	r2, [r4, #16]
 8006c10:	6022      	str	r2, [r4, #0]
 8006c12:	d504      	bpl.n	8006c1e <__sflush_r+0x7e>
 8006c14:	1c42      	adds	r2, r0, #1
 8006c16:	d101      	bne.n	8006c1c <__sflush_r+0x7c>
 8006c18:	682b      	ldr	r3, [r5, #0]
 8006c1a:	b903      	cbnz	r3, 8006c1e <__sflush_r+0x7e>
 8006c1c:	6560      	str	r0, [r4, #84]	; 0x54
 8006c1e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c20:	602f      	str	r7, [r5, #0]
 8006c22:	2900      	cmp	r1, #0
 8006c24:	d0c9      	beq.n	8006bba <__sflush_r+0x1a>
 8006c26:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c2a:	4299      	cmp	r1, r3
 8006c2c:	d002      	beq.n	8006c34 <__sflush_r+0x94>
 8006c2e:	4628      	mov	r0, r5
 8006c30:	f001 f8f6 	bl	8007e20 <_free_r>
 8006c34:	2000      	movs	r0, #0
 8006c36:	6360      	str	r0, [r4, #52]	; 0x34
 8006c38:	e7c0      	b.n	8006bbc <__sflush_r+0x1c>
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	4628      	mov	r0, r5
 8006c3e:	47b0      	blx	r6
 8006c40:	1c41      	adds	r1, r0, #1
 8006c42:	d1c8      	bne.n	8006bd6 <__sflush_r+0x36>
 8006c44:	682b      	ldr	r3, [r5, #0]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d0c5      	beq.n	8006bd6 <__sflush_r+0x36>
 8006c4a:	2b1d      	cmp	r3, #29
 8006c4c:	d001      	beq.n	8006c52 <__sflush_r+0xb2>
 8006c4e:	2b16      	cmp	r3, #22
 8006c50:	d101      	bne.n	8006c56 <__sflush_r+0xb6>
 8006c52:	602f      	str	r7, [r5, #0]
 8006c54:	e7b1      	b.n	8006bba <__sflush_r+0x1a>
 8006c56:	89a3      	ldrh	r3, [r4, #12]
 8006c58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c5c:	81a3      	strh	r3, [r4, #12]
 8006c5e:	e7ad      	b.n	8006bbc <__sflush_r+0x1c>
 8006c60:	690f      	ldr	r7, [r1, #16]
 8006c62:	2f00      	cmp	r7, #0
 8006c64:	d0a9      	beq.n	8006bba <__sflush_r+0x1a>
 8006c66:	0793      	lsls	r3, r2, #30
 8006c68:	680e      	ldr	r6, [r1, #0]
 8006c6a:	bf08      	it	eq
 8006c6c:	694b      	ldreq	r3, [r1, #20]
 8006c6e:	600f      	str	r7, [r1, #0]
 8006c70:	bf18      	it	ne
 8006c72:	2300      	movne	r3, #0
 8006c74:	eba6 0807 	sub.w	r8, r6, r7
 8006c78:	608b      	str	r3, [r1, #8]
 8006c7a:	f1b8 0f00 	cmp.w	r8, #0
 8006c7e:	dd9c      	ble.n	8006bba <__sflush_r+0x1a>
 8006c80:	4643      	mov	r3, r8
 8006c82:	463a      	mov	r2, r7
 8006c84:	6a21      	ldr	r1, [r4, #32]
 8006c86:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006c88:	4628      	mov	r0, r5
 8006c8a:	47b0      	blx	r6
 8006c8c:	2800      	cmp	r0, #0
 8006c8e:	dc06      	bgt.n	8006c9e <__sflush_r+0xfe>
 8006c90:	89a3      	ldrh	r3, [r4, #12]
 8006c92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c96:	81a3      	strh	r3, [r4, #12]
 8006c98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c9c:	e78e      	b.n	8006bbc <__sflush_r+0x1c>
 8006c9e:	4407      	add	r7, r0
 8006ca0:	eba8 0800 	sub.w	r8, r8, r0
 8006ca4:	e7e9      	b.n	8006c7a <__sflush_r+0xda>
 8006ca6:	bf00      	nop
 8006ca8:	20400001 	.word	0x20400001

08006cac <_fflush_r>:
 8006cac:	b538      	push	{r3, r4, r5, lr}
 8006cae:	690b      	ldr	r3, [r1, #16]
 8006cb0:	4605      	mov	r5, r0
 8006cb2:	460c      	mov	r4, r1
 8006cb4:	b1db      	cbz	r3, 8006cee <_fflush_r+0x42>
 8006cb6:	b118      	cbz	r0, 8006cc0 <_fflush_r+0x14>
 8006cb8:	6983      	ldr	r3, [r0, #24]
 8006cba:	b90b      	cbnz	r3, 8006cc0 <_fflush_r+0x14>
 8006cbc:	f000 f860 	bl	8006d80 <__sinit>
 8006cc0:	4b0c      	ldr	r3, [pc, #48]	; (8006cf4 <_fflush_r+0x48>)
 8006cc2:	429c      	cmp	r4, r3
 8006cc4:	d109      	bne.n	8006cda <_fflush_r+0x2e>
 8006cc6:	686c      	ldr	r4, [r5, #4]
 8006cc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ccc:	b17b      	cbz	r3, 8006cee <_fflush_r+0x42>
 8006cce:	4621      	mov	r1, r4
 8006cd0:	4628      	mov	r0, r5
 8006cd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006cd6:	f7ff bf63 	b.w	8006ba0 <__sflush_r>
 8006cda:	4b07      	ldr	r3, [pc, #28]	; (8006cf8 <_fflush_r+0x4c>)
 8006cdc:	429c      	cmp	r4, r3
 8006cde:	d101      	bne.n	8006ce4 <_fflush_r+0x38>
 8006ce0:	68ac      	ldr	r4, [r5, #8]
 8006ce2:	e7f1      	b.n	8006cc8 <_fflush_r+0x1c>
 8006ce4:	4b05      	ldr	r3, [pc, #20]	; (8006cfc <_fflush_r+0x50>)
 8006ce6:	429c      	cmp	r4, r3
 8006ce8:	bf08      	it	eq
 8006cea:	68ec      	ldreq	r4, [r5, #12]
 8006cec:	e7ec      	b.n	8006cc8 <_fflush_r+0x1c>
 8006cee:	2000      	movs	r0, #0
 8006cf0:	bd38      	pop	{r3, r4, r5, pc}
 8006cf2:	bf00      	nop
 8006cf4:	080088f0 	.word	0x080088f0
 8006cf8:	08008910 	.word	0x08008910
 8006cfc:	080088d0 	.word	0x080088d0

08006d00 <std>:
 8006d00:	2300      	movs	r3, #0
 8006d02:	b510      	push	{r4, lr}
 8006d04:	4604      	mov	r4, r0
 8006d06:	e9c0 3300 	strd	r3, r3, [r0]
 8006d0a:	6083      	str	r3, [r0, #8]
 8006d0c:	8181      	strh	r1, [r0, #12]
 8006d0e:	6643      	str	r3, [r0, #100]	; 0x64
 8006d10:	81c2      	strh	r2, [r0, #14]
 8006d12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006d16:	6183      	str	r3, [r0, #24]
 8006d18:	4619      	mov	r1, r3
 8006d1a:	2208      	movs	r2, #8
 8006d1c:	305c      	adds	r0, #92	; 0x5c
 8006d1e:	f7fd faa2 	bl	8004266 <memset>
 8006d22:	4b05      	ldr	r3, [pc, #20]	; (8006d38 <std+0x38>)
 8006d24:	6263      	str	r3, [r4, #36]	; 0x24
 8006d26:	4b05      	ldr	r3, [pc, #20]	; (8006d3c <std+0x3c>)
 8006d28:	62a3      	str	r3, [r4, #40]	; 0x28
 8006d2a:	4b05      	ldr	r3, [pc, #20]	; (8006d40 <std+0x40>)
 8006d2c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006d2e:	4b05      	ldr	r3, [pc, #20]	; (8006d44 <std+0x44>)
 8006d30:	6224      	str	r4, [r4, #32]
 8006d32:	6323      	str	r3, [r4, #48]	; 0x30
 8006d34:	bd10      	pop	{r4, pc}
 8006d36:	bf00      	nop
 8006d38:	080084b5 	.word	0x080084b5
 8006d3c:	080084d7 	.word	0x080084d7
 8006d40:	0800850f 	.word	0x0800850f
 8006d44:	08008533 	.word	0x08008533

08006d48 <_cleanup_r>:
 8006d48:	4901      	ldr	r1, [pc, #4]	; (8006d50 <_cleanup_r+0x8>)
 8006d4a:	f000 b885 	b.w	8006e58 <_fwalk_reent>
 8006d4e:	bf00      	nop
 8006d50:	08006cad 	.word	0x08006cad

08006d54 <__sfmoreglue>:
 8006d54:	b570      	push	{r4, r5, r6, lr}
 8006d56:	1e4a      	subs	r2, r1, #1
 8006d58:	2568      	movs	r5, #104	; 0x68
 8006d5a:	4355      	muls	r5, r2
 8006d5c:	460e      	mov	r6, r1
 8006d5e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006d62:	f001 f8ab 	bl	8007ebc <_malloc_r>
 8006d66:	4604      	mov	r4, r0
 8006d68:	b140      	cbz	r0, 8006d7c <__sfmoreglue+0x28>
 8006d6a:	2100      	movs	r1, #0
 8006d6c:	e9c0 1600 	strd	r1, r6, [r0]
 8006d70:	300c      	adds	r0, #12
 8006d72:	60a0      	str	r0, [r4, #8]
 8006d74:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006d78:	f7fd fa75 	bl	8004266 <memset>
 8006d7c:	4620      	mov	r0, r4
 8006d7e:	bd70      	pop	{r4, r5, r6, pc}

08006d80 <__sinit>:
 8006d80:	6983      	ldr	r3, [r0, #24]
 8006d82:	b510      	push	{r4, lr}
 8006d84:	4604      	mov	r4, r0
 8006d86:	bb33      	cbnz	r3, 8006dd6 <__sinit+0x56>
 8006d88:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8006d8c:	6503      	str	r3, [r0, #80]	; 0x50
 8006d8e:	4b12      	ldr	r3, [pc, #72]	; (8006dd8 <__sinit+0x58>)
 8006d90:	4a12      	ldr	r2, [pc, #72]	; (8006ddc <__sinit+0x5c>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	6282      	str	r2, [r0, #40]	; 0x28
 8006d96:	4298      	cmp	r0, r3
 8006d98:	bf04      	itt	eq
 8006d9a:	2301      	moveq	r3, #1
 8006d9c:	6183      	streq	r3, [r0, #24]
 8006d9e:	f000 f81f 	bl	8006de0 <__sfp>
 8006da2:	6060      	str	r0, [r4, #4]
 8006da4:	4620      	mov	r0, r4
 8006da6:	f000 f81b 	bl	8006de0 <__sfp>
 8006daa:	60a0      	str	r0, [r4, #8]
 8006dac:	4620      	mov	r0, r4
 8006dae:	f000 f817 	bl	8006de0 <__sfp>
 8006db2:	2200      	movs	r2, #0
 8006db4:	60e0      	str	r0, [r4, #12]
 8006db6:	2104      	movs	r1, #4
 8006db8:	6860      	ldr	r0, [r4, #4]
 8006dba:	f7ff ffa1 	bl	8006d00 <std>
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	2109      	movs	r1, #9
 8006dc2:	68a0      	ldr	r0, [r4, #8]
 8006dc4:	f7ff ff9c 	bl	8006d00 <std>
 8006dc8:	2202      	movs	r2, #2
 8006dca:	2112      	movs	r1, #18
 8006dcc:	68e0      	ldr	r0, [r4, #12]
 8006dce:	f7ff ff97 	bl	8006d00 <std>
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	61a3      	str	r3, [r4, #24]
 8006dd6:	bd10      	pop	{r4, pc}
 8006dd8:	08008830 	.word	0x08008830
 8006ddc:	08006d49 	.word	0x08006d49

08006de0 <__sfp>:
 8006de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006de2:	4b1b      	ldr	r3, [pc, #108]	; (8006e50 <__sfp+0x70>)
 8006de4:	681e      	ldr	r6, [r3, #0]
 8006de6:	69b3      	ldr	r3, [r6, #24]
 8006de8:	4607      	mov	r7, r0
 8006dea:	b913      	cbnz	r3, 8006df2 <__sfp+0x12>
 8006dec:	4630      	mov	r0, r6
 8006dee:	f7ff ffc7 	bl	8006d80 <__sinit>
 8006df2:	3648      	adds	r6, #72	; 0x48
 8006df4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006df8:	3b01      	subs	r3, #1
 8006dfa:	d503      	bpl.n	8006e04 <__sfp+0x24>
 8006dfc:	6833      	ldr	r3, [r6, #0]
 8006dfe:	b133      	cbz	r3, 8006e0e <__sfp+0x2e>
 8006e00:	6836      	ldr	r6, [r6, #0]
 8006e02:	e7f7      	b.n	8006df4 <__sfp+0x14>
 8006e04:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006e08:	b16d      	cbz	r5, 8006e26 <__sfp+0x46>
 8006e0a:	3468      	adds	r4, #104	; 0x68
 8006e0c:	e7f4      	b.n	8006df8 <__sfp+0x18>
 8006e0e:	2104      	movs	r1, #4
 8006e10:	4638      	mov	r0, r7
 8006e12:	f7ff ff9f 	bl	8006d54 <__sfmoreglue>
 8006e16:	6030      	str	r0, [r6, #0]
 8006e18:	2800      	cmp	r0, #0
 8006e1a:	d1f1      	bne.n	8006e00 <__sfp+0x20>
 8006e1c:	230c      	movs	r3, #12
 8006e1e:	603b      	str	r3, [r7, #0]
 8006e20:	4604      	mov	r4, r0
 8006e22:	4620      	mov	r0, r4
 8006e24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e26:	4b0b      	ldr	r3, [pc, #44]	; (8006e54 <__sfp+0x74>)
 8006e28:	6665      	str	r5, [r4, #100]	; 0x64
 8006e2a:	e9c4 5500 	strd	r5, r5, [r4]
 8006e2e:	60a5      	str	r5, [r4, #8]
 8006e30:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8006e34:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8006e38:	2208      	movs	r2, #8
 8006e3a:	4629      	mov	r1, r5
 8006e3c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006e40:	f7fd fa11 	bl	8004266 <memset>
 8006e44:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006e48:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006e4c:	e7e9      	b.n	8006e22 <__sfp+0x42>
 8006e4e:	bf00      	nop
 8006e50:	08008830 	.word	0x08008830
 8006e54:	ffff0001 	.word	0xffff0001

08006e58 <_fwalk_reent>:
 8006e58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e5c:	4680      	mov	r8, r0
 8006e5e:	4689      	mov	r9, r1
 8006e60:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006e64:	2600      	movs	r6, #0
 8006e66:	b914      	cbnz	r4, 8006e6e <_fwalk_reent+0x16>
 8006e68:	4630      	mov	r0, r6
 8006e6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e6e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8006e72:	3f01      	subs	r7, #1
 8006e74:	d501      	bpl.n	8006e7a <_fwalk_reent+0x22>
 8006e76:	6824      	ldr	r4, [r4, #0]
 8006e78:	e7f5      	b.n	8006e66 <_fwalk_reent+0xe>
 8006e7a:	89ab      	ldrh	r3, [r5, #12]
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	d907      	bls.n	8006e90 <_fwalk_reent+0x38>
 8006e80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e84:	3301      	adds	r3, #1
 8006e86:	d003      	beq.n	8006e90 <_fwalk_reent+0x38>
 8006e88:	4629      	mov	r1, r5
 8006e8a:	4640      	mov	r0, r8
 8006e8c:	47c8      	blx	r9
 8006e8e:	4306      	orrs	r6, r0
 8006e90:	3568      	adds	r5, #104	; 0x68
 8006e92:	e7ee      	b.n	8006e72 <_fwalk_reent+0x1a>

08006e94 <rshift>:
 8006e94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e96:	6906      	ldr	r6, [r0, #16]
 8006e98:	114b      	asrs	r3, r1, #5
 8006e9a:	429e      	cmp	r6, r3
 8006e9c:	f100 0414 	add.w	r4, r0, #20
 8006ea0:	dd30      	ble.n	8006f04 <rshift+0x70>
 8006ea2:	f011 011f 	ands.w	r1, r1, #31
 8006ea6:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8006eaa:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8006eae:	d108      	bne.n	8006ec2 <rshift+0x2e>
 8006eb0:	4621      	mov	r1, r4
 8006eb2:	42b2      	cmp	r2, r6
 8006eb4:	460b      	mov	r3, r1
 8006eb6:	d211      	bcs.n	8006edc <rshift+0x48>
 8006eb8:	f852 3b04 	ldr.w	r3, [r2], #4
 8006ebc:	f841 3b04 	str.w	r3, [r1], #4
 8006ec0:	e7f7      	b.n	8006eb2 <rshift+0x1e>
 8006ec2:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8006ec6:	f1c1 0c20 	rsb	ip, r1, #32
 8006eca:	40cd      	lsrs	r5, r1
 8006ecc:	3204      	adds	r2, #4
 8006ece:	4623      	mov	r3, r4
 8006ed0:	42b2      	cmp	r2, r6
 8006ed2:	4617      	mov	r7, r2
 8006ed4:	d30c      	bcc.n	8006ef0 <rshift+0x5c>
 8006ed6:	601d      	str	r5, [r3, #0]
 8006ed8:	b105      	cbz	r5, 8006edc <rshift+0x48>
 8006eda:	3304      	adds	r3, #4
 8006edc:	1b1a      	subs	r2, r3, r4
 8006ede:	42a3      	cmp	r3, r4
 8006ee0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006ee4:	bf08      	it	eq
 8006ee6:	2300      	moveq	r3, #0
 8006ee8:	6102      	str	r2, [r0, #16]
 8006eea:	bf08      	it	eq
 8006eec:	6143      	streq	r3, [r0, #20]
 8006eee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ef0:	683f      	ldr	r7, [r7, #0]
 8006ef2:	fa07 f70c 	lsl.w	r7, r7, ip
 8006ef6:	433d      	orrs	r5, r7
 8006ef8:	f843 5b04 	str.w	r5, [r3], #4
 8006efc:	f852 5b04 	ldr.w	r5, [r2], #4
 8006f00:	40cd      	lsrs	r5, r1
 8006f02:	e7e5      	b.n	8006ed0 <rshift+0x3c>
 8006f04:	4623      	mov	r3, r4
 8006f06:	e7e9      	b.n	8006edc <rshift+0x48>

08006f08 <__hexdig_fun>:
 8006f08:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006f0c:	2b09      	cmp	r3, #9
 8006f0e:	d802      	bhi.n	8006f16 <__hexdig_fun+0xe>
 8006f10:	3820      	subs	r0, #32
 8006f12:	b2c0      	uxtb	r0, r0
 8006f14:	4770      	bx	lr
 8006f16:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006f1a:	2b05      	cmp	r3, #5
 8006f1c:	d801      	bhi.n	8006f22 <__hexdig_fun+0x1a>
 8006f1e:	3847      	subs	r0, #71	; 0x47
 8006f20:	e7f7      	b.n	8006f12 <__hexdig_fun+0xa>
 8006f22:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006f26:	2b05      	cmp	r3, #5
 8006f28:	d801      	bhi.n	8006f2e <__hexdig_fun+0x26>
 8006f2a:	3827      	subs	r0, #39	; 0x27
 8006f2c:	e7f1      	b.n	8006f12 <__hexdig_fun+0xa>
 8006f2e:	2000      	movs	r0, #0
 8006f30:	4770      	bx	lr

08006f32 <__gethex>:
 8006f32:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f36:	b08b      	sub	sp, #44	; 0x2c
 8006f38:	468a      	mov	sl, r1
 8006f3a:	9002      	str	r0, [sp, #8]
 8006f3c:	9816      	ldr	r0, [sp, #88]	; 0x58
 8006f3e:	9306      	str	r3, [sp, #24]
 8006f40:	4690      	mov	r8, r2
 8006f42:	f000 fad0 	bl	80074e6 <__localeconv_l>
 8006f46:	6803      	ldr	r3, [r0, #0]
 8006f48:	9303      	str	r3, [sp, #12]
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f7f9 f940 	bl	80001d0 <strlen>
 8006f50:	9b03      	ldr	r3, [sp, #12]
 8006f52:	9001      	str	r0, [sp, #4]
 8006f54:	4403      	add	r3, r0
 8006f56:	f04f 0b00 	mov.w	fp, #0
 8006f5a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006f5e:	9307      	str	r3, [sp, #28]
 8006f60:	f8da 3000 	ldr.w	r3, [sl]
 8006f64:	3302      	adds	r3, #2
 8006f66:	461f      	mov	r7, r3
 8006f68:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006f6c:	2830      	cmp	r0, #48	; 0x30
 8006f6e:	d06c      	beq.n	800704a <__gethex+0x118>
 8006f70:	f7ff ffca 	bl	8006f08 <__hexdig_fun>
 8006f74:	4604      	mov	r4, r0
 8006f76:	2800      	cmp	r0, #0
 8006f78:	d16a      	bne.n	8007050 <__gethex+0x11e>
 8006f7a:	9a01      	ldr	r2, [sp, #4]
 8006f7c:	9903      	ldr	r1, [sp, #12]
 8006f7e:	4638      	mov	r0, r7
 8006f80:	f001 fadb 	bl	800853a <strncmp>
 8006f84:	2800      	cmp	r0, #0
 8006f86:	d166      	bne.n	8007056 <__gethex+0x124>
 8006f88:	9b01      	ldr	r3, [sp, #4]
 8006f8a:	5cf8      	ldrb	r0, [r7, r3]
 8006f8c:	18fe      	adds	r6, r7, r3
 8006f8e:	f7ff ffbb 	bl	8006f08 <__hexdig_fun>
 8006f92:	2800      	cmp	r0, #0
 8006f94:	d062      	beq.n	800705c <__gethex+0x12a>
 8006f96:	4633      	mov	r3, r6
 8006f98:	7818      	ldrb	r0, [r3, #0]
 8006f9a:	2830      	cmp	r0, #48	; 0x30
 8006f9c:	461f      	mov	r7, r3
 8006f9e:	f103 0301 	add.w	r3, r3, #1
 8006fa2:	d0f9      	beq.n	8006f98 <__gethex+0x66>
 8006fa4:	f7ff ffb0 	bl	8006f08 <__hexdig_fun>
 8006fa8:	fab0 f580 	clz	r5, r0
 8006fac:	096d      	lsrs	r5, r5, #5
 8006fae:	4634      	mov	r4, r6
 8006fb0:	f04f 0b01 	mov.w	fp, #1
 8006fb4:	463a      	mov	r2, r7
 8006fb6:	4616      	mov	r6, r2
 8006fb8:	3201      	adds	r2, #1
 8006fba:	7830      	ldrb	r0, [r6, #0]
 8006fbc:	f7ff ffa4 	bl	8006f08 <__hexdig_fun>
 8006fc0:	2800      	cmp	r0, #0
 8006fc2:	d1f8      	bne.n	8006fb6 <__gethex+0x84>
 8006fc4:	9a01      	ldr	r2, [sp, #4]
 8006fc6:	9903      	ldr	r1, [sp, #12]
 8006fc8:	4630      	mov	r0, r6
 8006fca:	f001 fab6 	bl	800853a <strncmp>
 8006fce:	b950      	cbnz	r0, 8006fe6 <__gethex+0xb4>
 8006fd0:	b954      	cbnz	r4, 8006fe8 <__gethex+0xb6>
 8006fd2:	9b01      	ldr	r3, [sp, #4]
 8006fd4:	18f4      	adds	r4, r6, r3
 8006fd6:	4622      	mov	r2, r4
 8006fd8:	4616      	mov	r6, r2
 8006fda:	3201      	adds	r2, #1
 8006fdc:	7830      	ldrb	r0, [r6, #0]
 8006fde:	f7ff ff93 	bl	8006f08 <__hexdig_fun>
 8006fe2:	2800      	cmp	r0, #0
 8006fe4:	d1f8      	bne.n	8006fd8 <__gethex+0xa6>
 8006fe6:	b10c      	cbz	r4, 8006fec <__gethex+0xba>
 8006fe8:	1ba4      	subs	r4, r4, r6
 8006fea:	00a4      	lsls	r4, r4, #2
 8006fec:	7833      	ldrb	r3, [r6, #0]
 8006fee:	2b50      	cmp	r3, #80	; 0x50
 8006ff0:	d001      	beq.n	8006ff6 <__gethex+0xc4>
 8006ff2:	2b70      	cmp	r3, #112	; 0x70
 8006ff4:	d140      	bne.n	8007078 <__gethex+0x146>
 8006ff6:	7873      	ldrb	r3, [r6, #1]
 8006ff8:	2b2b      	cmp	r3, #43	; 0x2b
 8006ffa:	d031      	beq.n	8007060 <__gethex+0x12e>
 8006ffc:	2b2d      	cmp	r3, #45	; 0x2d
 8006ffe:	d033      	beq.n	8007068 <__gethex+0x136>
 8007000:	1c71      	adds	r1, r6, #1
 8007002:	f04f 0900 	mov.w	r9, #0
 8007006:	7808      	ldrb	r0, [r1, #0]
 8007008:	f7ff ff7e 	bl	8006f08 <__hexdig_fun>
 800700c:	1e43      	subs	r3, r0, #1
 800700e:	b2db      	uxtb	r3, r3
 8007010:	2b18      	cmp	r3, #24
 8007012:	d831      	bhi.n	8007078 <__gethex+0x146>
 8007014:	f1a0 0210 	sub.w	r2, r0, #16
 8007018:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800701c:	f7ff ff74 	bl	8006f08 <__hexdig_fun>
 8007020:	1e43      	subs	r3, r0, #1
 8007022:	b2db      	uxtb	r3, r3
 8007024:	2b18      	cmp	r3, #24
 8007026:	d922      	bls.n	800706e <__gethex+0x13c>
 8007028:	f1b9 0f00 	cmp.w	r9, #0
 800702c:	d000      	beq.n	8007030 <__gethex+0xfe>
 800702e:	4252      	negs	r2, r2
 8007030:	4414      	add	r4, r2
 8007032:	f8ca 1000 	str.w	r1, [sl]
 8007036:	b30d      	cbz	r5, 800707c <__gethex+0x14a>
 8007038:	f1bb 0f00 	cmp.w	fp, #0
 800703c:	bf0c      	ite	eq
 800703e:	2706      	moveq	r7, #6
 8007040:	2700      	movne	r7, #0
 8007042:	4638      	mov	r0, r7
 8007044:	b00b      	add	sp, #44	; 0x2c
 8007046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800704a:	f10b 0b01 	add.w	fp, fp, #1
 800704e:	e78a      	b.n	8006f66 <__gethex+0x34>
 8007050:	2500      	movs	r5, #0
 8007052:	462c      	mov	r4, r5
 8007054:	e7ae      	b.n	8006fb4 <__gethex+0x82>
 8007056:	463e      	mov	r6, r7
 8007058:	2501      	movs	r5, #1
 800705a:	e7c7      	b.n	8006fec <__gethex+0xba>
 800705c:	4604      	mov	r4, r0
 800705e:	e7fb      	b.n	8007058 <__gethex+0x126>
 8007060:	f04f 0900 	mov.w	r9, #0
 8007064:	1cb1      	adds	r1, r6, #2
 8007066:	e7ce      	b.n	8007006 <__gethex+0xd4>
 8007068:	f04f 0901 	mov.w	r9, #1
 800706c:	e7fa      	b.n	8007064 <__gethex+0x132>
 800706e:	230a      	movs	r3, #10
 8007070:	fb03 0202 	mla	r2, r3, r2, r0
 8007074:	3a10      	subs	r2, #16
 8007076:	e7cf      	b.n	8007018 <__gethex+0xe6>
 8007078:	4631      	mov	r1, r6
 800707a:	e7da      	b.n	8007032 <__gethex+0x100>
 800707c:	1bf3      	subs	r3, r6, r7
 800707e:	3b01      	subs	r3, #1
 8007080:	4629      	mov	r1, r5
 8007082:	2b07      	cmp	r3, #7
 8007084:	dc49      	bgt.n	800711a <__gethex+0x1e8>
 8007086:	9802      	ldr	r0, [sp, #8]
 8007088:	f000 fabc 	bl	8007604 <_Balloc>
 800708c:	9b01      	ldr	r3, [sp, #4]
 800708e:	f100 0914 	add.w	r9, r0, #20
 8007092:	f04f 0b00 	mov.w	fp, #0
 8007096:	f1c3 0301 	rsb	r3, r3, #1
 800709a:	4605      	mov	r5, r0
 800709c:	f8cd 9010 	str.w	r9, [sp, #16]
 80070a0:	46da      	mov	sl, fp
 80070a2:	9308      	str	r3, [sp, #32]
 80070a4:	42b7      	cmp	r7, r6
 80070a6:	d33b      	bcc.n	8007120 <__gethex+0x1ee>
 80070a8:	9804      	ldr	r0, [sp, #16]
 80070aa:	f840 ab04 	str.w	sl, [r0], #4
 80070ae:	eba0 0009 	sub.w	r0, r0, r9
 80070b2:	1080      	asrs	r0, r0, #2
 80070b4:	6128      	str	r0, [r5, #16]
 80070b6:	0147      	lsls	r7, r0, #5
 80070b8:	4650      	mov	r0, sl
 80070ba:	f000 fb67 	bl	800778c <__hi0bits>
 80070be:	f8d8 6000 	ldr.w	r6, [r8]
 80070c2:	1a3f      	subs	r7, r7, r0
 80070c4:	42b7      	cmp	r7, r6
 80070c6:	dd64      	ble.n	8007192 <__gethex+0x260>
 80070c8:	1bbf      	subs	r7, r7, r6
 80070ca:	4639      	mov	r1, r7
 80070cc:	4628      	mov	r0, r5
 80070ce:	f000 fe77 	bl	8007dc0 <__any_on>
 80070d2:	4682      	mov	sl, r0
 80070d4:	b178      	cbz	r0, 80070f6 <__gethex+0x1c4>
 80070d6:	1e7b      	subs	r3, r7, #1
 80070d8:	1159      	asrs	r1, r3, #5
 80070da:	f003 021f 	and.w	r2, r3, #31
 80070de:	f04f 0a01 	mov.w	sl, #1
 80070e2:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80070e6:	fa0a f202 	lsl.w	r2, sl, r2
 80070ea:	420a      	tst	r2, r1
 80070ec:	d003      	beq.n	80070f6 <__gethex+0x1c4>
 80070ee:	4553      	cmp	r3, sl
 80070f0:	dc46      	bgt.n	8007180 <__gethex+0x24e>
 80070f2:	f04f 0a02 	mov.w	sl, #2
 80070f6:	4639      	mov	r1, r7
 80070f8:	4628      	mov	r0, r5
 80070fa:	f7ff fecb 	bl	8006e94 <rshift>
 80070fe:	443c      	add	r4, r7
 8007100:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007104:	42a3      	cmp	r3, r4
 8007106:	da52      	bge.n	80071ae <__gethex+0x27c>
 8007108:	4629      	mov	r1, r5
 800710a:	9802      	ldr	r0, [sp, #8]
 800710c:	f000 faae 	bl	800766c <_Bfree>
 8007110:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007112:	2300      	movs	r3, #0
 8007114:	6013      	str	r3, [r2, #0]
 8007116:	27a3      	movs	r7, #163	; 0xa3
 8007118:	e793      	b.n	8007042 <__gethex+0x110>
 800711a:	3101      	adds	r1, #1
 800711c:	105b      	asrs	r3, r3, #1
 800711e:	e7b0      	b.n	8007082 <__gethex+0x150>
 8007120:	1e73      	subs	r3, r6, #1
 8007122:	9305      	str	r3, [sp, #20]
 8007124:	9a07      	ldr	r2, [sp, #28]
 8007126:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800712a:	4293      	cmp	r3, r2
 800712c:	d018      	beq.n	8007160 <__gethex+0x22e>
 800712e:	f1bb 0f20 	cmp.w	fp, #32
 8007132:	d107      	bne.n	8007144 <__gethex+0x212>
 8007134:	9b04      	ldr	r3, [sp, #16]
 8007136:	f8c3 a000 	str.w	sl, [r3]
 800713a:	3304      	adds	r3, #4
 800713c:	f04f 0a00 	mov.w	sl, #0
 8007140:	9304      	str	r3, [sp, #16]
 8007142:	46d3      	mov	fp, sl
 8007144:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007148:	f7ff fede 	bl	8006f08 <__hexdig_fun>
 800714c:	f000 000f 	and.w	r0, r0, #15
 8007150:	fa00 f00b 	lsl.w	r0, r0, fp
 8007154:	ea4a 0a00 	orr.w	sl, sl, r0
 8007158:	f10b 0b04 	add.w	fp, fp, #4
 800715c:	9b05      	ldr	r3, [sp, #20]
 800715e:	e00d      	b.n	800717c <__gethex+0x24a>
 8007160:	9b05      	ldr	r3, [sp, #20]
 8007162:	9a08      	ldr	r2, [sp, #32]
 8007164:	4413      	add	r3, r2
 8007166:	42bb      	cmp	r3, r7
 8007168:	d3e1      	bcc.n	800712e <__gethex+0x1fc>
 800716a:	4618      	mov	r0, r3
 800716c:	9a01      	ldr	r2, [sp, #4]
 800716e:	9903      	ldr	r1, [sp, #12]
 8007170:	9309      	str	r3, [sp, #36]	; 0x24
 8007172:	f001 f9e2 	bl	800853a <strncmp>
 8007176:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007178:	2800      	cmp	r0, #0
 800717a:	d1d8      	bne.n	800712e <__gethex+0x1fc>
 800717c:	461e      	mov	r6, r3
 800717e:	e791      	b.n	80070a4 <__gethex+0x172>
 8007180:	1eb9      	subs	r1, r7, #2
 8007182:	4628      	mov	r0, r5
 8007184:	f000 fe1c 	bl	8007dc0 <__any_on>
 8007188:	2800      	cmp	r0, #0
 800718a:	d0b2      	beq.n	80070f2 <__gethex+0x1c0>
 800718c:	f04f 0a03 	mov.w	sl, #3
 8007190:	e7b1      	b.n	80070f6 <__gethex+0x1c4>
 8007192:	da09      	bge.n	80071a8 <__gethex+0x276>
 8007194:	1bf7      	subs	r7, r6, r7
 8007196:	4629      	mov	r1, r5
 8007198:	463a      	mov	r2, r7
 800719a:	9802      	ldr	r0, [sp, #8]
 800719c:	f000 fc32 	bl	8007a04 <__lshift>
 80071a0:	1be4      	subs	r4, r4, r7
 80071a2:	4605      	mov	r5, r0
 80071a4:	f100 0914 	add.w	r9, r0, #20
 80071a8:	f04f 0a00 	mov.w	sl, #0
 80071ac:	e7a8      	b.n	8007100 <__gethex+0x1ce>
 80071ae:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80071b2:	42a0      	cmp	r0, r4
 80071b4:	dd6a      	ble.n	800728c <__gethex+0x35a>
 80071b6:	1b04      	subs	r4, r0, r4
 80071b8:	42a6      	cmp	r6, r4
 80071ba:	dc2e      	bgt.n	800721a <__gethex+0x2e8>
 80071bc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80071c0:	2b02      	cmp	r3, #2
 80071c2:	d022      	beq.n	800720a <__gethex+0x2d8>
 80071c4:	2b03      	cmp	r3, #3
 80071c6:	d024      	beq.n	8007212 <__gethex+0x2e0>
 80071c8:	2b01      	cmp	r3, #1
 80071ca:	d115      	bne.n	80071f8 <__gethex+0x2c6>
 80071cc:	42a6      	cmp	r6, r4
 80071ce:	d113      	bne.n	80071f8 <__gethex+0x2c6>
 80071d0:	2e01      	cmp	r6, #1
 80071d2:	dc0b      	bgt.n	80071ec <__gethex+0x2ba>
 80071d4:	9a06      	ldr	r2, [sp, #24]
 80071d6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80071da:	6013      	str	r3, [r2, #0]
 80071dc:	2301      	movs	r3, #1
 80071de:	612b      	str	r3, [r5, #16]
 80071e0:	f8c9 3000 	str.w	r3, [r9]
 80071e4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80071e6:	2762      	movs	r7, #98	; 0x62
 80071e8:	601d      	str	r5, [r3, #0]
 80071ea:	e72a      	b.n	8007042 <__gethex+0x110>
 80071ec:	1e71      	subs	r1, r6, #1
 80071ee:	4628      	mov	r0, r5
 80071f0:	f000 fde6 	bl	8007dc0 <__any_on>
 80071f4:	2800      	cmp	r0, #0
 80071f6:	d1ed      	bne.n	80071d4 <__gethex+0x2a2>
 80071f8:	4629      	mov	r1, r5
 80071fa:	9802      	ldr	r0, [sp, #8]
 80071fc:	f000 fa36 	bl	800766c <_Bfree>
 8007200:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007202:	2300      	movs	r3, #0
 8007204:	6013      	str	r3, [r2, #0]
 8007206:	2750      	movs	r7, #80	; 0x50
 8007208:	e71b      	b.n	8007042 <__gethex+0x110>
 800720a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800720c:	2b00      	cmp	r3, #0
 800720e:	d0e1      	beq.n	80071d4 <__gethex+0x2a2>
 8007210:	e7f2      	b.n	80071f8 <__gethex+0x2c6>
 8007212:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007214:	2b00      	cmp	r3, #0
 8007216:	d1dd      	bne.n	80071d4 <__gethex+0x2a2>
 8007218:	e7ee      	b.n	80071f8 <__gethex+0x2c6>
 800721a:	1e67      	subs	r7, r4, #1
 800721c:	f1ba 0f00 	cmp.w	sl, #0
 8007220:	d131      	bne.n	8007286 <__gethex+0x354>
 8007222:	b127      	cbz	r7, 800722e <__gethex+0x2fc>
 8007224:	4639      	mov	r1, r7
 8007226:	4628      	mov	r0, r5
 8007228:	f000 fdca 	bl	8007dc0 <__any_on>
 800722c:	4682      	mov	sl, r0
 800722e:	117a      	asrs	r2, r7, #5
 8007230:	2301      	movs	r3, #1
 8007232:	f007 071f 	and.w	r7, r7, #31
 8007236:	fa03 f707 	lsl.w	r7, r3, r7
 800723a:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800723e:	4621      	mov	r1, r4
 8007240:	421f      	tst	r7, r3
 8007242:	4628      	mov	r0, r5
 8007244:	bf18      	it	ne
 8007246:	f04a 0a02 	orrne.w	sl, sl, #2
 800724a:	1b36      	subs	r6, r6, r4
 800724c:	f7ff fe22 	bl	8006e94 <rshift>
 8007250:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8007254:	2702      	movs	r7, #2
 8007256:	f1ba 0f00 	cmp.w	sl, #0
 800725a:	d048      	beq.n	80072ee <__gethex+0x3bc>
 800725c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007260:	2b02      	cmp	r3, #2
 8007262:	d015      	beq.n	8007290 <__gethex+0x35e>
 8007264:	2b03      	cmp	r3, #3
 8007266:	d017      	beq.n	8007298 <__gethex+0x366>
 8007268:	2b01      	cmp	r3, #1
 800726a:	d109      	bne.n	8007280 <__gethex+0x34e>
 800726c:	f01a 0f02 	tst.w	sl, #2
 8007270:	d006      	beq.n	8007280 <__gethex+0x34e>
 8007272:	f8d9 3000 	ldr.w	r3, [r9]
 8007276:	ea4a 0a03 	orr.w	sl, sl, r3
 800727a:	f01a 0f01 	tst.w	sl, #1
 800727e:	d10e      	bne.n	800729e <__gethex+0x36c>
 8007280:	f047 0710 	orr.w	r7, r7, #16
 8007284:	e033      	b.n	80072ee <__gethex+0x3bc>
 8007286:	f04f 0a01 	mov.w	sl, #1
 800728a:	e7d0      	b.n	800722e <__gethex+0x2fc>
 800728c:	2701      	movs	r7, #1
 800728e:	e7e2      	b.n	8007256 <__gethex+0x324>
 8007290:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007292:	f1c3 0301 	rsb	r3, r3, #1
 8007296:	9315      	str	r3, [sp, #84]	; 0x54
 8007298:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800729a:	2b00      	cmp	r3, #0
 800729c:	d0f0      	beq.n	8007280 <__gethex+0x34e>
 800729e:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80072a2:	f105 0314 	add.w	r3, r5, #20
 80072a6:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80072aa:	eb03 010a 	add.w	r1, r3, sl
 80072ae:	f04f 0c00 	mov.w	ip, #0
 80072b2:	4618      	mov	r0, r3
 80072b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80072b8:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80072bc:	d01c      	beq.n	80072f8 <__gethex+0x3c6>
 80072be:	3201      	adds	r2, #1
 80072c0:	6002      	str	r2, [r0, #0]
 80072c2:	2f02      	cmp	r7, #2
 80072c4:	f105 0314 	add.w	r3, r5, #20
 80072c8:	d138      	bne.n	800733c <__gethex+0x40a>
 80072ca:	f8d8 2000 	ldr.w	r2, [r8]
 80072ce:	3a01      	subs	r2, #1
 80072d0:	42b2      	cmp	r2, r6
 80072d2:	d10a      	bne.n	80072ea <__gethex+0x3b8>
 80072d4:	1171      	asrs	r1, r6, #5
 80072d6:	2201      	movs	r2, #1
 80072d8:	f006 061f 	and.w	r6, r6, #31
 80072dc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80072e0:	fa02 f606 	lsl.w	r6, r2, r6
 80072e4:	421e      	tst	r6, r3
 80072e6:	bf18      	it	ne
 80072e8:	4617      	movne	r7, r2
 80072ea:	f047 0720 	orr.w	r7, r7, #32
 80072ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80072f0:	601d      	str	r5, [r3, #0]
 80072f2:	9b06      	ldr	r3, [sp, #24]
 80072f4:	601c      	str	r4, [r3, #0]
 80072f6:	e6a4      	b.n	8007042 <__gethex+0x110>
 80072f8:	4299      	cmp	r1, r3
 80072fa:	f843 cc04 	str.w	ip, [r3, #-4]
 80072fe:	d8d8      	bhi.n	80072b2 <__gethex+0x380>
 8007300:	68ab      	ldr	r3, [r5, #8]
 8007302:	4599      	cmp	r9, r3
 8007304:	db12      	blt.n	800732c <__gethex+0x3fa>
 8007306:	6869      	ldr	r1, [r5, #4]
 8007308:	9802      	ldr	r0, [sp, #8]
 800730a:	3101      	adds	r1, #1
 800730c:	f000 f97a 	bl	8007604 <_Balloc>
 8007310:	692a      	ldr	r2, [r5, #16]
 8007312:	3202      	adds	r2, #2
 8007314:	f105 010c 	add.w	r1, r5, #12
 8007318:	4683      	mov	fp, r0
 800731a:	0092      	lsls	r2, r2, #2
 800731c:	300c      	adds	r0, #12
 800731e:	f7fc ff97 	bl	8004250 <memcpy>
 8007322:	4629      	mov	r1, r5
 8007324:	9802      	ldr	r0, [sp, #8]
 8007326:	f000 f9a1 	bl	800766c <_Bfree>
 800732a:	465d      	mov	r5, fp
 800732c:	692b      	ldr	r3, [r5, #16]
 800732e:	1c5a      	adds	r2, r3, #1
 8007330:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8007334:	612a      	str	r2, [r5, #16]
 8007336:	2201      	movs	r2, #1
 8007338:	615a      	str	r2, [r3, #20]
 800733a:	e7c2      	b.n	80072c2 <__gethex+0x390>
 800733c:	692a      	ldr	r2, [r5, #16]
 800733e:	454a      	cmp	r2, r9
 8007340:	dd0b      	ble.n	800735a <__gethex+0x428>
 8007342:	2101      	movs	r1, #1
 8007344:	4628      	mov	r0, r5
 8007346:	f7ff fda5 	bl	8006e94 <rshift>
 800734a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800734e:	3401      	adds	r4, #1
 8007350:	42a3      	cmp	r3, r4
 8007352:	f6ff aed9 	blt.w	8007108 <__gethex+0x1d6>
 8007356:	2701      	movs	r7, #1
 8007358:	e7c7      	b.n	80072ea <__gethex+0x3b8>
 800735a:	f016 061f 	ands.w	r6, r6, #31
 800735e:	d0fa      	beq.n	8007356 <__gethex+0x424>
 8007360:	449a      	add	sl, r3
 8007362:	f1c6 0620 	rsb	r6, r6, #32
 8007366:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800736a:	f000 fa0f 	bl	800778c <__hi0bits>
 800736e:	42b0      	cmp	r0, r6
 8007370:	dbe7      	blt.n	8007342 <__gethex+0x410>
 8007372:	e7f0      	b.n	8007356 <__gethex+0x424>

08007374 <L_shift>:
 8007374:	f1c2 0208 	rsb	r2, r2, #8
 8007378:	0092      	lsls	r2, r2, #2
 800737a:	b570      	push	{r4, r5, r6, lr}
 800737c:	f1c2 0620 	rsb	r6, r2, #32
 8007380:	6843      	ldr	r3, [r0, #4]
 8007382:	6804      	ldr	r4, [r0, #0]
 8007384:	fa03 f506 	lsl.w	r5, r3, r6
 8007388:	432c      	orrs	r4, r5
 800738a:	40d3      	lsrs	r3, r2
 800738c:	6004      	str	r4, [r0, #0]
 800738e:	f840 3f04 	str.w	r3, [r0, #4]!
 8007392:	4288      	cmp	r0, r1
 8007394:	d3f4      	bcc.n	8007380 <L_shift+0xc>
 8007396:	bd70      	pop	{r4, r5, r6, pc}

08007398 <__match>:
 8007398:	b530      	push	{r4, r5, lr}
 800739a:	6803      	ldr	r3, [r0, #0]
 800739c:	3301      	adds	r3, #1
 800739e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073a2:	b914      	cbnz	r4, 80073aa <__match+0x12>
 80073a4:	6003      	str	r3, [r0, #0]
 80073a6:	2001      	movs	r0, #1
 80073a8:	bd30      	pop	{r4, r5, pc}
 80073aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80073ae:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80073b2:	2d19      	cmp	r5, #25
 80073b4:	bf98      	it	ls
 80073b6:	3220      	addls	r2, #32
 80073b8:	42a2      	cmp	r2, r4
 80073ba:	d0f0      	beq.n	800739e <__match+0x6>
 80073bc:	2000      	movs	r0, #0
 80073be:	e7f3      	b.n	80073a8 <__match+0x10>

080073c0 <__hexnan>:
 80073c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073c4:	680b      	ldr	r3, [r1, #0]
 80073c6:	6801      	ldr	r1, [r0, #0]
 80073c8:	115f      	asrs	r7, r3, #5
 80073ca:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80073ce:	f013 031f 	ands.w	r3, r3, #31
 80073d2:	b087      	sub	sp, #28
 80073d4:	bf18      	it	ne
 80073d6:	3704      	addne	r7, #4
 80073d8:	2500      	movs	r5, #0
 80073da:	1f3e      	subs	r6, r7, #4
 80073dc:	4682      	mov	sl, r0
 80073de:	4690      	mov	r8, r2
 80073e0:	9301      	str	r3, [sp, #4]
 80073e2:	f847 5c04 	str.w	r5, [r7, #-4]
 80073e6:	46b1      	mov	r9, r6
 80073e8:	4634      	mov	r4, r6
 80073ea:	9502      	str	r5, [sp, #8]
 80073ec:	46ab      	mov	fp, r5
 80073ee:	784a      	ldrb	r2, [r1, #1]
 80073f0:	1c4b      	adds	r3, r1, #1
 80073f2:	9303      	str	r3, [sp, #12]
 80073f4:	b342      	cbz	r2, 8007448 <__hexnan+0x88>
 80073f6:	4610      	mov	r0, r2
 80073f8:	9105      	str	r1, [sp, #20]
 80073fa:	9204      	str	r2, [sp, #16]
 80073fc:	f7ff fd84 	bl	8006f08 <__hexdig_fun>
 8007400:	2800      	cmp	r0, #0
 8007402:	d143      	bne.n	800748c <__hexnan+0xcc>
 8007404:	9a04      	ldr	r2, [sp, #16]
 8007406:	9905      	ldr	r1, [sp, #20]
 8007408:	2a20      	cmp	r2, #32
 800740a:	d818      	bhi.n	800743e <__hexnan+0x7e>
 800740c:	9b02      	ldr	r3, [sp, #8]
 800740e:	459b      	cmp	fp, r3
 8007410:	dd13      	ble.n	800743a <__hexnan+0x7a>
 8007412:	454c      	cmp	r4, r9
 8007414:	d206      	bcs.n	8007424 <__hexnan+0x64>
 8007416:	2d07      	cmp	r5, #7
 8007418:	dc04      	bgt.n	8007424 <__hexnan+0x64>
 800741a:	462a      	mov	r2, r5
 800741c:	4649      	mov	r1, r9
 800741e:	4620      	mov	r0, r4
 8007420:	f7ff ffa8 	bl	8007374 <L_shift>
 8007424:	4544      	cmp	r4, r8
 8007426:	d944      	bls.n	80074b2 <__hexnan+0xf2>
 8007428:	2300      	movs	r3, #0
 800742a:	f1a4 0904 	sub.w	r9, r4, #4
 800742e:	f844 3c04 	str.w	r3, [r4, #-4]
 8007432:	f8cd b008 	str.w	fp, [sp, #8]
 8007436:	464c      	mov	r4, r9
 8007438:	461d      	mov	r5, r3
 800743a:	9903      	ldr	r1, [sp, #12]
 800743c:	e7d7      	b.n	80073ee <__hexnan+0x2e>
 800743e:	2a29      	cmp	r2, #41	; 0x29
 8007440:	d14a      	bne.n	80074d8 <__hexnan+0x118>
 8007442:	3102      	adds	r1, #2
 8007444:	f8ca 1000 	str.w	r1, [sl]
 8007448:	f1bb 0f00 	cmp.w	fp, #0
 800744c:	d044      	beq.n	80074d8 <__hexnan+0x118>
 800744e:	454c      	cmp	r4, r9
 8007450:	d206      	bcs.n	8007460 <__hexnan+0xa0>
 8007452:	2d07      	cmp	r5, #7
 8007454:	dc04      	bgt.n	8007460 <__hexnan+0xa0>
 8007456:	462a      	mov	r2, r5
 8007458:	4649      	mov	r1, r9
 800745a:	4620      	mov	r0, r4
 800745c:	f7ff ff8a 	bl	8007374 <L_shift>
 8007460:	4544      	cmp	r4, r8
 8007462:	d928      	bls.n	80074b6 <__hexnan+0xf6>
 8007464:	4643      	mov	r3, r8
 8007466:	f854 2b04 	ldr.w	r2, [r4], #4
 800746a:	f843 2b04 	str.w	r2, [r3], #4
 800746e:	42a6      	cmp	r6, r4
 8007470:	d2f9      	bcs.n	8007466 <__hexnan+0xa6>
 8007472:	2200      	movs	r2, #0
 8007474:	f843 2b04 	str.w	r2, [r3], #4
 8007478:	429e      	cmp	r6, r3
 800747a:	d2fb      	bcs.n	8007474 <__hexnan+0xb4>
 800747c:	6833      	ldr	r3, [r6, #0]
 800747e:	b91b      	cbnz	r3, 8007488 <__hexnan+0xc8>
 8007480:	4546      	cmp	r6, r8
 8007482:	d127      	bne.n	80074d4 <__hexnan+0x114>
 8007484:	2301      	movs	r3, #1
 8007486:	6033      	str	r3, [r6, #0]
 8007488:	2005      	movs	r0, #5
 800748a:	e026      	b.n	80074da <__hexnan+0x11a>
 800748c:	3501      	adds	r5, #1
 800748e:	2d08      	cmp	r5, #8
 8007490:	f10b 0b01 	add.w	fp, fp, #1
 8007494:	dd06      	ble.n	80074a4 <__hexnan+0xe4>
 8007496:	4544      	cmp	r4, r8
 8007498:	d9cf      	bls.n	800743a <__hexnan+0x7a>
 800749a:	2300      	movs	r3, #0
 800749c:	f844 3c04 	str.w	r3, [r4, #-4]
 80074a0:	2501      	movs	r5, #1
 80074a2:	3c04      	subs	r4, #4
 80074a4:	6822      	ldr	r2, [r4, #0]
 80074a6:	f000 000f 	and.w	r0, r0, #15
 80074aa:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80074ae:	6020      	str	r0, [r4, #0]
 80074b0:	e7c3      	b.n	800743a <__hexnan+0x7a>
 80074b2:	2508      	movs	r5, #8
 80074b4:	e7c1      	b.n	800743a <__hexnan+0x7a>
 80074b6:	9b01      	ldr	r3, [sp, #4]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d0df      	beq.n	800747c <__hexnan+0xbc>
 80074bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80074c0:	f1c3 0320 	rsb	r3, r3, #32
 80074c4:	fa22 f303 	lsr.w	r3, r2, r3
 80074c8:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80074cc:	401a      	ands	r2, r3
 80074ce:	f847 2c04 	str.w	r2, [r7, #-4]
 80074d2:	e7d3      	b.n	800747c <__hexnan+0xbc>
 80074d4:	3e04      	subs	r6, #4
 80074d6:	e7d1      	b.n	800747c <__hexnan+0xbc>
 80074d8:	2004      	movs	r0, #4
 80074da:	b007      	add	sp, #28
 80074dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080074e0 <__locale_ctype_ptr_l>:
 80074e0:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80074e4:	4770      	bx	lr

080074e6 <__localeconv_l>:
 80074e6:	30f0      	adds	r0, #240	; 0xf0
 80074e8:	4770      	bx	lr
	...

080074ec <_localeconv_r>:
 80074ec:	4b04      	ldr	r3, [pc, #16]	; (8007500 <_localeconv_r+0x14>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	6a18      	ldr	r0, [r3, #32]
 80074f2:	4b04      	ldr	r3, [pc, #16]	; (8007504 <_localeconv_r+0x18>)
 80074f4:	2800      	cmp	r0, #0
 80074f6:	bf08      	it	eq
 80074f8:	4618      	moveq	r0, r3
 80074fa:	30f0      	adds	r0, #240	; 0xf0
 80074fc:	4770      	bx	lr
 80074fe:	bf00      	nop
 8007500:	2000000c 	.word	0x2000000c
 8007504:	20000070 	.word	0x20000070

08007508 <__swhatbuf_r>:
 8007508:	b570      	push	{r4, r5, r6, lr}
 800750a:	460e      	mov	r6, r1
 800750c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007510:	2900      	cmp	r1, #0
 8007512:	b096      	sub	sp, #88	; 0x58
 8007514:	4614      	mov	r4, r2
 8007516:	461d      	mov	r5, r3
 8007518:	da07      	bge.n	800752a <__swhatbuf_r+0x22>
 800751a:	2300      	movs	r3, #0
 800751c:	602b      	str	r3, [r5, #0]
 800751e:	89b3      	ldrh	r3, [r6, #12]
 8007520:	061a      	lsls	r2, r3, #24
 8007522:	d410      	bmi.n	8007546 <__swhatbuf_r+0x3e>
 8007524:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007528:	e00e      	b.n	8007548 <__swhatbuf_r+0x40>
 800752a:	466a      	mov	r2, sp
 800752c:	f001 f846 	bl	80085bc <_fstat_r>
 8007530:	2800      	cmp	r0, #0
 8007532:	dbf2      	blt.n	800751a <__swhatbuf_r+0x12>
 8007534:	9a01      	ldr	r2, [sp, #4]
 8007536:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800753a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800753e:	425a      	negs	r2, r3
 8007540:	415a      	adcs	r2, r3
 8007542:	602a      	str	r2, [r5, #0]
 8007544:	e7ee      	b.n	8007524 <__swhatbuf_r+0x1c>
 8007546:	2340      	movs	r3, #64	; 0x40
 8007548:	2000      	movs	r0, #0
 800754a:	6023      	str	r3, [r4, #0]
 800754c:	b016      	add	sp, #88	; 0x58
 800754e:	bd70      	pop	{r4, r5, r6, pc}

08007550 <__smakebuf_r>:
 8007550:	898b      	ldrh	r3, [r1, #12]
 8007552:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007554:	079d      	lsls	r5, r3, #30
 8007556:	4606      	mov	r6, r0
 8007558:	460c      	mov	r4, r1
 800755a:	d507      	bpl.n	800756c <__smakebuf_r+0x1c>
 800755c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007560:	6023      	str	r3, [r4, #0]
 8007562:	6123      	str	r3, [r4, #16]
 8007564:	2301      	movs	r3, #1
 8007566:	6163      	str	r3, [r4, #20]
 8007568:	b002      	add	sp, #8
 800756a:	bd70      	pop	{r4, r5, r6, pc}
 800756c:	ab01      	add	r3, sp, #4
 800756e:	466a      	mov	r2, sp
 8007570:	f7ff ffca 	bl	8007508 <__swhatbuf_r>
 8007574:	9900      	ldr	r1, [sp, #0]
 8007576:	4605      	mov	r5, r0
 8007578:	4630      	mov	r0, r6
 800757a:	f000 fc9f 	bl	8007ebc <_malloc_r>
 800757e:	b948      	cbnz	r0, 8007594 <__smakebuf_r+0x44>
 8007580:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007584:	059a      	lsls	r2, r3, #22
 8007586:	d4ef      	bmi.n	8007568 <__smakebuf_r+0x18>
 8007588:	f023 0303 	bic.w	r3, r3, #3
 800758c:	f043 0302 	orr.w	r3, r3, #2
 8007590:	81a3      	strh	r3, [r4, #12]
 8007592:	e7e3      	b.n	800755c <__smakebuf_r+0xc>
 8007594:	4b0d      	ldr	r3, [pc, #52]	; (80075cc <__smakebuf_r+0x7c>)
 8007596:	62b3      	str	r3, [r6, #40]	; 0x28
 8007598:	89a3      	ldrh	r3, [r4, #12]
 800759a:	6020      	str	r0, [r4, #0]
 800759c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075a0:	81a3      	strh	r3, [r4, #12]
 80075a2:	9b00      	ldr	r3, [sp, #0]
 80075a4:	6163      	str	r3, [r4, #20]
 80075a6:	9b01      	ldr	r3, [sp, #4]
 80075a8:	6120      	str	r0, [r4, #16]
 80075aa:	b15b      	cbz	r3, 80075c4 <__smakebuf_r+0x74>
 80075ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80075b0:	4630      	mov	r0, r6
 80075b2:	f001 f815 	bl	80085e0 <_isatty_r>
 80075b6:	b128      	cbz	r0, 80075c4 <__smakebuf_r+0x74>
 80075b8:	89a3      	ldrh	r3, [r4, #12]
 80075ba:	f023 0303 	bic.w	r3, r3, #3
 80075be:	f043 0301 	orr.w	r3, r3, #1
 80075c2:	81a3      	strh	r3, [r4, #12]
 80075c4:	89a3      	ldrh	r3, [r4, #12]
 80075c6:	431d      	orrs	r5, r3
 80075c8:	81a5      	strh	r5, [r4, #12]
 80075ca:	e7cd      	b.n	8007568 <__smakebuf_r+0x18>
 80075cc:	08006d49 	.word	0x08006d49

080075d0 <malloc>:
 80075d0:	4b02      	ldr	r3, [pc, #8]	; (80075dc <malloc+0xc>)
 80075d2:	4601      	mov	r1, r0
 80075d4:	6818      	ldr	r0, [r3, #0]
 80075d6:	f000 bc71 	b.w	8007ebc <_malloc_r>
 80075da:	bf00      	nop
 80075dc:	2000000c 	.word	0x2000000c

080075e0 <__ascii_mbtowc>:
 80075e0:	b082      	sub	sp, #8
 80075e2:	b901      	cbnz	r1, 80075e6 <__ascii_mbtowc+0x6>
 80075e4:	a901      	add	r1, sp, #4
 80075e6:	b142      	cbz	r2, 80075fa <__ascii_mbtowc+0x1a>
 80075e8:	b14b      	cbz	r3, 80075fe <__ascii_mbtowc+0x1e>
 80075ea:	7813      	ldrb	r3, [r2, #0]
 80075ec:	600b      	str	r3, [r1, #0]
 80075ee:	7812      	ldrb	r2, [r2, #0]
 80075f0:	1c10      	adds	r0, r2, #0
 80075f2:	bf18      	it	ne
 80075f4:	2001      	movne	r0, #1
 80075f6:	b002      	add	sp, #8
 80075f8:	4770      	bx	lr
 80075fa:	4610      	mov	r0, r2
 80075fc:	e7fb      	b.n	80075f6 <__ascii_mbtowc+0x16>
 80075fe:	f06f 0001 	mvn.w	r0, #1
 8007602:	e7f8      	b.n	80075f6 <__ascii_mbtowc+0x16>

08007604 <_Balloc>:
 8007604:	b570      	push	{r4, r5, r6, lr}
 8007606:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007608:	4604      	mov	r4, r0
 800760a:	460e      	mov	r6, r1
 800760c:	b93d      	cbnz	r5, 800761e <_Balloc+0x1a>
 800760e:	2010      	movs	r0, #16
 8007610:	f7ff ffde 	bl	80075d0 <malloc>
 8007614:	6260      	str	r0, [r4, #36]	; 0x24
 8007616:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800761a:	6005      	str	r5, [r0, #0]
 800761c:	60c5      	str	r5, [r0, #12]
 800761e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007620:	68eb      	ldr	r3, [r5, #12]
 8007622:	b183      	cbz	r3, 8007646 <_Balloc+0x42>
 8007624:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007626:	68db      	ldr	r3, [r3, #12]
 8007628:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800762c:	b9b8      	cbnz	r0, 800765e <_Balloc+0x5a>
 800762e:	2101      	movs	r1, #1
 8007630:	fa01 f506 	lsl.w	r5, r1, r6
 8007634:	1d6a      	adds	r2, r5, #5
 8007636:	0092      	lsls	r2, r2, #2
 8007638:	4620      	mov	r0, r4
 800763a:	f000 fbe2 	bl	8007e02 <_calloc_r>
 800763e:	b160      	cbz	r0, 800765a <_Balloc+0x56>
 8007640:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8007644:	e00e      	b.n	8007664 <_Balloc+0x60>
 8007646:	2221      	movs	r2, #33	; 0x21
 8007648:	2104      	movs	r1, #4
 800764a:	4620      	mov	r0, r4
 800764c:	f000 fbd9 	bl	8007e02 <_calloc_r>
 8007650:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007652:	60e8      	str	r0, [r5, #12]
 8007654:	68db      	ldr	r3, [r3, #12]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d1e4      	bne.n	8007624 <_Balloc+0x20>
 800765a:	2000      	movs	r0, #0
 800765c:	bd70      	pop	{r4, r5, r6, pc}
 800765e:	6802      	ldr	r2, [r0, #0]
 8007660:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8007664:	2300      	movs	r3, #0
 8007666:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800766a:	e7f7      	b.n	800765c <_Balloc+0x58>

0800766c <_Bfree>:
 800766c:	b570      	push	{r4, r5, r6, lr}
 800766e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007670:	4606      	mov	r6, r0
 8007672:	460d      	mov	r5, r1
 8007674:	b93c      	cbnz	r4, 8007686 <_Bfree+0x1a>
 8007676:	2010      	movs	r0, #16
 8007678:	f7ff ffaa 	bl	80075d0 <malloc>
 800767c:	6270      	str	r0, [r6, #36]	; 0x24
 800767e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007682:	6004      	str	r4, [r0, #0]
 8007684:	60c4      	str	r4, [r0, #12]
 8007686:	b13d      	cbz	r5, 8007698 <_Bfree+0x2c>
 8007688:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800768a:	686a      	ldr	r2, [r5, #4]
 800768c:	68db      	ldr	r3, [r3, #12]
 800768e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007692:	6029      	str	r1, [r5, #0]
 8007694:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8007698:	bd70      	pop	{r4, r5, r6, pc}

0800769a <__multadd>:
 800769a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800769e:	690d      	ldr	r5, [r1, #16]
 80076a0:	461f      	mov	r7, r3
 80076a2:	4606      	mov	r6, r0
 80076a4:	460c      	mov	r4, r1
 80076a6:	f101 0c14 	add.w	ip, r1, #20
 80076aa:	2300      	movs	r3, #0
 80076ac:	f8dc 0000 	ldr.w	r0, [ip]
 80076b0:	b281      	uxth	r1, r0
 80076b2:	fb02 7101 	mla	r1, r2, r1, r7
 80076b6:	0c0f      	lsrs	r7, r1, #16
 80076b8:	0c00      	lsrs	r0, r0, #16
 80076ba:	fb02 7000 	mla	r0, r2, r0, r7
 80076be:	b289      	uxth	r1, r1
 80076c0:	3301      	adds	r3, #1
 80076c2:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80076c6:	429d      	cmp	r5, r3
 80076c8:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80076cc:	f84c 1b04 	str.w	r1, [ip], #4
 80076d0:	dcec      	bgt.n	80076ac <__multadd+0x12>
 80076d2:	b1d7      	cbz	r7, 800770a <__multadd+0x70>
 80076d4:	68a3      	ldr	r3, [r4, #8]
 80076d6:	42ab      	cmp	r3, r5
 80076d8:	dc12      	bgt.n	8007700 <__multadd+0x66>
 80076da:	6861      	ldr	r1, [r4, #4]
 80076dc:	4630      	mov	r0, r6
 80076de:	3101      	adds	r1, #1
 80076e0:	f7ff ff90 	bl	8007604 <_Balloc>
 80076e4:	6922      	ldr	r2, [r4, #16]
 80076e6:	3202      	adds	r2, #2
 80076e8:	f104 010c 	add.w	r1, r4, #12
 80076ec:	4680      	mov	r8, r0
 80076ee:	0092      	lsls	r2, r2, #2
 80076f0:	300c      	adds	r0, #12
 80076f2:	f7fc fdad 	bl	8004250 <memcpy>
 80076f6:	4621      	mov	r1, r4
 80076f8:	4630      	mov	r0, r6
 80076fa:	f7ff ffb7 	bl	800766c <_Bfree>
 80076fe:	4644      	mov	r4, r8
 8007700:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007704:	3501      	adds	r5, #1
 8007706:	615f      	str	r7, [r3, #20]
 8007708:	6125      	str	r5, [r4, #16]
 800770a:	4620      	mov	r0, r4
 800770c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007710 <__s2b>:
 8007710:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007714:	460c      	mov	r4, r1
 8007716:	4615      	mov	r5, r2
 8007718:	461f      	mov	r7, r3
 800771a:	2209      	movs	r2, #9
 800771c:	3308      	adds	r3, #8
 800771e:	4606      	mov	r6, r0
 8007720:	fb93 f3f2 	sdiv	r3, r3, r2
 8007724:	2100      	movs	r1, #0
 8007726:	2201      	movs	r2, #1
 8007728:	429a      	cmp	r2, r3
 800772a:	db20      	blt.n	800776e <__s2b+0x5e>
 800772c:	4630      	mov	r0, r6
 800772e:	f7ff ff69 	bl	8007604 <_Balloc>
 8007732:	9b08      	ldr	r3, [sp, #32]
 8007734:	6143      	str	r3, [r0, #20]
 8007736:	2d09      	cmp	r5, #9
 8007738:	f04f 0301 	mov.w	r3, #1
 800773c:	6103      	str	r3, [r0, #16]
 800773e:	dd19      	ble.n	8007774 <__s2b+0x64>
 8007740:	f104 0809 	add.w	r8, r4, #9
 8007744:	46c1      	mov	r9, r8
 8007746:	442c      	add	r4, r5
 8007748:	f819 3b01 	ldrb.w	r3, [r9], #1
 800774c:	4601      	mov	r1, r0
 800774e:	3b30      	subs	r3, #48	; 0x30
 8007750:	220a      	movs	r2, #10
 8007752:	4630      	mov	r0, r6
 8007754:	f7ff ffa1 	bl	800769a <__multadd>
 8007758:	45a1      	cmp	r9, r4
 800775a:	d1f5      	bne.n	8007748 <__s2b+0x38>
 800775c:	eb08 0405 	add.w	r4, r8, r5
 8007760:	3c08      	subs	r4, #8
 8007762:	1b2d      	subs	r5, r5, r4
 8007764:	1963      	adds	r3, r4, r5
 8007766:	42bb      	cmp	r3, r7
 8007768:	db07      	blt.n	800777a <__s2b+0x6a>
 800776a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800776e:	0052      	lsls	r2, r2, #1
 8007770:	3101      	adds	r1, #1
 8007772:	e7d9      	b.n	8007728 <__s2b+0x18>
 8007774:	340a      	adds	r4, #10
 8007776:	2509      	movs	r5, #9
 8007778:	e7f3      	b.n	8007762 <__s2b+0x52>
 800777a:	f814 3b01 	ldrb.w	r3, [r4], #1
 800777e:	4601      	mov	r1, r0
 8007780:	3b30      	subs	r3, #48	; 0x30
 8007782:	220a      	movs	r2, #10
 8007784:	4630      	mov	r0, r6
 8007786:	f7ff ff88 	bl	800769a <__multadd>
 800778a:	e7eb      	b.n	8007764 <__s2b+0x54>

0800778c <__hi0bits>:
 800778c:	0c02      	lsrs	r2, r0, #16
 800778e:	0412      	lsls	r2, r2, #16
 8007790:	4603      	mov	r3, r0
 8007792:	b9b2      	cbnz	r2, 80077c2 <__hi0bits+0x36>
 8007794:	0403      	lsls	r3, r0, #16
 8007796:	2010      	movs	r0, #16
 8007798:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800779c:	bf04      	itt	eq
 800779e:	021b      	lsleq	r3, r3, #8
 80077a0:	3008      	addeq	r0, #8
 80077a2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80077a6:	bf04      	itt	eq
 80077a8:	011b      	lsleq	r3, r3, #4
 80077aa:	3004      	addeq	r0, #4
 80077ac:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80077b0:	bf04      	itt	eq
 80077b2:	009b      	lsleq	r3, r3, #2
 80077b4:	3002      	addeq	r0, #2
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	db06      	blt.n	80077c8 <__hi0bits+0x3c>
 80077ba:	005b      	lsls	r3, r3, #1
 80077bc:	d503      	bpl.n	80077c6 <__hi0bits+0x3a>
 80077be:	3001      	adds	r0, #1
 80077c0:	4770      	bx	lr
 80077c2:	2000      	movs	r0, #0
 80077c4:	e7e8      	b.n	8007798 <__hi0bits+0xc>
 80077c6:	2020      	movs	r0, #32
 80077c8:	4770      	bx	lr

080077ca <__lo0bits>:
 80077ca:	6803      	ldr	r3, [r0, #0]
 80077cc:	f013 0207 	ands.w	r2, r3, #7
 80077d0:	4601      	mov	r1, r0
 80077d2:	d00b      	beq.n	80077ec <__lo0bits+0x22>
 80077d4:	07da      	lsls	r2, r3, #31
 80077d6:	d423      	bmi.n	8007820 <__lo0bits+0x56>
 80077d8:	0798      	lsls	r0, r3, #30
 80077da:	bf49      	itett	mi
 80077dc:	085b      	lsrmi	r3, r3, #1
 80077de:	089b      	lsrpl	r3, r3, #2
 80077e0:	2001      	movmi	r0, #1
 80077e2:	600b      	strmi	r3, [r1, #0]
 80077e4:	bf5c      	itt	pl
 80077e6:	600b      	strpl	r3, [r1, #0]
 80077e8:	2002      	movpl	r0, #2
 80077ea:	4770      	bx	lr
 80077ec:	b298      	uxth	r0, r3
 80077ee:	b9a8      	cbnz	r0, 800781c <__lo0bits+0x52>
 80077f0:	0c1b      	lsrs	r3, r3, #16
 80077f2:	2010      	movs	r0, #16
 80077f4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80077f8:	bf04      	itt	eq
 80077fa:	0a1b      	lsreq	r3, r3, #8
 80077fc:	3008      	addeq	r0, #8
 80077fe:	071a      	lsls	r2, r3, #28
 8007800:	bf04      	itt	eq
 8007802:	091b      	lsreq	r3, r3, #4
 8007804:	3004      	addeq	r0, #4
 8007806:	079a      	lsls	r2, r3, #30
 8007808:	bf04      	itt	eq
 800780a:	089b      	lsreq	r3, r3, #2
 800780c:	3002      	addeq	r0, #2
 800780e:	07da      	lsls	r2, r3, #31
 8007810:	d402      	bmi.n	8007818 <__lo0bits+0x4e>
 8007812:	085b      	lsrs	r3, r3, #1
 8007814:	d006      	beq.n	8007824 <__lo0bits+0x5a>
 8007816:	3001      	adds	r0, #1
 8007818:	600b      	str	r3, [r1, #0]
 800781a:	4770      	bx	lr
 800781c:	4610      	mov	r0, r2
 800781e:	e7e9      	b.n	80077f4 <__lo0bits+0x2a>
 8007820:	2000      	movs	r0, #0
 8007822:	4770      	bx	lr
 8007824:	2020      	movs	r0, #32
 8007826:	4770      	bx	lr

08007828 <__i2b>:
 8007828:	b510      	push	{r4, lr}
 800782a:	460c      	mov	r4, r1
 800782c:	2101      	movs	r1, #1
 800782e:	f7ff fee9 	bl	8007604 <_Balloc>
 8007832:	2201      	movs	r2, #1
 8007834:	6144      	str	r4, [r0, #20]
 8007836:	6102      	str	r2, [r0, #16]
 8007838:	bd10      	pop	{r4, pc}

0800783a <__multiply>:
 800783a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800783e:	4614      	mov	r4, r2
 8007840:	690a      	ldr	r2, [r1, #16]
 8007842:	6923      	ldr	r3, [r4, #16]
 8007844:	429a      	cmp	r2, r3
 8007846:	bfb8      	it	lt
 8007848:	460b      	movlt	r3, r1
 800784a:	4688      	mov	r8, r1
 800784c:	bfbc      	itt	lt
 800784e:	46a0      	movlt	r8, r4
 8007850:	461c      	movlt	r4, r3
 8007852:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007856:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800785a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800785e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007862:	eb07 0609 	add.w	r6, r7, r9
 8007866:	42b3      	cmp	r3, r6
 8007868:	bfb8      	it	lt
 800786a:	3101      	addlt	r1, #1
 800786c:	f7ff feca 	bl	8007604 <_Balloc>
 8007870:	f100 0514 	add.w	r5, r0, #20
 8007874:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8007878:	462b      	mov	r3, r5
 800787a:	2200      	movs	r2, #0
 800787c:	4573      	cmp	r3, lr
 800787e:	d316      	bcc.n	80078ae <__multiply+0x74>
 8007880:	f104 0214 	add.w	r2, r4, #20
 8007884:	f108 0114 	add.w	r1, r8, #20
 8007888:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800788c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007890:	9300      	str	r3, [sp, #0]
 8007892:	9b00      	ldr	r3, [sp, #0]
 8007894:	9201      	str	r2, [sp, #4]
 8007896:	4293      	cmp	r3, r2
 8007898:	d80c      	bhi.n	80078b4 <__multiply+0x7a>
 800789a:	2e00      	cmp	r6, #0
 800789c:	dd03      	ble.n	80078a6 <__multiply+0x6c>
 800789e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d05d      	beq.n	8007962 <__multiply+0x128>
 80078a6:	6106      	str	r6, [r0, #16]
 80078a8:	b003      	add	sp, #12
 80078aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078ae:	f843 2b04 	str.w	r2, [r3], #4
 80078b2:	e7e3      	b.n	800787c <__multiply+0x42>
 80078b4:	f8b2 b000 	ldrh.w	fp, [r2]
 80078b8:	f1bb 0f00 	cmp.w	fp, #0
 80078bc:	d023      	beq.n	8007906 <__multiply+0xcc>
 80078be:	4689      	mov	r9, r1
 80078c0:	46ac      	mov	ip, r5
 80078c2:	f04f 0800 	mov.w	r8, #0
 80078c6:	f859 4b04 	ldr.w	r4, [r9], #4
 80078ca:	f8dc a000 	ldr.w	sl, [ip]
 80078ce:	b2a3      	uxth	r3, r4
 80078d0:	fa1f fa8a 	uxth.w	sl, sl
 80078d4:	fb0b a303 	mla	r3, fp, r3, sl
 80078d8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80078dc:	f8dc 4000 	ldr.w	r4, [ip]
 80078e0:	4443      	add	r3, r8
 80078e2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80078e6:	fb0b 840a 	mla	r4, fp, sl, r8
 80078ea:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80078ee:	46e2      	mov	sl, ip
 80078f0:	b29b      	uxth	r3, r3
 80078f2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80078f6:	454f      	cmp	r7, r9
 80078f8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80078fc:	f84a 3b04 	str.w	r3, [sl], #4
 8007900:	d82b      	bhi.n	800795a <__multiply+0x120>
 8007902:	f8cc 8004 	str.w	r8, [ip, #4]
 8007906:	9b01      	ldr	r3, [sp, #4]
 8007908:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800790c:	3204      	adds	r2, #4
 800790e:	f1ba 0f00 	cmp.w	sl, #0
 8007912:	d020      	beq.n	8007956 <__multiply+0x11c>
 8007914:	682b      	ldr	r3, [r5, #0]
 8007916:	4689      	mov	r9, r1
 8007918:	46a8      	mov	r8, r5
 800791a:	f04f 0b00 	mov.w	fp, #0
 800791e:	f8b9 c000 	ldrh.w	ip, [r9]
 8007922:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8007926:	fb0a 440c 	mla	r4, sl, ip, r4
 800792a:	445c      	add	r4, fp
 800792c:	46c4      	mov	ip, r8
 800792e:	b29b      	uxth	r3, r3
 8007930:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007934:	f84c 3b04 	str.w	r3, [ip], #4
 8007938:	f859 3b04 	ldr.w	r3, [r9], #4
 800793c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8007940:	0c1b      	lsrs	r3, r3, #16
 8007942:	fb0a b303 	mla	r3, sl, r3, fp
 8007946:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800794a:	454f      	cmp	r7, r9
 800794c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8007950:	d805      	bhi.n	800795e <__multiply+0x124>
 8007952:	f8c8 3004 	str.w	r3, [r8, #4]
 8007956:	3504      	adds	r5, #4
 8007958:	e79b      	b.n	8007892 <__multiply+0x58>
 800795a:	46d4      	mov	ip, sl
 800795c:	e7b3      	b.n	80078c6 <__multiply+0x8c>
 800795e:	46e0      	mov	r8, ip
 8007960:	e7dd      	b.n	800791e <__multiply+0xe4>
 8007962:	3e01      	subs	r6, #1
 8007964:	e799      	b.n	800789a <__multiply+0x60>
	...

08007968 <__pow5mult>:
 8007968:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800796c:	4615      	mov	r5, r2
 800796e:	f012 0203 	ands.w	r2, r2, #3
 8007972:	4606      	mov	r6, r0
 8007974:	460f      	mov	r7, r1
 8007976:	d007      	beq.n	8007988 <__pow5mult+0x20>
 8007978:	3a01      	subs	r2, #1
 800797a:	4c21      	ldr	r4, [pc, #132]	; (8007a00 <__pow5mult+0x98>)
 800797c:	2300      	movs	r3, #0
 800797e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007982:	f7ff fe8a 	bl	800769a <__multadd>
 8007986:	4607      	mov	r7, r0
 8007988:	10ad      	asrs	r5, r5, #2
 800798a:	d035      	beq.n	80079f8 <__pow5mult+0x90>
 800798c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800798e:	b93c      	cbnz	r4, 80079a0 <__pow5mult+0x38>
 8007990:	2010      	movs	r0, #16
 8007992:	f7ff fe1d 	bl	80075d0 <malloc>
 8007996:	6270      	str	r0, [r6, #36]	; 0x24
 8007998:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800799c:	6004      	str	r4, [r0, #0]
 800799e:	60c4      	str	r4, [r0, #12]
 80079a0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80079a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80079a8:	b94c      	cbnz	r4, 80079be <__pow5mult+0x56>
 80079aa:	f240 2171 	movw	r1, #625	; 0x271
 80079ae:	4630      	mov	r0, r6
 80079b0:	f7ff ff3a 	bl	8007828 <__i2b>
 80079b4:	2300      	movs	r3, #0
 80079b6:	f8c8 0008 	str.w	r0, [r8, #8]
 80079ba:	4604      	mov	r4, r0
 80079bc:	6003      	str	r3, [r0, #0]
 80079be:	f04f 0800 	mov.w	r8, #0
 80079c2:	07eb      	lsls	r3, r5, #31
 80079c4:	d50a      	bpl.n	80079dc <__pow5mult+0x74>
 80079c6:	4639      	mov	r1, r7
 80079c8:	4622      	mov	r2, r4
 80079ca:	4630      	mov	r0, r6
 80079cc:	f7ff ff35 	bl	800783a <__multiply>
 80079d0:	4639      	mov	r1, r7
 80079d2:	4681      	mov	r9, r0
 80079d4:	4630      	mov	r0, r6
 80079d6:	f7ff fe49 	bl	800766c <_Bfree>
 80079da:	464f      	mov	r7, r9
 80079dc:	106d      	asrs	r5, r5, #1
 80079de:	d00b      	beq.n	80079f8 <__pow5mult+0x90>
 80079e0:	6820      	ldr	r0, [r4, #0]
 80079e2:	b938      	cbnz	r0, 80079f4 <__pow5mult+0x8c>
 80079e4:	4622      	mov	r2, r4
 80079e6:	4621      	mov	r1, r4
 80079e8:	4630      	mov	r0, r6
 80079ea:	f7ff ff26 	bl	800783a <__multiply>
 80079ee:	6020      	str	r0, [r4, #0]
 80079f0:	f8c0 8000 	str.w	r8, [r0]
 80079f4:	4604      	mov	r4, r0
 80079f6:	e7e4      	b.n	80079c2 <__pow5mult+0x5a>
 80079f8:	4638      	mov	r0, r7
 80079fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079fe:	bf00      	nop
 8007a00:	08008a30 	.word	0x08008a30

08007a04 <__lshift>:
 8007a04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a08:	460c      	mov	r4, r1
 8007a0a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007a0e:	6923      	ldr	r3, [r4, #16]
 8007a10:	6849      	ldr	r1, [r1, #4]
 8007a12:	eb0a 0903 	add.w	r9, sl, r3
 8007a16:	68a3      	ldr	r3, [r4, #8]
 8007a18:	4607      	mov	r7, r0
 8007a1a:	4616      	mov	r6, r2
 8007a1c:	f109 0501 	add.w	r5, r9, #1
 8007a20:	42ab      	cmp	r3, r5
 8007a22:	db32      	blt.n	8007a8a <__lshift+0x86>
 8007a24:	4638      	mov	r0, r7
 8007a26:	f7ff fded 	bl	8007604 <_Balloc>
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	4680      	mov	r8, r0
 8007a2e:	f100 0114 	add.w	r1, r0, #20
 8007a32:	461a      	mov	r2, r3
 8007a34:	4553      	cmp	r3, sl
 8007a36:	db2b      	blt.n	8007a90 <__lshift+0x8c>
 8007a38:	6920      	ldr	r0, [r4, #16]
 8007a3a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007a3e:	f104 0314 	add.w	r3, r4, #20
 8007a42:	f016 021f 	ands.w	r2, r6, #31
 8007a46:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007a4a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007a4e:	d025      	beq.n	8007a9c <__lshift+0x98>
 8007a50:	f1c2 0e20 	rsb	lr, r2, #32
 8007a54:	2000      	movs	r0, #0
 8007a56:	681e      	ldr	r6, [r3, #0]
 8007a58:	468a      	mov	sl, r1
 8007a5a:	4096      	lsls	r6, r2
 8007a5c:	4330      	orrs	r0, r6
 8007a5e:	f84a 0b04 	str.w	r0, [sl], #4
 8007a62:	f853 0b04 	ldr.w	r0, [r3], #4
 8007a66:	459c      	cmp	ip, r3
 8007a68:	fa20 f00e 	lsr.w	r0, r0, lr
 8007a6c:	d814      	bhi.n	8007a98 <__lshift+0x94>
 8007a6e:	6048      	str	r0, [r1, #4]
 8007a70:	b108      	cbz	r0, 8007a76 <__lshift+0x72>
 8007a72:	f109 0502 	add.w	r5, r9, #2
 8007a76:	3d01      	subs	r5, #1
 8007a78:	4638      	mov	r0, r7
 8007a7a:	f8c8 5010 	str.w	r5, [r8, #16]
 8007a7e:	4621      	mov	r1, r4
 8007a80:	f7ff fdf4 	bl	800766c <_Bfree>
 8007a84:	4640      	mov	r0, r8
 8007a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a8a:	3101      	adds	r1, #1
 8007a8c:	005b      	lsls	r3, r3, #1
 8007a8e:	e7c7      	b.n	8007a20 <__lshift+0x1c>
 8007a90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007a94:	3301      	adds	r3, #1
 8007a96:	e7cd      	b.n	8007a34 <__lshift+0x30>
 8007a98:	4651      	mov	r1, sl
 8007a9a:	e7dc      	b.n	8007a56 <__lshift+0x52>
 8007a9c:	3904      	subs	r1, #4
 8007a9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007aa2:	f841 2f04 	str.w	r2, [r1, #4]!
 8007aa6:	459c      	cmp	ip, r3
 8007aa8:	d8f9      	bhi.n	8007a9e <__lshift+0x9a>
 8007aaa:	e7e4      	b.n	8007a76 <__lshift+0x72>

08007aac <__mcmp>:
 8007aac:	6903      	ldr	r3, [r0, #16]
 8007aae:	690a      	ldr	r2, [r1, #16]
 8007ab0:	1a9b      	subs	r3, r3, r2
 8007ab2:	b530      	push	{r4, r5, lr}
 8007ab4:	d10c      	bne.n	8007ad0 <__mcmp+0x24>
 8007ab6:	0092      	lsls	r2, r2, #2
 8007ab8:	3014      	adds	r0, #20
 8007aba:	3114      	adds	r1, #20
 8007abc:	1884      	adds	r4, r0, r2
 8007abe:	4411      	add	r1, r2
 8007ac0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007ac4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007ac8:	4295      	cmp	r5, r2
 8007aca:	d003      	beq.n	8007ad4 <__mcmp+0x28>
 8007acc:	d305      	bcc.n	8007ada <__mcmp+0x2e>
 8007ace:	2301      	movs	r3, #1
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	bd30      	pop	{r4, r5, pc}
 8007ad4:	42a0      	cmp	r0, r4
 8007ad6:	d3f3      	bcc.n	8007ac0 <__mcmp+0x14>
 8007ad8:	e7fa      	b.n	8007ad0 <__mcmp+0x24>
 8007ada:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007ade:	e7f7      	b.n	8007ad0 <__mcmp+0x24>

08007ae0 <__mdiff>:
 8007ae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ae4:	460d      	mov	r5, r1
 8007ae6:	4607      	mov	r7, r0
 8007ae8:	4611      	mov	r1, r2
 8007aea:	4628      	mov	r0, r5
 8007aec:	4614      	mov	r4, r2
 8007aee:	f7ff ffdd 	bl	8007aac <__mcmp>
 8007af2:	1e06      	subs	r6, r0, #0
 8007af4:	d108      	bne.n	8007b08 <__mdiff+0x28>
 8007af6:	4631      	mov	r1, r6
 8007af8:	4638      	mov	r0, r7
 8007afa:	f7ff fd83 	bl	8007604 <_Balloc>
 8007afe:	2301      	movs	r3, #1
 8007b00:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007b04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b08:	bfa4      	itt	ge
 8007b0a:	4623      	movge	r3, r4
 8007b0c:	462c      	movge	r4, r5
 8007b0e:	4638      	mov	r0, r7
 8007b10:	6861      	ldr	r1, [r4, #4]
 8007b12:	bfa6      	itte	ge
 8007b14:	461d      	movge	r5, r3
 8007b16:	2600      	movge	r6, #0
 8007b18:	2601      	movlt	r6, #1
 8007b1a:	f7ff fd73 	bl	8007604 <_Balloc>
 8007b1e:	692b      	ldr	r3, [r5, #16]
 8007b20:	60c6      	str	r6, [r0, #12]
 8007b22:	6926      	ldr	r6, [r4, #16]
 8007b24:	f105 0914 	add.w	r9, r5, #20
 8007b28:	f104 0214 	add.w	r2, r4, #20
 8007b2c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007b30:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007b34:	f100 0514 	add.w	r5, r0, #20
 8007b38:	f04f 0e00 	mov.w	lr, #0
 8007b3c:	f852 ab04 	ldr.w	sl, [r2], #4
 8007b40:	f859 4b04 	ldr.w	r4, [r9], #4
 8007b44:	fa1e f18a 	uxtah	r1, lr, sl
 8007b48:	b2a3      	uxth	r3, r4
 8007b4a:	1ac9      	subs	r1, r1, r3
 8007b4c:	0c23      	lsrs	r3, r4, #16
 8007b4e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8007b52:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007b56:	b289      	uxth	r1, r1
 8007b58:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8007b5c:	45c8      	cmp	r8, r9
 8007b5e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007b62:	4694      	mov	ip, r2
 8007b64:	f845 3b04 	str.w	r3, [r5], #4
 8007b68:	d8e8      	bhi.n	8007b3c <__mdiff+0x5c>
 8007b6a:	45bc      	cmp	ip, r7
 8007b6c:	d304      	bcc.n	8007b78 <__mdiff+0x98>
 8007b6e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8007b72:	b183      	cbz	r3, 8007b96 <__mdiff+0xb6>
 8007b74:	6106      	str	r6, [r0, #16]
 8007b76:	e7c5      	b.n	8007b04 <__mdiff+0x24>
 8007b78:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007b7c:	fa1e f381 	uxtah	r3, lr, r1
 8007b80:	141a      	asrs	r2, r3, #16
 8007b82:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007b86:	b29b      	uxth	r3, r3
 8007b88:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007b8c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8007b90:	f845 3b04 	str.w	r3, [r5], #4
 8007b94:	e7e9      	b.n	8007b6a <__mdiff+0x8a>
 8007b96:	3e01      	subs	r6, #1
 8007b98:	e7e9      	b.n	8007b6e <__mdiff+0x8e>
	...

08007b9c <__ulp>:
 8007b9c:	4b12      	ldr	r3, [pc, #72]	; (8007be8 <__ulp+0x4c>)
 8007b9e:	ee10 2a90 	vmov	r2, s1
 8007ba2:	401a      	ands	r2, r3
 8007ba4:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	dd04      	ble.n	8007bb6 <__ulp+0x1a>
 8007bac:	2000      	movs	r0, #0
 8007bae:	4619      	mov	r1, r3
 8007bb0:	ec41 0b10 	vmov	d0, r0, r1
 8007bb4:	4770      	bx	lr
 8007bb6:	425b      	negs	r3, r3
 8007bb8:	151b      	asrs	r3, r3, #20
 8007bba:	2b13      	cmp	r3, #19
 8007bbc:	f04f 0000 	mov.w	r0, #0
 8007bc0:	f04f 0100 	mov.w	r1, #0
 8007bc4:	dc04      	bgt.n	8007bd0 <__ulp+0x34>
 8007bc6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007bca:	fa42 f103 	asr.w	r1, r2, r3
 8007bce:	e7ef      	b.n	8007bb0 <__ulp+0x14>
 8007bd0:	3b14      	subs	r3, #20
 8007bd2:	2b1e      	cmp	r3, #30
 8007bd4:	f04f 0201 	mov.w	r2, #1
 8007bd8:	bfda      	itte	le
 8007bda:	f1c3 031f 	rsble	r3, r3, #31
 8007bde:	fa02 f303 	lslle.w	r3, r2, r3
 8007be2:	4613      	movgt	r3, r2
 8007be4:	4618      	mov	r0, r3
 8007be6:	e7e3      	b.n	8007bb0 <__ulp+0x14>
 8007be8:	7ff00000 	.word	0x7ff00000

08007bec <__b2d>:
 8007bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bee:	6905      	ldr	r5, [r0, #16]
 8007bf0:	f100 0714 	add.w	r7, r0, #20
 8007bf4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8007bf8:	1f2e      	subs	r6, r5, #4
 8007bfa:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8007bfe:	4620      	mov	r0, r4
 8007c00:	f7ff fdc4 	bl	800778c <__hi0bits>
 8007c04:	f1c0 0320 	rsb	r3, r0, #32
 8007c08:	280a      	cmp	r0, #10
 8007c0a:	600b      	str	r3, [r1, #0]
 8007c0c:	f8df c074 	ldr.w	ip, [pc, #116]	; 8007c84 <__b2d+0x98>
 8007c10:	dc14      	bgt.n	8007c3c <__b2d+0x50>
 8007c12:	f1c0 0e0b 	rsb	lr, r0, #11
 8007c16:	fa24 f10e 	lsr.w	r1, r4, lr
 8007c1a:	42b7      	cmp	r7, r6
 8007c1c:	ea41 030c 	orr.w	r3, r1, ip
 8007c20:	bf34      	ite	cc
 8007c22:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007c26:	2100      	movcs	r1, #0
 8007c28:	3015      	adds	r0, #21
 8007c2a:	fa04 f000 	lsl.w	r0, r4, r0
 8007c2e:	fa21 f10e 	lsr.w	r1, r1, lr
 8007c32:	ea40 0201 	orr.w	r2, r0, r1
 8007c36:	ec43 2b10 	vmov	d0, r2, r3
 8007c3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c3c:	42b7      	cmp	r7, r6
 8007c3e:	bf3a      	itte	cc
 8007c40:	f1a5 0608 	subcc.w	r6, r5, #8
 8007c44:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007c48:	2100      	movcs	r1, #0
 8007c4a:	380b      	subs	r0, #11
 8007c4c:	d015      	beq.n	8007c7a <__b2d+0x8e>
 8007c4e:	4084      	lsls	r4, r0
 8007c50:	f1c0 0520 	rsb	r5, r0, #32
 8007c54:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8007c58:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8007c5c:	42be      	cmp	r6, r7
 8007c5e:	fa21 fc05 	lsr.w	ip, r1, r5
 8007c62:	ea44 030c 	orr.w	r3, r4, ip
 8007c66:	bf8c      	ite	hi
 8007c68:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8007c6c:	2400      	movls	r4, #0
 8007c6e:	fa01 f000 	lsl.w	r0, r1, r0
 8007c72:	40ec      	lsrs	r4, r5
 8007c74:	ea40 0204 	orr.w	r2, r0, r4
 8007c78:	e7dd      	b.n	8007c36 <__b2d+0x4a>
 8007c7a:	ea44 030c 	orr.w	r3, r4, ip
 8007c7e:	460a      	mov	r2, r1
 8007c80:	e7d9      	b.n	8007c36 <__b2d+0x4a>
 8007c82:	bf00      	nop
 8007c84:	3ff00000 	.word	0x3ff00000

08007c88 <__d2b>:
 8007c88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007c8c:	460e      	mov	r6, r1
 8007c8e:	2101      	movs	r1, #1
 8007c90:	ec59 8b10 	vmov	r8, r9, d0
 8007c94:	4615      	mov	r5, r2
 8007c96:	f7ff fcb5 	bl	8007604 <_Balloc>
 8007c9a:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007c9e:	4607      	mov	r7, r0
 8007ca0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007ca4:	bb34      	cbnz	r4, 8007cf4 <__d2b+0x6c>
 8007ca6:	9301      	str	r3, [sp, #4]
 8007ca8:	f1b8 0300 	subs.w	r3, r8, #0
 8007cac:	d027      	beq.n	8007cfe <__d2b+0x76>
 8007cae:	a802      	add	r0, sp, #8
 8007cb0:	f840 3d08 	str.w	r3, [r0, #-8]!
 8007cb4:	f7ff fd89 	bl	80077ca <__lo0bits>
 8007cb8:	9900      	ldr	r1, [sp, #0]
 8007cba:	b1f0      	cbz	r0, 8007cfa <__d2b+0x72>
 8007cbc:	9a01      	ldr	r2, [sp, #4]
 8007cbe:	f1c0 0320 	rsb	r3, r0, #32
 8007cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8007cc6:	430b      	orrs	r3, r1
 8007cc8:	40c2      	lsrs	r2, r0
 8007cca:	617b      	str	r3, [r7, #20]
 8007ccc:	9201      	str	r2, [sp, #4]
 8007cce:	9b01      	ldr	r3, [sp, #4]
 8007cd0:	61bb      	str	r3, [r7, #24]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	bf14      	ite	ne
 8007cd6:	2102      	movne	r1, #2
 8007cd8:	2101      	moveq	r1, #1
 8007cda:	6139      	str	r1, [r7, #16]
 8007cdc:	b1c4      	cbz	r4, 8007d10 <__d2b+0x88>
 8007cde:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007ce2:	4404      	add	r4, r0
 8007ce4:	6034      	str	r4, [r6, #0]
 8007ce6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007cea:	6028      	str	r0, [r5, #0]
 8007cec:	4638      	mov	r0, r7
 8007cee:	b003      	add	sp, #12
 8007cf0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007cf4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007cf8:	e7d5      	b.n	8007ca6 <__d2b+0x1e>
 8007cfa:	6179      	str	r1, [r7, #20]
 8007cfc:	e7e7      	b.n	8007cce <__d2b+0x46>
 8007cfe:	a801      	add	r0, sp, #4
 8007d00:	f7ff fd63 	bl	80077ca <__lo0bits>
 8007d04:	9b01      	ldr	r3, [sp, #4]
 8007d06:	617b      	str	r3, [r7, #20]
 8007d08:	2101      	movs	r1, #1
 8007d0a:	6139      	str	r1, [r7, #16]
 8007d0c:	3020      	adds	r0, #32
 8007d0e:	e7e5      	b.n	8007cdc <__d2b+0x54>
 8007d10:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8007d14:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007d18:	6030      	str	r0, [r6, #0]
 8007d1a:	6918      	ldr	r0, [r3, #16]
 8007d1c:	f7ff fd36 	bl	800778c <__hi0bits>
 8007d20:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007d24:	e7e1      	b.n	8007cea <__d2b+0x62>

08007d26 <__ratio>:
 8007d26:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d2a:	4688      	mov	r8, r1
 8007d2c:	4669      	mov	r1, sp
 8007d2e:	4681      	mov	r9, r0
 8007d30:	f7ff ff5c 	bl	8007bec <__b2d>
 8007d34:	a901      	add	r1, sp, #4
 8007d36:	4640      	mov	r0, r8
 8007d38:	ec57 6b10 	vmov	r6, r7, d0
 8007d3c:	f7ff ff56 	bl	8007bec <__b2d>
 8007d40:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007d44:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007d48:	eba3 0c02 	sub.w	ip, r3, r2
 8007d4c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007d50:	1a9b      	subs	r3, r3, r2
 8007d52:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007d56:	ec5b ab10 	vmov	sl, fp, d0
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	bfce      	itee	gt
 8007d5e:	463a      	movgt	r2, r7
 8007d60:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007d64:	465a      	movle	r2, fp
 8007d66:	4659      	mov	r1, fp
 8007d68:	463d      	mov	r5, r7
 8007d6a:	bfd4      	ite	le
 8007d6c:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8007d70:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8007d74:	4630      	mov	r0, r6
 8007d76:	ee10 2a10 	vmov	r2, s0
 8007d7a:	460b      	mov	r3, r1
 8007d7c:	4629      	mov	r1, r5
 8007d7e:	f7f8 fd65 	bl	800084c <__aeabi_ddiv>
 8007d82:	ec41 0b10 	vmov	d0, r0, r1
 8007d86:	b003      	add	sp, #12
 8007d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007d8c <__copybits>:
 8007d8c:	3901      	subs	r1, #1
 8007d8e:	b510      	push	{r4, lr}
 8007d90:	1149      	asrs	r1, r1, #5
 8007d92:	6914      	ldr	r4, [r2, #16]
 8007d94:	3101      	adds	r1, #1
 8007d96:	f102 0314 	add.w	r3, r2, #20
 8007d9a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007d9e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007da2:	42a3      	cmp	r3, r4
 8007da4:	4602      	mov	r2, r0
 8007da6:	d303      	bcc.n	8007db0 <__copybits+0x24>
 8007da8:	2300      	movs	r3, #0
 8007daa:	428a      	cmp	r2, r1
 8007dac:	d305      	bcc.n	8007dba <__copybits+0x2e>
 8007dae:	bd10      	pop	{r4, pc}
 8007db0:	f853 2b04 	ldr.w	r2, [r3], #4
 8007db4:	f840 2b04 	str.w	r2, [r0], #4
 8007db8:	e7f3      	b.n	8007da2 <__copybits+0x16>
 8007dba:	f842 3b04 	str.w	r3, [r2], #4
 8007dbe:	e7f4      	b.n	8007daa <__copybits+0x1e>

08007dc0 <__any_on>:
 8007dc0:	f100 0214 	add.w	r2, r0, #20
 8007dc4:	6900      	ldr	r0, [r0, #16]
 8007dc6:	114b      	asrs	r3, r1, #5
 8007dc8:	4298      	cmp	r0, r3
 8007dca:	b510      	push	{r4, lr}
 8007dcc:	db11      	blt.n	8007df2 <__any_on+0x32>
 8007dce:	dd0a      	ble.n	8007de6 <__any_on+0x26>
 8007dd0:	f011 011f 	ands.w	r1, r1, #31
 8007dd4:	d007      	beq.n	8007de6 <__any_on+0x26>
 8007dd6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007dda:	fa24 f001 	lsr.w	r0, r4, r1
 8007dde:	fa00 f101 	lsl.w	r1, r0, r1
 8007de2:	428c      	cmp	r4, r1
 8007de4:	d10b      	bne.n	8007dfe <__any_on+0x3e>
 8007de6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d803      	bhi.n	8007df6 <__any_on+0x36>
 8007dee:	2000      	movs	r0, #0
 8007df0:	bd10      	pop	{r4, pc}
 8007df2:	4603      	mov	r3, r0
 8007df4:	e7f7      	b.n	8007de6 <__any_on+0x26>
 8007df6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007dfa:	2900      	cmp	r1, #0
 8007dfc:	d0f5      	beq.n	8007dea <__any_on+0x2a>
 8007dfe:	2001      	movs	r0, #1
 8007e00:	e7f6      	b.n	8007df0 <__any_on+0x30>

08007e02 <_calloc_r>:
 8007e02:	b538      	push	{r3, r4, r5, lr}
 8007e04:	fb02 f401 	mul.w	r4, r2, r1
 8007e08:	4621      	mov	r1, r4
 8007e0a:	f000 f857 	bl	8007ebc <_malloc_r>
 8007e0e:	4605      	mov	r5, r0
 8007e10:	b118      	cbz	r0, 8007e1a <_calloc_r+0x18>
 8007e12:	4622      	mov	r2, r4
 8007e14:	2100      	movs	r1, #0
 8007e16:	f7fc fa26 	bl	8004266 <memset>
 8007e1a:	4628      	mov	r0, r5
 8007e1c:	bd38      	pop	{r3, r4, r5, pc}
	...

08007e20 <_free_r>:
 8007e20:	b538      	push	{r3, r4, r5, lr}
 8007e22:	4605      	mov	r5, r0
 8007e24:	2900      	cmp	r1, #0
 8007e26:	d045      	beq.n	8007eb4 <_free_r+0x94>
 8007e28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e2c:	1f0c      	subs	r4, r1, #4
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	bfb8      	it	lt
 8007e32:	18e4      	addlt	r4, r4, r3
 8007e34:	f000 fc0f 	bl	8008656 <__malloc_lock>
 8007e38:	4a1f      	ldr	r2, [pc, #124]	; (8007eb8 <_free_r+0x98>)
 8007e3a:	6813      	ldr	r3, [r2, #0]
 8007e3c:	4610      	mov	r0, r2
 8007e3e:	b933      	cbnz	r3, 8007e4e <_free_r+0x2e>
 8007e40:	6063      	str	r3, [r4, #4]
 8007e42:	6014      	str	r4, [r2, #0]
 8007e44:	4628      	mov	r0, r5
 8007e46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e4a:	f000 bc05 	b.w	8008658 <__malloc_unlock>
 8007e4e:	42a3      	cmp	r3, r4
 8007e50:	d90c      	bls.n	8007e6c <_free_r+0x4c>
 8007e52:	6821      	ldr	r1, [r4, #0]
 8007e54:	1862      	adds	r2, r4, r1
 8007e56:	4293      	cmp	r3, r2
 8007e58:	bf04      	itt	eq
 8007e5a:	681a      	ldreq	r2, [r3, #0]
 8007e5c:	685b      	ldreq	r3, [r3, #4]
 8007e5e:	6063      	str	r3, [r4, #4]
 8007e60:	bf04      	itt	eq
 8007e62:	1852      	addeq	r2, r2, r1
 8007e64:	6022      	streq	r2, [r4, #0]
 8007e66:	6004      	str	r4, [r0, #0]
 8007e68:	e7ec      	b.n	8007e44 <_free_r+0x24>
 8007e6a:	4613      	mov	r3, r2
 8007e6c:	685a      	ldr	r2, [r3, #4]
 8007e6e:	b10a      	cbz	r2, 8007e74 <_free_r+0x54>
 8007e70:	42a2      	cmp	r2, r4
 8007e72:	d9fa      	bls.n	8007e6a <_free_r+0x4a>
 8007e74:	6819      	ldr	r1, [r3, #0]
 8007e76:	1858      	adds	r0, r3, r1
 8007e78:	42a0      	cmp	r0, r4
 8007e7a:	d10b      	bne.n	8007e94 <_free_r+0x74>
 8007e7c:	6820      	ldr	r0, [r4, #0]
 8007e7e:	4401      	add	r1, r0
 8007e80:	1858      	adds	r0, r3, r1
 8007e82:	4282      	cmp	r2, r0
 8007e84:	6019      	str	r1, [r3, #0]
 8007e86:	d1dd      	bne.n	8007e44 <_free_r+0x24>
 8007e88:	6810      	ldr	r0, [r2, #0]
 8007e8a:	6852      	ldr	r2, [r2, #4]
 8007e8c:	605a      	str	r2, [r3, #4]
 8007e8e:	4401      	add	r1, r0
 8007e90:	6019      	str	r1, [r3, #0]
 8007e92:	e7d7      	b.n	8007e44 <_free_r+0x24>
 8007e94:	d902      	bls.n	8007e9c <_free_r+0x7c>
 8007e96:	230c      	movs	r3, #12
 8007e98:	602b      	str	r3, [r5, #0]
 8007e9a:	e7d3      	b.n	8007e44 <_free_r+0x24>
 8007e9c:	6820      	ldr	r0, [r4, #0]
 8007e9e:	1821      	adds	r1, r4, r0
 8007ea0:	428a      	cmp	r2, r1
 8007ea2:	bf04      	itt	eq
 8007ea4:	6811      	ldreq	r1, [r2, #0]
 8007ea6:	6852      	ldreq	r2, [r2, #4]
 8007ea8:	6062      	str	r2, [r4, #4]
 8007eaa:	bf04      	itt	eq
 8007eac:	1809      	addeq	r1, r1, r0
 8007eae:	6021      	streq	r1, [r4, #0]
 8007eb0:	605c      	str	r4, [r3, #4]
 8007eb2:	e7c7      	b.n	8007e44 <_free_r+0x24>
 8007eb4:	bd38      	pop	{r3, r4, r5, pc}
 8007eb6:	bf00      	nop
 8007eb8:	200001fc 	.word	0x200001fc

08007ebc <_malloc_r>:
 8007ebc:	b570      	push	{r4, r5, r6, lr}
 8007ebe:	1ccd      	adds	r5, r1, #3
 8007ec0:	f025 0503 	bic.w	r5, r5, #3
 8007ec4:	3508      	adds	r5, #8
 8007ec6:	2d0c      	cmp	r5, #12
 8007ec8:	bf38      	it	cc
 8007eca:	250c      	movcc	r5, #12
 8007ecc:	2d00      	cmp	r5, #0
 8007ece:	4606      	mov	r6, r0
 8007ed0:	db01      	blt.n	8007ed6 <_malloc_r+0x1a>
 8007ed2:	42a9      	cmp	r1, r5
 8007ed4:	d903      	bls.n	8007ede <_malloc_r+0x22>
 8007ed6:	230c      	movs	r3, #12
 8007ed8:	6033      	str	r3, [r6, #0]
 8007eda:	2000      	movs	r0, #0
 8007edc:	bd70      	pop	{r4, r5, r6, pc}
 8007ede:	f000 fbba 	bl	8008656 <__malloc_lock>
 8007ee2:	4a21      	ldr	r2, [pc, #132]	; (8007f68 <_malloc_r+0xac>)
 8007ee4:	6814      	ldr	r4, [r2, #0]
 8007ee6:	4621      	mov	r1, r4
 8007ee8:	b991      	cbnz	r1, 8007f10 <_malloc_r+0x54>
 8007eea:	4c20      	ldr	r4, [pc, #128]	; (8007f6c <_malloc_r+0xb0>)
 8007eec:	6823      	ldr	r3, [r4, #0]
 8007eee:	b91b      	cbnz	r3, 8007ef8 <_malloc_r+0x3c>
 8007ef0:	4630      	mov	r0, r6
 8007ef2:	f000 facf 	bl	8008494 <_sbrk_r>
 8007ef6:	6020      	str	r0, [r4, #0]
 8007ef8:	4629      	mov	r1, r5
 8007efa:	4630      	mov	r0, r6
 8007efc:	f000 faca 	bl	8008494 <_sbrk_r>
 8007f00:	1c43      	adds	r3, r0, #1
 8007f02:	d124      	bne.n	8007f4e <_malloc_r+0x92>
 8007f04:	230c      	movs	r3, #12
 8007f06:	6033      	str	r3, [r6, #0]
 8007f08:	4630      	mov	r0, r6
 8007f0a:	f000 fba5 	bl	8008658 <__malloc_unlock>
 8007f0e:	e7e4      	b.n	8007eda <_malloc_r+0x1e>
 8007f10:	680b      	ldr	r3, [r1, #0]
 8007f12:	1b5b      	subs	r3, r3, r5
 8007f14:	d418      	bmi.n	8007f48 <_malloc_r+0x8c>
 8007f16:	2b0b      	cmp	r3, #11
 8007f18:	d90f      	bls.n	8007f3a <_malloc_r+0x7e>
 8007f1a:	600b      	str	r3, [r1, #0]
 8007f1c:	50cd      	str	r5, [r1, r3]
 8007f1e:	18cc      	adds	r4, r1, r3
 8007f20:	4630      	mov	r0, r6
 8007f22:	f000 fb99 	bl	8008658 <__malloc_unlock>
 8007f26:	f104 000b 	add.w	r0, r4, #11
 8007f2a:	1d23      	adds	r3, r4, #4
 8007f2c:	f020 0007 	bic.w	r0, r0, #7
 8007f30:	1ac3      	subs	r3, r0, r3
 8007f32:	d0d3      	beq.n	8007edc <_malloc_r+0x20>
 8007f34:	425a      	negs	r2, r3
 8007f36:	50e2      	str	r2, [r4, r3]
 8007f38:	e7d0      	b.n	8007edc <_malloc_r+0x20>
 8007f3a:	428c      	cmp	r4, r1
 8007f3c:	684b      	ldr	r3, [r1, #4]
 8007f3e:	bf16      	itet	ne
 8007f40:	6063      	strne	r3, [r4, #4]
 8007f42:	6013      	streq	r3, [r2, #0]
 8007f44:	460c      	movne	r4, r1
 8007f46:	e7eb      	b.n	8007f20 <_malloc_r+0x64>
 8007f48:	460c      	mov	r4, r1
 8007f4a:	6849      	ldr	r1, [r1, #4]
 8007f4c:	e7cc      	b.n	8007ee8 <_malloc_r+0x2c>
 8007f4e:	1cc4      	adds	r4, r0, #3
 8007f50:	f024 0403 	bic.w	r4, r4, #3
 8007f54:	42a0      	cmp	r0, r4
 8007f56:	d005      	beq.n	8007f64 <_malloc_r+0xa8>
 8007f58:	1a21      	subs	r1, r4, r0
 8007f5a:	4630      	mov	r0, r6
 8007f5c:	f000 fa9a 	bl	8008494 <_sbrk_r>
 8007f60:	3001      	adds	r0, #1
 8007f62:	d0cf      	beq.n	8007f04 <_malloc_r+0x48>
 8007f64:	6025      	str	r5, [r4, #0]
 8007f66:	e7db      	b.n	8007f20 <_malloc_r+0x64>
 8007f68:	200001fc 	.word	0x200001fc
 8007f6c:	20000200 	.word	0x20000200

08007f70 <__ssputs_r>:
 8007f70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f74:	688e      	ldr	r6, [r1, #8]
 8007f76:	429e      	cmp	r6, r3
 8007f78:	4682      	mov	sl, r0
 8007f7a:	460c      	mov	r4, r1
 8007f7c:	4690      	mov	r8, r2
 8007f7e:	4699      	mov	r9, r3
 8007f80:	d837      	bhi.n	8007ff2 <__ssputs_r+0x82>
 8007f82:	898a      	ldrh	r2, [r1, #12]
 8007f84:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007f88:	d031      	beq.n	8007fee <__ssputs_r+0x7e>
 8007f8a:	6825      	ldr	r5, [r4, #0]
 8007f8c:	6909      	ldr	r1, [r1, #16]
 8007f8e:	1a6f      	subs	r7, r5, r1
 8007f90:	6965      	ldr	r5, [r4, #20]
 8007f92:	2302      	movs	r3, #2
 8007f94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007f98:	fb95 f5f3 	sdiv	r5, r5, r3
 8007f9c:	f109 0301 	add.w	r3, r9, #1
 8007fa0:	443b      	add	r3, r7
 8007fa2:	429d      	cmp	r5, r3
 8007fa4:	bf38      	it	cc
 8007fa6:	461d      	movcc	r5, r3
 8007fa8:	0553      	lsls	r3, r2, #21
 8007faa:	d530      	bpl.n	800800e <__ssputs_r+0x9e>
 8007fac:	4629      	mov	r1, r5
 8007fae:	f7ff ff85 	bl	8007ebc <_malloc_r>
 8007fb2:	4606      	mov	r6, r0
 8007fb4:	b950      	cbnz	r0, 8007fcc <__ssputs_r+0x5c>
 8007fb6:	230c      	movs	r3, #12
 8007fb8:	f8ca 3000 	str.w	r3, [sl]
 8007fbc:	89a3      	ldrh	r3, [r4, #12]
 8007fbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fc2:	81a3      	strh	r3, [r4, #12]
 8007fc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007fc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fcc:	463a      	mov	r2, r7
 8007fce:	6921      	ldr	r1, [r4, #16]
 8007fd0:	f7fc f93e 	bl	8004250 <memcpy>
 8007fd4:	89a3      	ldrh	r3, [r4, #12]
 8007fd6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007fda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fde:	81a3      	strh	r3, [r4, #12]
 8007fe0:	6126      	str	r6, [r4, #16]
 8007fe2:	6165      	str	r5, [r4, #20]
 8007fe4:	443e      	add	r6, r7
 8007fe6:	1bed      	subs	r5, r5, r7
 8007fe8:	6026      	str	r6, [r4, #0]
 8007fea:	60a5      	str	r5, [r4, #8]
 8007fec:	464e      	mov	r6, r9
 8007fee:	454e      	cmp	r6, r9
 8007ff0:	d900      	bls.n	8007ff4 <__ssputs_r+0x84>
 8007ff2:	464e      	mov	r6, r9
 8007ff4:	4632      	mov	r2, r6
 8007ff6:	4641      	mov	r1, r8
 8007ff8:	6820      	ldr	r0, [r4, #0]
 8007ffa:	f000 fb13 	bl	8008624 <memmove>
 8007ffe:	68a3      	ldr	r3, [r4, #8]
 8008000:	1b9b      	subs	r3, r3, r6
 8008002:	60a3      	str	r3, [r4, #8]
 8008004:	6823      	ldr	r3, [r4, #0]
 8008006:	441e      	add	r6, r3
 8008008:	6026      	str	r6, [r4, #0]
 800800a:	2000      	movs	r0, #0
 800800c:	e7dc      	b.n	8007fc8 <__ssputs_r+0x58>
 800800e:	462a      	mov	r2, r5
 8008010:	f000 fb23 	bl	800865a <_realloc_r>
 8008014:	4606      	mov	r6, r0
 8008016:	2800      	cmp	r0, #0
 8008018:	d1e2      	bne.n	8007fe0 <__ssputs_r+0x70>
 800801a:	6921      	ldr	r1, [r4, #16]
 800801c:	4650      	mov	r0, sl
 800801e:	f7ff feff 	bl	8007e20 <_free_r>
 8008022:	e7c8      	b.n	8007fb6 <__ssputs_r+0x46>

08008024 <_svfiprintf_r>:
 8008024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008028:	461d      	mov	r5, r3
 800802a:	898b      	ldrh	r3, [r1, #12]
 800802c:	061f      	lsls	r7, r3, #24
 800802e:	b09d      	sub	sp, #116	; 0x74
 8008030:	4680      	mov	r8, r0
 8008032:	460c      	mov	r4, r1
 8008034:	4616      	mov	r6, r2
 8008036:	d50f      	bpl.n	8008058 <_svfiprintf_r+0x34>
 8008038:	690b      	ldr	r3, [r1, #16]
 800803a:	b96b      	cbnz	r3, 8008058 <_svfiprintf_r+0x34>
 800803c:	2140      	movs	r1, #64	; 0x40
 800803e:	f7ff ff3d 	bl	8007ebc <_malloc_r>
 8008042:	6020      	str	r0, [r4, #0]
 8008044:	6120      	str	r0, [r4, #16]
 8008046:	b928      	cbnz	r0, 8008054 <_svfiprintf_r+0x30>
 8008048:	230c      	movs	r3, #12
 800804a:	f8c8 3000 	str.w	r3, [r8]
 800804e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008052:	e0c8      	b.n	80081e6 <_svfiprintf_r+0x1c2>
 8008054:	2340      	movs	r3, #64	; 0x40
 8008056:	6163      	str	r3, [r4, #20]
 8008058:	2300      	movs	r3, #0
 800805a:	9309      	str	r3, [sp, #36]	; 0x24
 800805c:	2320      	movs	r3, #32
 800805e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008062:	2330      	movs	r3, #48	; 0x30
 8008064:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008068:	9503      	str	r5, [sp, #12]
 800806a:	f04f 0b01 	mov.w	fp, #1
 800806e:	4637      	mov	r7, r6
 8008070:	463d      	mov	r5, r7
 8008072:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008076:	b10b      	cbz	r3, 800807c <_svfiprintf_r+0x58>
 8008078:	2b25      	cmp	r3, #37	; 0x25
 800807a:	d13e      	bne.n	80080fa <_svfiprintf_r+0xd6>
 800807c:	ebb7 0a06 	subs.w	sl, r7, r6
 8008080:	d00b      	beq.n	800809a <_svfiprintf_r+0x76>
 8008082:	4653      	mov	r3, sl
 8008084:	4632      	mov	r2, r6
 8008086:	4621      	mov	r1, r4
 8008088:	4640      	mov	r0, r8
 800808a:	f7ff ff71 	bl	8007f70 <__ssputs_r>
 800808e:	3001      	adds	r0, #1
 8008090:	f000 80a4 	beq.w	80081dc <_svfiprintf_r+0x1b8>
 8008094:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008096:	4453      	add	r3, sl
 8008098:	9309      	str	r3, [sp, #36]	; 0x24
 800809a:	783b      	ldrb	r3, [r7, #0]
 800809c:	2b00      	cmp	r3, #0
 800809e:	f000 809d 	beq.w	80081dc <_svfiprintf_r+0x1b8>
 80080a2:	2300      	movs	r3, #0
 80080a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80080a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80080ac:	9304      	str	r3, [sp, #16]
 80080ae:	9307      	str	r3, [sp, #28]
 80080b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80080b4:	931a      	str	r3, [sp, #104]	; 0x68
 80080b6:	462f      	mov	r7, r5
 80080b8:	2205      	movs	r2, #5
 80080ba:	f817 1b01 	ldrb.w	r1, [r7], #1
 80080be:	4850      	ldr	r0, [pc, #320]	; (8008200 <_svfiprintf_r+0x1dc>)
 80080c0:	f7f8 f88e 	bl	80001e0 <memchr>
 80080c4:	9b04      	ldr	r3, [sp, #16]
 80080c6:	b9d0      	cbnz	r0, 80080fe <_svfiprintf_r+0xda>
 80080c8:	06d9      	lsls	r1, r3, #27
 80080ca:	bf44      	itt	mi
 80080cc:	2220      	movmi	r2, #32
 80080ce:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80080d2:	071a      	lsls	r2, r3, #28
 80080d4:	bf44      	itt	mi
 80080d6:	222b      	movmi	r2, #43	; 0x2b
 80080d8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80080dc:	782a      	ldrb	r2, [r5, #0]
 80080de:	2a2a      	cmp	r2, #42	; 0x2a
 80080e0:	d015      	beq.n	800810e <_svfiprintf_r+0xea>
 80080e2:	9a07      	ldr	r2, [sp, #28]
 80080e4:	462f      	mov	r7, r5
 80080e6:	2000      	movs	r0, #0
 80080e8:	250a      	movs	r5, #10
 80080ea:	4639      	mov	r1, r7
 80080ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80080f0:	3b30      	subs	r3, #48	; 0x30
 80080f2:	2b09      	cmp	r3, #9
 80080f4:	d94d      	bls.n	8008192 <_svfiprintf_r+0x16e>
 80080f6:	b1b8      	cbz	r0, 8008128 <_svfiprintf_r+0x104>
 80080f8:	e00f      	b.n	800811a <_svfiprintf_r+0xf6>
 80080fa:	462f      	mov	r7, r5
 80080fc:	e7b8      	b.n	8008070 <_svfiprintf_r+0x4c>
 80080fe:	4a40      	ldr	r2, [pc, #256]	; (8008200 <_svfiprintf_r+0x1dc>)
 8008100:	1a80      	subs	r0, r0, r2
 8008102:	fa0b f000 	lsl.w	r0, fp, r0
 8008106:	4318      	orrs	r0, r3
 8008108:	9004      	str	r0, [sp, #16]
 800810a:	463d      	mov	r5, r7
 800810c:	e7d3      	b.n	80080b6 <_svfiprintf_r+0x92>
 800810e:	9a03      	ldr	r2, [sp, #12]
 8008110:	1d11      	adds	r1, r2, #4
 8008112:	6812      	ldr	r2, [r2, #0]
 8008114:	9103      	str	r1, [sp, #12]
 8008116:	2a00      	cmp	r2, #0
 8008118:	db01      	blt.n	800811e <_svfiprintf_r+0xfa>
 800811a:	9207      	str	r2, [sp, #28]
 800811c:	e004      	b.n	8008128 <_svfiprintf_r+0x104>
 800811e:	4252      	negs	r2, r2
 8008120:	f043 0302 	orr.w	r3, r3, #2
 8008124:	9207      	str	r2, [sp, #28]
 8008126:	9304      	str	r3, [sp, #16]
 8008128:	783b      	ldrb	r3, [r7, #0]
 800812a:	2b2e      	cmp	r3, #46	; 0x2e
 800812c:	d10c      	bne.n	8008148 <_svfiprintf_r+0x124>
 800812e:	787b      	ldrb	r3, [r7, #1]
 8008130:	2b2a      	cmp	r3, #42	; 0x2a
 8008132:	d133      	bne.n	800819c <_svfiprintf_r+0x178>
 8008134:	9b03      	ldr	r3, [sp, #12]
 8008136:	1d1a      	adds	r2, r3, #4
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	9203      	str	r2, [sp, #12]
 800813c:	2b00      	cmp	r3, #0
 800813e:	bfb8      	it	lt
 8008140:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008144:	3702      	adds	r7, #2
 8008146:	9305      	str	r3, [sp, #20]
 8008148:	4d2e      	ldr	r5, [pc, #184]	; (8008204 <_svfiprintf_r+0x1e0>)
 800814a:	7839      	ldrb	r1, [r7, #0]
 800814c:	2203      	movs	r2, #3
 800814e:	4628      	mov	r0, r5
 8008150:	f7f8 f846 	bl	80001e0 <memchr>
 8008154:	b138      	cbz	r0, 8008166 <_svfiprintf_r+0x142>
 8008156:	2340      	movs	r3, #64	; 0x40
 8008158:	1b40      	subs	r0, r0, r5
 800815a:	fa03 f000 	lsl.w	r0, r3, r0
 800815e:	9b04      	ldr	r3, [sp, #16]
 8008160:	4303      	orrs	r3, r0
 8008162:	3701      	adds	r7, #1
 8008164:	9304      	str	r3, [sp, #16]
 8008166:	7839      	ldrb	r1, [r7, #0]
 8008168:	4827      	ldr	r0, [pc, #156]	; (8008208 <_svfiprintf_r+0x1e4>)
 800816a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800816e:	2206      	movs	r2, #6
 8008170:	1c7e      	adds	r6, r7, #1
 8008172:	f7f8 f835 	bl	80001e0 <memchr>
 8008176:	2800      	cmp	r0, #0
 8008178:	d038      	beq.n	80081ec <_svfiprintf_r+0x1c8>
 800817a:	4b24      	ldr	r3, [pc, #144]	; (800820c <_svfiprintf_r+0x1e8>)
 800817c:	bb13      	cbnz	r3, 80081c4 <_svfiprintf_r+0x1a0>
 800817e:	9b03      	ldr	r3, [sp, #12]
 8008180:	3307      	adds	r3, #7
 8008182:	f023 0307 	bic.w	r3, r3, #7
 8008186:	3308      	adds	r3, #8
 8008188:	9303      	str	r3, [sp, #12]
 800818a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800818c:	444b      	add	r3, r9
 800818e:	9309      	str	r3, [sp, #36]	; 0x24
 8008190:	e76d      	b.n	800806e <_svfiprintf_r+0x4a>
 8008192:	fb05 3202 	mla	r2, r5, r2, r3
 8008196:	2001      	movs	r0, #1
 8008198:	460f      	mov	r7, r1
 800819a:	e7a6      	b.n	80080ea <_svfiprintf_r+0xc6>
 800819c:	2300      	movs	r3, #0
 800819e:	3701      	adds	r7, #1
 80081a0:	9305      	str	r3, [sp, #20]
 80081a2:	4619      	mov	r1, r3
 80081a4:	250a      	movs	r5, #10
 80081a6:	4638      	mov	r0, r7
 80081a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081ac:	3a30      	subs	r2, #48	; 0x30
 80081ae:	2a09      	cmp	r2, #9
 80081b0:	d903      	bls.n	80081ba <_svfiprintf_r+0x196>
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d0c8      	beq.n	8008148 <_svfiprintf_r+0x124>
 80081b6:	9105      	str	r1, [sp, #20]
 80081b8:	e7c6      	b.n	8008148 <_svfiprintf_r+0x124>
 80081ba:	fb05 2101 	mla	r1, r5, r1, r2
 80081be:	2301      	movs	r3, #1
 80081c0:	4607      	mov	r7, r0
 80081c2:	e7f0      	b.n	80081a6 <_svfiprintf_r+0x182>
 80081c4:	ab03      	add	r3, sp, #12
 80081c6:	9300      	str	r3, [sp, #0]
 80081c8:	4622      	mov	r2, r4
 80081ca:	4b11      	ldr	r3, [pc, #68]	; (8008210 <_svfiprintf_r+0x1ec>)
 80081cc:	a904      	add	r1, sp, #16
 80081ce:	4640      	mov	r0, r8
 80081d0:	f7fc f8e6 	bl	80043a0 <_printf_float>
 80081d4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80081d8:	4681      	mov	r9, r0
 80081da:	d1d6      	bne.n	800818a <_svfiprintf_r+0x166>
 80081dc:	89a3      	ldrh	r3, [r4, #12]
 80081de:	065b      	lsls	r3, r3, #25
 80081e0:	f53f af35 	bmi.w	800804e <_svfiprintf_r+0x2a>
 80081e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80081e6:	b01d      	add	sp, #116	; 0x74
 80081e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081ec:	ab03      	add	r3, sp, #12
 80081ee:	9300      	str	r3, [sp, #0]
 80081f0:	4622      	mov	r2, r4
 80081f2:	4b07      	ldr	r3, [pc, #28]	; (8008210 <_svfiprintf_r+0x1ec>)
 80081f4:	a904      	add	r1, sp, #16
 80081f6:	4640      	mov	r0, r8
 80081f8:	f7fc fb88 	bl	800490c <_printf_i>
 80081fc:	e7ea      	b.n	80081d4 <_svfiprintf_r+0x1b0>
 80081fe:	bf00      	nop
 8008200:	08008a3c 	.word	0x08008a3c
 8008204:	08008a42 	.word	0x08008a42
 8008208:	08008a46 	.word	0x08008a46
 800820c:	080043a1 	.word	0x080043a1
 8008210:	08007f71 	.word	0x08007f71

08008214 <__sfputc_r>:
 8008214:	6893      	ldr	r3, [r2, #8]
 8008216:	3b01      	subs	r3, #1
 8008218:	2b00      	cmp	r3, #0
 800821a:	b410      	push	{r4}
 800821c:	6093      	str	r3, [r2, #8]
 800821e:	da08      	bge.n	8008232 <__sfputc_r+0x1e>
 8008220:	6994      	ldr	r4, [r2, #24]
 8008222:	42a3      	cmp	r3, r4
 8008224:	db01      	blt.n	800822a <__sfputc_r+0x16>
 8008226:	290a      	cmp	r1, #10
 8008228:	d103      	bne.n	8008232 <__sfputc_r+0x1e>
 800822a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800822e:	f7fd bdb1 	b.w	8005d94 <__swbuf_r>
 8008232:	6813      	ldr	r3, [r2, #0]
 8008234:	1c58      	adds	r0, r3, #1
 8008236:	6010      	str	r0, [r2, #0]
 8008238:	7019      	strb	r1, [r3, #0]
 800823a:	4608      	mov	r0, r1
 800823c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008240:	4770      	bx	lr

08008242 <__sfputs_r>:
 8008242:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008244:	4606      	mov	r6, r0
 8008246:	460f      	mov	r7, r1
 8008248:	4614      	mov	r4, r2
 800824a:	18d5      	adds	r5, r2, r3
 800824c:	42ac      	cmp	r4, r5
 800824e:	d101      	bne.n	8008254 <__sfputs_r+0x12>
 8008250:	2000      	movs	r0, #0
 8008252:	e007      	b.n	8008264 <__sfputs_r+0x22>
 8008254:	463a      	mov	r2, r7
 8008256:	f814 1b01 	ldrb.w	r1, [r4], #1
 800825a:	4630      	mov	r0, r6
 800825c:	f7ff ffda 	bl	8008214 <__sfputc_r>
 8008260:	1c43      	adds	r3, r0, #1
 8008262:	d1f3      	bne.n	800824c <__sfputs_r+0xa>
 8008264:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008268 <_vfiprintf_r>:
 8008268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800826c:	460c      	mov	r4, r1
 800826e:	b09d      	sub	sp, #116	; 0x74
 8008270:	4617      	mov	r7, r2
 8008272:	461d      	mov	r5, r3
 8008274:	4606      	mov	r6, r0
 8008276:	b118      	cbz	r0, 8008280 <_vfiprintf_r+0x18>
 8008278:	6983      	ldr	r3, [r0, #24]
 800827a:	b90b      	cbnz	r3, 8008280 <_vfiprintf_r+0x18>
 800827c:	f7fe fd80 	bl	8006d80 <__sinit>
 8008280:	4b7c      	ldr	r3, [pc, #496]	; (8008474 <_vfiprintf_r+0x20c>)
 8008282:	429c      	cmp	r4, r3
 8008284:	d158      	bne.n	8008338 <_vfiprintf_r+0xd0>
 8008286:	6874      	ldr	r4, [r6, #4]
 8008288:	89a3      	ldrh	r3, [r4, #12]
 800828a:	0718      	lsls	r0, r3, #28
 800828c:	d55e      	bpl.n	800834c <_vfiprintf_r+0xe4>
 800828e:	6923      	ldr	r3, [r4, #16]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d05b      	beq.n	800834c <_vfiprintf_r+0xe4>
 8008294:	2300      	movs	r3, #0
 8008296:	9309      	str	r3, [sp, #36]	; 0x24
 8008298:	2320      	movs	r3, #32
 800829a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800829e:	2330      	movs	r3, #48	; 0x30
 80082a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80082a4:	9503      	str	r5, [sp, #12]
 80082a6:	f04f 0b01 	mov.w	fp, #1
 80082aa:	46b8      	mov	r8, r7
 80082ac:	4645      	mov	r5, r8
 80082ae:	f815 3b01 	ldrb.w	r3, [r5], #1
 80082b2:	b10b      	cbz	r3, 80082b8 <_vfiprintf_r+0x50>
 80082b4:	2b25      	cmp	r3, #37	; 0x25
 80082b6:	d154      	bne.n	8008362 <_vfiprintf_r+0xfa>
 80082b8:	ebb8 0a07 	subs.w	sl, r8, r7
 80082bc:	d00b      	beq.n	80082d6 <_vfiprintf_r+0x6e>
 80082be:	4653      	mov	r3, sl
 80082c0:	463a      	mov	r2, r7
 80082c2:	4621      	mov	r1, r4
 80082c4:	4630      	mov	r0, r6
 80082c6:	f7ff ffbc 	bl	8008242 <__sfputs_r>
 80082ca:	3001      	adds	r0, #1
 80082cc:	f000 80c2 	beq.w	8008454 <_vfiprintf_r+0x1ec>
 80082d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082d2:	4453      	add	r3, sl
 80082d4:	9309      	str	r3, [sp, #36]	; 0x24
 80082d6:	f898 3000 	ldrb.w	r3, [r8]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	f000 80ba 	beq.w	8008454 <_vfiprintf_r+0x1ec>
 80082e0:	2300      	movs	r3, #0
 80082e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80082e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80082ea:	9304      	str	r3, [sp, #16]
 80082ec:	9307      	str	r3, [sp, #28]
 80082ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80082f2:	931a      	str	r3, [sp, #104]	; 0x68
 80082f4:	46a8      	mov	r8, r5
 80082f6:	2205      	movs	r2, #5
 80082f8:	f818 1b01 	ldrb.w	r1, [r8], #1
 80082fc:	485e      	ldr	r0, [pc, #376]	; (8008478 <_vfiprintf_r+0x210>)
 80082fe:	f7f7 ff6f 	bl	80001e0 <memchr>
 8008302:	9b04      	ldr	r3, [sp, #16]
 8008304:	bb78      	cbnz	r0, 8008366 <_vfiprintf_r+0xfe>
 8008306:	06d9      	lsls	r1, r3, #27
 8008308:	bf44      	itt	mi
 800830a:	2220      	movmi	r2, #32
 800830c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008310:	071a      	lsls	r2, r3, #28
 8008312:	bf44      	itt	mi
 8008314:	222b      	movmi	r2, #43	; 0x2b
 8008316:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800831a:	782a      	ldrb	r2, [r5, #0]
 800831c:	2a2a      	cmp	r2, #42	; 0x2a
 800831e:	d02a      	beq.n	8008376 <_vfiprintf_r+0x10e>
 8008320:	9a07      	ldr	r2, [sp, #28]
 8008322:	46a8      	mov	r8, r5
 8008324:	2000      	movs	r0, #0
 8008326:	250a      	movs	r5, #10
 8008328:	4641      	mov	r1, r8
 800832a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800832e:	3b30      	subs	r3, #48	; 0x30
 8008330:	2b09      	cmp	r3, #9
 8008332:	d969      	bls.n	8008408 <_vfiprintf_r+0x1a0>
 8008334:	b360      	cbz	r0, 8008390 <_vfiprintf_r+0x128>
 8008336:	e024      	b.n	8008382 <_vfiprintf_r+0x11a>
 8008338:	4b50      	ldr	r3, [pc, #320]	; (800847c <_vfiprintf_r+0x214>)
 800833a:	429c      	cmp	r4, r3
 800833c:	d101      	bne.n	8008342 <_vfiprintf_r+0xda>
 800833e:	68b4      	ldr	r4, [r6, #8]
 8008340:	e7a2      	b.n	8008288 <_vfiprintf_r+0x20>
 8008342:	4b4f      	ldr	r3, [pc, #316]	; (8008480 <_vfiprintf_r+0x218>)
 8008344:	429c      	cmp	r4, r3
 8008346:	bf08      	it	eq
 8008348:	68f4      	ldreq	r4, [r6, #12]
 800834a:	e79d      	b.n	8008288 <_vfiprintf_r+0x20>
 800834c:	4621      	mov	r1, r4
 800834e:	4630      	mov	r0, r6
 8008350:	f7fd fd72 	bl	8005e38 <__swsetup_r>
 8008354:	2800      	cmp	r0, #0
 8008356:	d09d      	beq.n	8008294 <_vfiprintf_r+0x2c>
 8008358:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800835c:	b01d      	add	sp, #116	; 0x74
 800835e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008362:	46a8      	mov	r8, r5
 8008364:	e7a2      	b.n	80082ac <_vfiprintf_r+0x44>
 8008366:	4a44      	ldr	r2, [pc, #272]	; (8008478 <_vfiprintf_r+0x210>)
 8008368:	1a80      	subs	r0, r0, r2
 800836a:	fa0b f000 	lsl.w	r0, fp, r0
 800836e:	4318      	orrs	r0, r3
 8008370:	9004      	str	r0, [sp, #16]
 8008372:	4645      	mov	r5, r8
 8008374:	e7be      	b.n	80082f4 <_vfiprintf_r+0x8c>
 8008376:	9a03      	ldr	r2, [sp, #12]
 8008378:	1d11      	adds	r1, r2, #4
 800837a:	6812      	ldr	r2, [r2, #0]
 800837c:	9103      	str	r1, [sp, #12]
 800837e:	2a00      	cmp	r2, #0
 8008380:	db01      	blt.n	8008386 <_vfiprintf_r+0x11e>
 8008382:	9207      	str	r2, [sp, #28]
 8008384:	e004      	b.n	8008390 <_vfiprintf_r+0x128>
 8008386:	4252      	negs	r2, r2
 8008388:	f043 0302 	orr.w	r3, r3, #2
 800838c:	9207      	str	r2, [sp, #28]
 800838e:	9304      	str	r3, [sp, #16]
 8008390:	f898 3000 	ldrb.w	r3, [r8]
 8008394:	2b2e      	cmp	r3, #46	; 0x2e
 8008396:	d10e      	bne.n	80083b6 <_vfiprintf_r+0x14e>
 8008398:	f898 3001 	ldrb.w	r3, [r8, #1]
 800839c:	2b2a      	cmp	r3, #42	; 0x2a
 800839e:	d138      	bne.n	8008412 <_vfiprintf_r+0x1aa>
 80083a0:	9b03      	ldr	r3, [sp, #12]
 80083a2:	1d1a      	adds	r2, r3, #4
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	9203      	str	r2, [sp, #12]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	bfb8      	it	lt
 80083ac:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80083b0:	f108 0802 	add.w	r8, r8, #2
 80083b4:	9305      	str	r3, [sp, #20]
 80083b6:	4d33      	ldr	r5, [pc, #204]	; (8008484 <_vfiprintf_r+0x21c>)
 80083b8:	f898 1000 	ldrb.w	r1, [r8]
 80083bc:	2203      	movs	r2, #3
 80083be:	4628      	mov	r0, r5
 80083c0:	f7f7 ff0e 	bl	80001e0 <memchr>
 80083c4:	b140      	cbz	r0, 80083d8 <_vfiprintf_r+0x170>
 80083c6:	2340      	movs	r3, #64	; 0x40
 80083c8:	1b40      	subs	r0, r0, r5
 80083ca:	fa03 f000 	lsl.w	r0, r3, r0
 80083ce:	9b04      	ldr	r3, [sp, #16]
 80083d0:	4303      	orrs	r3, r0
 80083d2:	f108 0801 	add.w	r8, r8, #1
 80083d6:	9304      	str	r3, [sp, #16]
 80083d8:	f898 1000 	ldrb.w	r1, [r8]
 80083dc:	482a      	ldr	r0, [pc, #168]	; (8008488 <_vfiprintf_r+0x220>)
 80083de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80083e2:	2206      	movs	r2, #6
 80083e4:	f108 0701 	add.w	r7, r8, #1
 80083e8:	f7f7 fefa 	bl	80001e0 <memchr>
 80083ec:	2800      	cmp	r0, #0
 80083ee:	d037      	beq.n	8008460 <_vfiprintf_r+0x1f8>
 80083f0:	4b26      	ldr	r3, [pc, #152]	; (800848c <_vfiprintf_r+0x224>)
 80083f2:	bb1b      	cbnz	r3, 800843c <_vfiprintf_r+0x1d4>
 80083f4:	9b03      	ldr	r3, [sp, #12]
 80083f6:	3307      	adds	r3, #7
 80083f8:	f023 0307 	bic.w	r3, r3, #7
 80083fc:	3308      	adds	r3, #8
 80083fe:	9303      	str	r3, [sp, #12]
 8008400:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008402:	444b      	add	r3, r9
 8008404:	9309      	str	r3, [sp, #36]	; 0x24
 8008406:	e750      	b.n	80082aa <_vfiprintf_r+0x42>
 8008408:	fb05 3202 	mla	r2, r5, r2, r3
 800840c:	2001      	movs	r0, #1
 800840e:	4688      	mov	r8, r1
 8008410:	e78a      	b.n	8008328 <_vfiprintf_r+0xc0>
 8008412:	2300      	movs	r3, #0
 8008414:	f108 0801 	add.w	r8, r8, #1
 8008418:	9305      	str	r3, [sp, #20]
 800841a:	4619      	mov	r1, r3
 800841c:	250a      	movs	r5, #10
 800841e:	4640      	mov	r0, r8
 8008420:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008424:	3a30      	subs	r2, #48	; 0x30
 8008426:	2a09      	cmp	r2, #9
 8008428:	d903      	bls.n	8008432 <_vfiprintf_r+0x1ca>
 800842a:	2b00      	cmp	r3, #0
 800842c:	d0c3      	beq.n	80083b6 <_vfiprintf_r+0x14e>
 800842e:	9105      	str	r1, [sp, #20]
 8008430:	e7c1      	b.n	80083b6 <_vfiprintf_r+0x14e>
 8008432:	fb05 2101 	mla	r1, r5, r1, r2
 8008436:	2301      	movs	r3, #1
 8008438:	4680      	mov	r8, r0
 800843a:	e7f0      	b.n	800841e <_vfiprintf_r+0x1b6>
 800843c:	ab03      	add	r3, sp, #12
 800843e:	9300      	str	r3, [sp, #0]
 8008440:	4622      	mov	r2, r4
 8008442:	4b13      	ldr	r3, [pc, #76]	; (8008490 <_vfiprintf_r+0x228>)
 8008444:	a904      	add	r1, sp, #16
 8008446:	4630      	mov	r0, r6
 8008448:	f7fb ffaa 	bl	80043a0 <_printf_float>
 800844c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8008450:	4681      	mov	r9, r0
 8008452:	d1d5      	bne.n	8008400 <_vfiprintf_r+0x198>
 8008454:	89a3      	ldrh	r3, [r4, #12]
 8008456:	065b      	lsls	r3, r3, #25
 8008458:	f53f af7e 	bmi.w	8008358 <_vfiprintf_r+0xf0>
 800845c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800845e:	e77d      	b.n	800835c <_vfiprintf_r+0xf4>
 8008460:	ab03      	add	r3, sp, #12
 8008462:	9300      	str	r3, [sp, #0]
 8008464:	4622      	mov	r2, r4
 8008466:	4b0a      	ldr	r3, [pc, #40]	; (8008490 <_vfiprintf_r+0x228>)
 8008468:	a904      	add	r1, sp, #16
 800846a:	4630      	mov	r0, r6
 800846c:	f7fc fa4e 	bl	800490c <_printf_i>
 8008470:	e7ec      	b.n	800844c <_vfiprintf_r+0x1e4>
 8008472:	bf00      	nop
 8008474:	080088f0 	.word	0x080088f0
 8008478:	08008a3c 	.word	0x08008a3c
 800847c:	08008910 	.word	0x08008910
 8008480:	080088d0 	.word	0x080088d0
 8008484:	08008a42 	.word	0x08008a42
 8008488:	08008a46 	.word	0x08008a46
 800848c:	080043a1 	.word	0x080043a1
 8008490:	08008243 	.word	0x08008243

08008494 <_sbrk_r>:
 8008494:	b538      	push	{r3, r4, r5, lr}
 8008496:	4c06      	ldr	r4, [pc, #24]	; (80084b0 <_sbrk_r+0x1c>)
 8008498:	2300      	movs	r3, #0
 800849a:	4605      	mov	r5, r0
 800849c:	4608      	mov	r0, r1
 800849e:	6023      	str	r3, [r4, #0]
 80084a0:	f7f9 f886 	bl	80015b0 <_sbrk>
 80084a4:	1c43      	adds	r3, r0, #1
 80084a6:	d102      	bne.n	80084ae <_sbrk_r+0x1a>
 80084a8:	6823      	ldr	r3, [r4, #0]
 80084aa:	b103      	cbz	r3, 80084ae <_sbrk_r+0x1a>
 80084ac:	602b      	str	r3, [r5, #0]
 80084ae:	bd38      	pop	{r3, r4, r5, pc}
 80084b0:	2000033c 	.word	0x2000033c

080084b4 <__sread>:
 80084b4:	b510      	push	{r4, lr}
 80084b6:	460c      	mov	r4, r1
 80084b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084bc:	f000 f8f4 	bl	80086a8 <_read_r>
 80084c0:	2800      	cmp	r0, #0
 80084c2:	bfab      	itete	ge
 80084c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80084c6:	89a3      	ldrhlt	r3, [r4, #12]
 80084c8:	181b      	addge	r3, r3, r0
 80084ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80084ce:	bfac      	ite	ge
 80084d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80084d2:	81a3      	strhlt	r3, [r4, #12]
 80084d4:	bd10      	pop	{r4, pc}

080084d6 <__swrite>:
 80084d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084da:	461f      	mov	r7, r3
 80084dc:	898b      	ldrh	r3, [r1, #12]
 80084de:	05db      	lsls	r3, r3, #23
 80084e0:	4605      	mov	r5, r0
 80084e2:	460c      	mov	r4, r1
 80084e4:	4616      	mov	r6, r2
 80084e6:	d505      	bpl.n	80084f4 <__swrite+0x1e>
 80084e8:	2302      	movs	r3, #2
 80084ea:	2200      	movs	r2, #0
 80084ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084f0:	f000 f886 	bl	8008600 <_lseek_r>
 80084f4:	89a3      	ldrh	r3, [r4, #12]
 80084f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80084fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80084fe:	81a3      	strh	r3, [r4, #12]
 8008500:	4632      	mov	r2, r6
 8008502:	463b      	mov	r3, r7
 8008504:	4628      	mov	r0, r5
 8008506:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800850a:	f000 b835 	b.w	8008578 <_write_r>

0800850e <__sseek>:
 800850e:	b510      	push	{r4, lr}
 8008510:	460c      	mov	r4, r1
 8008512:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008516:	f000 f873 	bl	8008600 <_lseek_r>
 800851a:	1c43      	adds	r3, r0, #1
 800851c:	89a3      	ldrh	r3, [r4, #12]
 800851e:	bf15      	itete	ne
 8008520:	6560      	strne	r0, [r4, #84]	; 0x54
 8008522:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008526:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800852a:	81a3      	strheq	r3, [r4, #12]
 800852c:	bf18      	it	ne
 800852e:	81a3      	strhne	r3, [r4, #12]
 8008530:	bd10      	pop	{r4, pc}

08008532 <__sclose>:
 8008532:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008536:	f000 b831 	b.w	800859c <_close_r>

0800853a <strncmp>:
 800853a:	b510      	push	{r4, lr}
 800853c:	b16a      	cbz	r2, 800855a <strncmp+0x20>
 800853e:	3901      	subs	r1, #1
 8008540:	1884      	adds	r4, r0, r2
 8008542:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008546:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800854a:	4293      	cmp	r3, r2
 800854c:	d103      	bne.n	8008556 <strncmp+0x1c>
 800854e:	42a0      	cmp	r0, r4
 8008550:	d001      	beq.n	8008556 <strncmp+0x1c>
 8008552:	2b00      	cmp	r3, #0
 8008554:	d1f5      	bne.n	8008542 <strncmp+0x8>
 8008556:	1a98      	subs	r0, r3, r2
 8008558:	bd10      	pop	{r4, pc}
 800855a:	4610      	mov	r0, r2
 800855c:	e7fc      	b.n	8008558 <strncmp+0x1e>

0800855e <__ascii_wctomb>:
 800855e:	b149      	cbz	r1, 8008574 <__ascii_wctomb+0x16>
 8008560:	2aff      	cmp	r2, #255	; 0xff
 8008562:	bf85      	ittet	hi
 8008564:	238a      	movhi	r3, #138	; 0x8a
 8008566:	6003      	strhi	r3, [r0, #0]
 8008568:	700a      	strbls	r2, [r1, #0]
 800856a:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800856e:	bf98      	it	ls
 8008570:	2001      	movls	r0, #1
 8008572:	4770      	bx	lr
 8008574:	4608      	mov	r0, r1
 8008576:	4770      	bx	lr

08008578 <_write_r>:
 8008578:	b538      	push	{r3, r4, r5, lr}
 800857a:	4c07      	ldr	r4, [pc, #28]	; (8008598 <_write_r+0x20>)
 800857c:	4605      	mov	r5, r0
 800857e:	4608      	mov	r0, r1
 8008580:	4611      	mov	r1, r2
 8008582:	2200      	movs	r2, #0
 8008584:	6022      	str	r2, [r4, #0]
 8008586:	461a      	mov	r2, r3
 8008588:	f7f8 ffc1 	bl	800150e <_write>
 800858c:	1c43      	adds	r3, r0, #1
 800858e:	d102      	bne.n	8008596 <_write_r+0x1e>
 8008590:	6823      	ldr	r3, [r4, #0]
 8008592:	b103      	cbz	r3, 8008596 <_write_r+0x1e>
 8008594:	602b      	str	r3, [r5, #0]
 8008596:	bd38      	pop	{r3, r4, r5, pc}
 8008598:	2000033c 	.word	0x2000033c

0800859c <_close_r>:
 800859c:	b538      	push	{r3, r4, r5, lr}
 800859e:	4c06      	ldr	r4, [pc, #24]	; (80085b8 <_close_r+0x1c>)
 80085a0:	2300      	movs	r3, #0
 80085a2:	4605      	mov	r5, r0
 80085a4:	4608      	mov	r0, r1
 80085a6:	6023      	str	r3, [r4, #0]
 80085a8:	f7f8 ffcd 	bl	8001546 <_close>
 80085ac:	1c43      	adds	r3, r0, #1
 80085ae:	d102      	bne.n	80085b6 <_close_r+0x1a>
 80085b0:	6823      	ldr	r3, [r4, #0]
 80085b2:	b103      	cbz	r3, 80085b6 <_close_r+0x1a>
 80085b4:	602b      	str	r3, [r5, #0]
 80085b6:	bd38      	pop	{r3, r4, r5, pc}
 80085b8:	2000033c 	.word	0x2000033c

080085bc <_fstat_r>:
 80085bc:	b538      	push	{r3, r4, r5, lr}
 80085be:	4c07      	ldr	r4, [pc, #28]	; (80085dc <_fstat_r+0x20>)
 80085c0:	2300      	movs	r3, #0
 80085c2:	4605      	mov	r5, r0
 80085c4:	4608      	mov	r0, r1
 80085c6:	4611      	mov	r1, r2
 80085c8:	6023      	str	r3, [r4, #0]
 80085ca:	f7f8 ffc8 	bl	800155e <_fstat>
 80085ce:	1c43      	adds	r3, r0, #1
 80085d0:	d102      	bne.n	80085d8 <_fstat_r+0x1c>
 80085d2:	6823      	ldr	r3, [r4, #0]
 80085d4:	b103      	cbz	r3, 80085d8 <_fstat_r+0x1c>
 80085d6:	602b      	str	r3, [r5, #0]
 80085d8:	bd38      	pop	{r3, r4, r5, pc}
 80085da:	bf00      	nop
 80085dc:	2000033c 	.word	0x2000033c

080085e0 <_isatty_r>:
 80085e0:	b538      	push	{r3, r4, r5, lr}
 80085e2:	4c06      	ldr	r4, [pc, #24]	; (80085fc <_isatty_r+0x1c>)
 80085e4:	2300      	movs	r3, #0
 80085e6:	4605      	mov	r5, r0
 80085e8:	4608      	mov	r0, r1
 80085ea:	6023      	str	r3, [r4, #0]
 80085ec:	f7f8 ffc7 	bl	800157e <_isatty>
 80085f0:	1c43      	adds	r3, r0, #1
 80085f2:	d102      	bne.n	80085fa <_isatty_r+0x1a>
 80085f4:	6823      	ldr	r3, [r4, #0]
 80085f6:	b103      	cbz	r3, 80085fa <_isatty_r+0x1a>
 80085f8:	602b      	str	r3, [r5, #0]
 80085fa:	bd38      	pop	{r3, r4, r5, pc}
 80085fc:	2000033c 	.word	0x2000033c

08008600 <_lseek_r>:
 8008600:	b538      	push	{r3, r4, r5, lr}
 8008602:	4c07      	ldr	r4, [pc, #28]	; (8008620 <_lseek_r+0x20>)
 8008604:	4605      	mov	r5, r0
 8008606:	4608      	mov	r0, r1
 8008608:	4611      	mov	r1, r2
 800860a:	2200      	movs	r2, #0
 800860c:	6022      	str	r2, [r4, #0]
 800860e:	461a      	mov	r2, r3
 8008610:	f7f8 ffc0 	bl	8001594 <_lseek>
 8008614:	1c43      	adds	r3, r0, #1
 8008616:	d102      	bne.n	800861e <_lseek_r+0x1e>
 8008618:	6823      	ldr	r3, [r4, #0]
 800861a:	b103      	cbz	r3, 800861e <_lseek_r+0x1e>
 800861c:	602b      	str	r3, [r5, #0]
 800861e:	bd38      	pop	{r3, r4, r5, pc}
 8008620:	2000033c 	.word	0x2000033c

08008624 <memmove>:
 8008624:	4288      	cmp	r0, r1
 8008626:	b510      	push	{r4, lr}
 8008628:	eb01 0302 	add.w	r3, r1, r2
 800862c:	d807      	bhi.n	800863e <memmove+0x1a>
 800862e:	1e42      	subs	r2, r0, #1
 8008630:	4299      	cmp	r1, r3
 8008632:	d00a      	beq.n	800864a <memmove+0x26>
 8008634:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008638:	f802 4f01 	strb.w	r4, [r2, #1]!
 800863c:	e7f8      	b.n	8008630 <memmove+0xc>
 800863e:	4283      	cmp	r3, r0
 8008640:	d9f5      	bls.n	800862e <memmove+0xa>
 8008642:	1881      	adds	r1, r0, r2
 8008644:	1ad2      	subs	r2, r2, r3
 8008646:	42d3      	cmn	r3, r2
 8008648:	d100      	bne.n	800864c <memmove+0x28>
 800864a:	bd10      	pop	{r4, pc}
 800864c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008650:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008654:	e7f7      	b.n	8008646 <memmove+0x22>

08008656 <__malloc_lock>:
 8008656:	4770      	bx	lr

08008658 <__malloc_unlock>:
 8008658:	4770      	bx	lr

0800865a <_realloc_r>:
 800865a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800865c:	4607      	mov	r7, r0
 800865e:	4614      	mov	r4, r2
 8008660:	460e      	mov	r6, r1
 8008662:	b921      	cbnz	r1, 800866e <_realloc_r+0x14>
 8008664:	4611      	mov	r1, r2
 8008666:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800866a:	f7ff bc27 	b.w	8007ebc <_malloc_r>
 800866e:	b922      	cbnz	r2, 800867a <_realloc_r+0x20>
 8008670:	f7ff fbd6 	bl	8007e20 <_free_r>
 8008674:	4625      	mov	r5, r4
 8008676:	4628      	mov	r0, r5
 8008678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800867a:	f000 f827 	bl	80086cc <_malloc_usable_size_r>
 800867e:	42a0      	cmp	r0, r4
 8008680:	d20f      	bcs.n	80086a2 <_realloc_r+0x48>
 8008682:	4621      	mov	r1, r4
 8008684:	4638      	mov	r0, r7
 8008686:	f7ff fc19 	bl	8007ebc <_malloc_r>
 800868a:	4605      	mov	r5, r0
 800868c:	2800      	cmp	r0, #0
 800868e:	d0f2      	beq.n	8008676 <_realloc_r+0x1c>
 8008690:	4631      	mov	r1, r6
 8008692:	4622      	mov	r2, r4
 8008694:	f7fb fddc 	bl	8004250 <memcpy>
 8008698:	4631      	mov	r1, r6
 800869a:	4638      	mov	r0, r7
 800869c:	f7ff fbc0 	bl	8007e20 <_free_r>
 80086a0:	e7e9      	b.n	8008676 <_realloc_r+0x1c>
 80086a2:	4635      	mov	r5, r6
 80086a4:	e7e7      	b.n	8008676 <_realloc_r+0x1c>
	...

080086a8 <_read_r>:
 80086a8:	b538      	push	{r3, r4, r5, lr}
 80086aa:	4c07      	ldr	r4, [pc, #28]	; (80086c8 <_read_r+0x20>)
 80086ac:	4605      	mov	r5, r0
 80086ae:	4608      	mov	r0, r1
 80086b0:	4611      	mov	r1, r2
 80086b2:	2200      	movs	r2, #0
 80086b4:	6022      	str	r2, [r4, #0]
 80086b6:	461a      	mov	r2, r3
 80086b8:	f7f8 ff0c 	bl	80014d4 <_read>
 80086bc:	1c43      	adds	r3, r0, #1
 80086be:	d102      	bne.n	80086c6 <_read_r+0x1e>
 80086c0:	6823      	ldr	r3, [r4, #0]
 80086c2:	b103      	cbz	r3, 80086c6 <_read_r+0x1e>
 80086c4:	602b      	str	r3, [r5, #0]
 80086c6:	bd38      	pop	{r3, r4, r5, pc}
 80086c8:	2000033c 	.word	0x2000033c

080086cc <_malloc_usable_size_r>:
 80086cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086d0:	1f18      	subs	r0, r3, #4
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	bfbc      	itt	lt
 80086d6:	580b      	ldrlt	r3, [r1, r0]
 80086d8:	18c0      	addlt	r0, r0, r3
 80086da:	4770      	bx	lr

080086dc <_init>:
 80086dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086de:	bf00      	nop
 80086e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086e2:	bc08      	pop	{r3}
 80086e4:	469e      	mov	lr, r3
 80086e6:	4770      	bx	lr

080086e8 <_fini>:
 80086e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086ea:	bf00      	nop
 80086ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086ee:	bc08      	pop	{r3}
 80086f0:	469e      	mov	lr, r3
 80086f2:	4770      	bx	lr
